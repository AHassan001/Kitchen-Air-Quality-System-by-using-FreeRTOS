
T1_RTOOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000193e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  0000193e  000019d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000663  008000aa  008000aa  00001a1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004476  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125e  00000000  00000000  000062d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000283b  00000000  00000000  00007534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  00009d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001851  00000000  00000000  0000a834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003967  00000000  00000000  0000c085  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 03 	call	0x676	; 0x676 <main>
      8a:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
      92:	fc 01       	movw	r30, r24
	/* ADMUX Register Bits Description:
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 * REF1:0  = 00 Clear these two bits before setup the required reference voltage value
	 */
	ADMUX = 0;
      94:	17 b8       	out	0x07, r1	; 7

	/* Setup the reference voltage value inside the REFS1 and REFS0 bits*/
	ADMUX |= (Config_Ptr->ref_volt << 6);
      96:	87 b1       	in	r24, 0x07	; 7
      98:	90 81       	ld	r25, Z
      9a:	40 e4       	ldi	r20, 0x40	; 64
      9c:	94 9f       	mul	r25, r20
      9e:	90 01       	movw	r18, r0
      a0:	11 24       	eor	r1, r1
      a2:	28 2b       	or	r18, r24
      a4:	27 b9       	out	0x07, r18	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable the AUTO trigger
	 * ADPS2:0 = 000 Clear these three bits before setup the required prescaler value
	 */
	ADCSRA = (1<<ADEN);
      a6:	80 e8       	ldi	r24, 0x80	; 128
      a8:	86 b9       	out	0x06, r24	; 6

	/* Setup the prescaler value inside the ADPS2, ADPS1 and ADPS0 bits*/
	ADCSRA |= Config_Ptr->prescaler;
      aa:	96 b1       	in	r25, 0x06	; 6
      ac:	81 81       	ldd	r24, Z+1	; 0x01
      ae:	89 2b       	or	r24, r25
      b0:	86 b9       	out	0x06, r24	; 6
      b2:	08 95       	ret

000000b4 <ADC_readChannel>:
}

uint16 ADC_readChannel(uint8 channel_num)
{
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
      b4:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
      b6:	97 b1       	in	r25, 0x07	; 7
      b8:	90 7e       	andi	r25, 0xE0	; 224
      ba:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
      bc:	97 b1       	in	r25, 0x07	; 7
      be:	89 2b       	or	r24, r25
      c0:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
      c2:	86 b1       	in	r24, 0x06	; 6
      c4:	80 64       	ori	r24, 0x40	; 64
      c6:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
      c8:	34 9b       	sbis	0x06, 4	; 6
      ca:	fe cf       	rjmp	.-4      	; 0xc8 <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	80 61       	ori	r24, 0x10	; 16
      d0:	86 b9       	out	0x06, r24	; 6
	return ADC; /* Read the digital value from the data register */
      d2:	84 b1       	in	r24, 0x04	; 4
      d4:	95 b1       	in	r25, 0x05	; 5
}
      d6:	08 95       	ret

000000d8 <DcMotor_Init>:
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
      d8:	41 e0       	ldi	r20, 0x01	; 1
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
      e2:	41 e0       	ldi	r20, 0x01	; 1
      e4:	61 e0       	ldi	r22, 0x01	; 1
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     100:	08 95       	ret

00000102 <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     102:	cf 93       	push	r28
     104:	c6 2f       	mov	r28, r22
	if(state == DC_MOTOR_CW)
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DcMotor_Rotate+0x22>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     112:	41 e0       	ldi	r20, 0x01	; 1
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>

		PWM_Timer0_Start(speed);
     11c:	8c 2f       	mov	r24, r28
     11e:	0e 94 8b 03 	call	0x716	; 0x716 <PWM_Timer0_Start>
     122:	1f c0       	rjmp	.+62     	; 0x162 <DcMotor_Rotate+0x60>
	}
	else if(state == DC_MOTOR_ACW)
     124:	82 30       	cpi	r24, 0x02	; 2
     126:	71 f4       	brne	.+28     	; 0x144 <DcMotor_Rotate+0x42>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>

		PWM_Timer0_Start(speed);
     13c:	8c 2f       	mov	r24, r28
     13e:	0e 94 8b 03 	call	0x716	; 0x716 <PWM_Timer0_Start>
     142:	0f c0       	rjmp	.+30     	; 0x162 <DcMotor_Rotate+0x60>
	}
	else if(state == DC_MOTOR_STOP)
     144:	81 11       	cpse	r24, r1
     146:	0d c0       	rjmp	.+26     	; 0x162 <DcMotor_Rotate+0x60>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>

		PWM_Timer0_Start(speed);
     15c:	8c 2f       	mov	r24, r28
     15e:	0e 94 8b 03 	call	0x716	; 0x716 <PWM_Timer0_Start>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <GPIO_setupPinDirection>:
			break;
		}
	}

	return pin_value;
}
     166:	68 30       	cpi	r22, 0x08	; 8
     168:	08 f0       	brcs	.+2      	; 0x16c <GPIO_setupPinDirection+0x6>
     16a:	6f c0       	rjmp	.+222    	; 0x24a <GPIO_setupPinDirection+0xe4>
     16c:	84 30       	cpi	r24, 0x04	; 4
     16e:	08 f0       	brcs	.+2      	; 0x172 <GPIO_setupPinDirection+0xc>
     170:	6c c0       	rjmp	.+216    	; 0x24a <GPIO_setupPinDirection+0xe4>
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	01 f1       	breq	.+64     	; 0x1b6 <GPIO_setupPinDirection+0x50>
     176:	30 f0       	brcs	.+12     	; 0x184 <GPIO_setupPinDirection+0x1e>
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	b1 f1       	breq	.+108    	; 0x1e8 <GPIO_setupPinDirection+0x82>
     17c:	83 30       	cpi	r24, 0x03	; 3
     17e:	09 f4       	brne	.+2      	; 0x182 <GPIO_setupPinDirection+0x1c>
     180:	4c c0       	rjmp	.+152    	; 0x21a <GPIO_setupPinDirection+0xb4>
     182:	08 95       	ret
     184:	41 30       	cpi	r20, 0x01	; 1
     186:	59 f4       	brne	.+22     	; 0x19e <GPIO_setupPinDirection+0x38>
     188:	2a b3       	in	r18, 0x1a	; 26
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <GPIO_setupPinDirection+0x2e>
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	6a 95       	dec	r22
     196:	e2 f7       	brpl	.-8      	; 0x190 <GPIO_setupPinDirection+0x2a>
     198:	82 2b       	or	r24, r18
     19a:	8a bb       	out	0x1a, r24	; 26
     19c:	08 95       	ret
     19e:	2a b3       	in	r18, 0x1a	; 26
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <GPIO_setupPinDirection+0x44>
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	6a 95       	dec	r22
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <GPIO_setupPinDirection+0x40>
     1ae:	80 95       	com	r24
     1b0:	82 23       	and	r24, r18
     1b2:	8a bb       	out	0x1a, r24	; 26
     1b4:	08 95       	ret
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	59 f4       	brne	.+22     	; 0x1d0 <GPIO_setupPinDirection+0x6a>
     1ba:	27 b3       	in	r18, 0x17	; 23
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GPIO_setupPinDirection+0x60>
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	6a 95       	dec	r22
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <GPIO_setupPinDirection+0x5c>
     1ca:	82 2b       	or	r24, r18
     1cc:	87 bb       	out	0x17, r24	; 23
     1ce:	08 95       	ret
     1d0:	27 b3       	in	r18, 0x17	; 23
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <GPIO_setupPinDirection+0x76>
     1d8:	88 0f       	add	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	6a 95       	dec	r22
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <GPIO_setupPinDirection+0x72>
     1e0:	80 95       	com	r24
     1e2:	82 23       	and	r24, r18
     1e4:	87 bb       	out	0x17, r24	; 23
     1e6:	08 95       	ret
     1e8:	41 30       	cpi	r20, 0x01	; 1
     1ea:	59 f4       	brne	.+22     	; 0x202 <GPIO_setupPinDirection+0x9c>
     1ec:	24 b3       	in	r18, 0x14	; 20
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <GPIO_setupPinDirection+0x92>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	6a 95       	dec	r22
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <GPIO_setupPinDirection+0x8e>
     1fc:	82 2b       	or	r24, r18
     1fe:	84 bb       	out	0x14, r24	; 20
     200:	08 95       	ret
     202:	24 b3       	in	r18, 0x14	; 20
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_setupPinDirection+0xa8>
     20a:	88 0f       	add	r24, r24
     20c:	99 1f       	adc	r25, r25
     20e:	6a 95       	dec	r22
     210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_setupPinDirection+0xa4>
     212:	80 95       	com	r24
     214:	82 23       	and	r24, r18
     216:	84 bb       	out	0x14, r24	; 20
     218:	08 95       	ret
     21a:	41 30       	cpi	r20, 0x01	; 1
     21c:	59 f4       	brne	.+22     	; 0x234 <GPIO_setupPinDirection+0xce>
     21e:	21 b3       	in	r18, 0x11	; 17
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <GPIO_setupPinDirection+0xc4>
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	6a 95       	dec	r22
     22c:	e2 f7       	brpl	.-8      	; 0x226 <GPIO_setupPinDirection+0xc0>
     22e:	82 2b       	or	r24, r18
     230:	81 bb       	out	0x11, r24	; 17
     232:	08 95       	ret
     234:	21 b3       	in	r18, 0x11	; 17
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 c0       	rjmp	.+4      	; 0x240 <GPIO_setupPinDirection+0xda>
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	6a 95       	dec	r22
     242:	e2 f7       	brpl	.-8      	; 0x23c <GPIO_setupPinDirection+0xd6>
     244:	80 95       	com	r24
     246:	82 23       	and	r24, r18
     248:	81 bb       	out	0x11, r24	; 17
     24a:	08 95       	ret

0000024c <GPIO_writePin>:
     24c:	68 30       	cpi	r22, 0x08	; 8
     24e:	08 f0       	brcs	.+2      	; 0x252 <GPIO_writePin+0x6>
     250:	6f c0       	rjmp	.+222    	; 0x330 <GPIO_writePin+0xe4>
     252:	84 30       	cpi	r24, 0x04	; 4
     254:	08 f0       	brcs	.+2      	; 0x258 <GPIO_writePin+0xc>
     256:	6c c0       	rjmp	.+216    	; 0x330 <GPIO_writePin+0xe4>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	01 f1       	breq	.+64     	; 0x29c <GPIO_writePin+0x50>
     25c:	30 f0       	brcs	.+12     	; 0x26a <GPIO_writePin+0x1e>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	b1 f1       	breq	.+108    	; 0x2ce <GPIO_writePin+0x82>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	09 f4       	brne	.+2      	; 0x268 <GPIO_writePin+0x1c>
     266:	4c c0       	rjmp	.+152    	; 0x300 <GPIO_writePin+0xb4>
     268:	08 95       	ret
     26a:	41 30       	cpi	r20, 0x01	; 1
     26c:	59 f4       	brne	.+22     	; 0x284 <GPIO_writePin+0x38>
     26e:	2b b3       	in	r18, 0x1b	; 27
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <GPIO_writePin+0x2e>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <GPIO_writePin+0x2a>
     27e:	82 2b       	or	r24, r18
     280:	8b bb       	out	0x1b, r24	; 27
     282:	08 95       	ret
     284:	2b b3       	in	r18, 0x1b	; 27
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <GPIO_writePin+0x44>
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <GPIO_writePin+0x40>
     294:	80 95       	com	r24
     296:	82 23       	and	r24, r18
     298:	8b bb       	out	0x1b, r24	; 27
     29a:	08 95       	ret
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	59 f4       	brne	.+22     	; 0x2b6 <GPIO_writePin+0x6a>
     2a0:	28 b3       	in	r18, 0x18	; 24
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <GPIO_writePin+0x60>
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	6a 95       	dec	r22
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <GPIO_writePin+0x5c>
     2b0:	82 2b       	or	r24, r18
     2b2:	88 bb       	out	0x18, r24	; 24
     2b4:	08 95       	ret
     2b6:	28 b3       	in	r18, 0x18	; 24
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_writePin+0x76>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_writePin+0x72>
     2c6:	80 95       	com	r24
     2c8:	82 23       	and	r24, r18
     2ca:	88 bb       	out	0x18, r24	; 24
     2cc:	08 95       	ret
     2ce:	41 30       	cpi	r20, 0x01	; 1
     2d0:	59 f4       	brne	.+22     	; 0x2e8 <GPIO_writePin+0x9c>
     2d2:	25 b3       	in	r18, 0x15	; 21
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <GPIO_writePin+0x92>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	6a 95       	dec	r22
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <GPIO_writePin+0x8e>
     2e2:	82 2b       	or	r24, r18
     2e4:	85 bb       	out	0x15, r24	; 21
     2e6:	08 95       	ret
     2e8:	25 b3       	in	r18, 0x15	; 21
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_writePin+0xa8>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_writePin+0xa4>
     2f8:	80 95       	com	r24
     2fa:	82 23       	and	r24, r18
     2fc:	85 bb       	out	0x15, r24	; 21
     2fe:	08 95       	ret
     300:	41 30       	cpi	r20, 0x01	; 1
     302:	59 f4       	brne	.+22     	; 0x31a <GPIO_writePin+0xce>
     304:	22 b3       	in	r18, 0x12	; 18
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <GPIO_writePin+0xc4>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <GPIO_writePin+0xc0>
     314:	82 2b       	or	r24, r18
     316:	82 bb       	out	0x12, r24	; 18
     318:	08 95       	ret
     31a:	22 b3       	in	r18, 0x12	; 18
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	02 c0       	rjmp	.+4      	; 0x326 <GPIO_writePin+0xda>
     322:	88 0f       	add	r24, r24
     324:	99 1f       	adc	r25, r25
     326:	6a 95       	dec	r22
     328:	e2 f7       	brpl	.-8      	; 0x322 <GPIO_writePin+0xd6>
     32a:	80 95       	com	r24
     32c:	82 23       	and	r24, r18
     32e:	82 bb       	out	0x12, r24	; 18
     330:	08 95       	ret

00000332 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     332:	84 30       	cpi	r24, 0x04	; 4
     334:	78 f4       	brcc	.+30     	; 0x354 <GPIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	41 f0       	breq	.+16     	; 0x34a <GPIO_setupPortDirection+0x18>
     33a:	28 f0       	brcs	.+10     	; 0x346 <GPIO_setupPortDirection+0x14>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	39 f0       	breq	.+14     	; 0x34e <GPIO_setupPortDirection+0x1c>
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	39 f0       	breq	.+14     	; 0x352 <GPIO_setupPortDirection+0x20>
     344:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
     346:	6a bb       	out	0x1a, r22	; 26
			break;
     348:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
     34a:	67 bb       	out	0x17, r22	; 23
			break;
     34c:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
     34e:	64 bb       	out	0x14, r22	; 20
			break;
     350:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
     352:	61 bb       	out	0x11, r22	; 17
     354:	08 95       	ret

00000356 <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     356:	84 30       	cpi	r24, 0x04	; 4
     358:	78 f4       	brcc	.+30     	; 0x378 <GPIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	41 f0       	breq	.+16     	; 0x36e <GPIO_writePort+0x18>
     35e:	28 f0       	brcs	.+10     	; 0x36a <GPIO_writePort+0x14>
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	39 f0       	breq	.+14     	; 0x372 <GPIO_writePort+0x1c>
     364:	83 30       	cpi	r24, 0x03	; 3
     366:	39 f0       	breq	.+14     	; 0x376 <GPIO_writePort+0x20>
     368:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
     36a:	6b bb       	out	0x1b, r22	; 27
			break;
     36c:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
     36e:	68 bb       	out	0x18, r22	; 24
			break;
     370:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
     372:	65 bb       	out	0x15, r22	; 21
			break;
     374:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
     376:	62 bb       	out	0x12, r22	; 18
     378:	08 95       	ret

0000037a <LCD_sendCommand>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
     37a:	cf 93       	push	r28
     37c:	c8 2f       	mov	r28, r24
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	67 e0       	ldi	r22, 0x07	; 7
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     388:	89 ef       	ldi	r24, 0xF9	; 249
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_sendCommand+0x12>
     390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_sendCommand+0x18>
     392:	00 00       	nop
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	66 e0       	ldi	r22, 0x06	; 6
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     39e:	89 ef       	ldi	r24, 0xF9	; 249
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_sendCommand+0x28>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_sendCommand+0x2e>
     3a8:	00 00       	nop
     3aa:	6c 2f       	mov	r22, r28
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	0e 94 ab 01 	call	0x356	; 0x356 <GPIO_writePort>
     3b2:	89 ef       	ldi	r24, 0xF9	; 249
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_sendCommand+0x3c>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_sendCommand+0x42>
     3bc:	00 00       	nop
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	66 e0       	ldi	r22, 0x06	; 6
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     3c8:	89 ef       	ldi	r24, 0xF9	; 249
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_sendCommand+0x52>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_sendCommand+0x58>
     3d2:	00 00       	nop
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <LCD_init>:
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	67 e0       	ldi	r22, 0x07	; 7
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_setupPinDirection>
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	66 e0       	ldi	r22, 0x06	; 6
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_setupPinDirection>
     3ec:	87 e8       	ldi	r24, 0x87	; 135
     3ee:	93 e1       	ldi	r25, 0x13	; 19
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_init+0x18>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_init+0x1e>
     3f6:	00 00       	nop
     3f8:	6f ef       	ldi	r22, 0xFF	; 255
     3fa:	83 e0       	ldi	r24, 0x03	; 3
     3fc:	0e 94 99 01 	call	0x332	; 0x332 <GPIO_setupPortDirection>
     400:	88 e3       	ldi	r24, 0x38	; 56
     402:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_sendCommand>
     406:	8c e0       	ldi	r24, 0x0C	; 12
     408:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_sendCommand>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_sendCommand>
     412:	08 95       	ret

00000414 <LCD_displayCharacter>:
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	67 e0       	ldi	r22, 0x07	; 7
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     422:	89 ef       	ldi	r24, 0xF9	; 249
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <LCD_displayCharacter+0x12>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <LCD_displayCharacter+0x18>
     42c:	00 00       	nop
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	66 e0       	ldi	r22, 0x06	; 6
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     438:	89 ef       	ldi	r24, 0xF9	; 249
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <LCD_displayCharacter+0x28>
     440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_displayCharacter+0x2e>
     442:	00 00       	nop
     444:	6c 2f       	mov	r22, r28
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	0e 94 ab 01 	call	0x356	; 0x356 <GPIO_writePort>
     44c:	89 ef       	ldi	r24, 0xF9	; 249
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <LCD_displayCharacter+0x3c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_displayCharacter+0x42>
     456:	00 00       	nop
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	66 e0       	ldi	r22, 0x06	; 6
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 26 01 	call	0x24c	; 0x24c <GPIO_writePin>
     462:	89 ef       	ldi	r24, 0xF9	; 249
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <LCD_displayCharacter+0x52>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_displayCharacter+0x58>
     46c:	00 00       	nop
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <LCD_displayString>:
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	8c 01       	movw	r16, r24
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	03 c0       	rjmp	.+6      	; 0x484 <LCD_displayString+0x12>
     47e:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_displayCharacter>
     482:	cf 5f       	subi	r28, 0xFF	; 255
     484:	f8 01       	movw	r30, r16
     486:	ec 0f       	add	r30, r28
     488:	f1 1d       	adc	r31, r1
     48a:	80 81       	ld	r24, Z
     48c:	81 11       	cpse	r24, r1
     48e:	f7 cf       	rjmp	.-18     	; 0x47e <LCD_displayString+0xc>
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <LCD_moveCursor>:
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	31 f0       	breq	.+12     	; 0x4a8 <LCD_moveCursor+0x10>
     49c:	70 f0       	brcs	.+28     	; 0x4ba <LCD_moveCursor+0x22>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	31 f0       	breq	.+12     	; 0x4ae <LCD_moveCursor+0x16>
     4a2:	83 30       	cpi	r24, 0x03	; 3
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <LCD_moveCursor+0x1c>
     4a6:	0a c0       	rjmp	.+20     	; 0x4bc <LCD_moveCursor+0x24>
     4a8:	90 e4       	ldi	r25, 0x40	; 64
     4aa:	96 0f       	add	r25, r22
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <LCD_moveCursor+0x24>
     4ae:	90 e1       	ldi	r25, 0x10	; 16
     4b0:	96 0f       	add	r25, r22
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <LCD_moveCursor+0x24>
     4b4:	90 e5       	ldi	r25, 0x50	; 80
     4b6:	96 0f       	add	r25, r22
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <LCD_moveCursor+0x24>
     4ba:	96 2f       	mov	r25, r22
     4bc:	89 2f       	mov	r24, r25
     4be:	80 68       	ori	r24, 0x80	; 128
     4c0:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_sendCommand>
     4c4:	08 95       	ret

000004c6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	60 97       	sbiw	r28, 0x10	; 16
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	be 01       	movw	r22, r28
     4e0:	6f 5f       	subi	r22, 0xFF	; 255
     4e2:	7f 4f       	sbci	r23, 0xFF	; 255
     4e4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <itoa>
   LCD_displayString(buff); /* Display the string */
     4e8:	ce 01       	movw	r24, r28
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	0e 94 39 02 	call	0x472	; 0x472 <LCD_displayString>
}
     4f0:	60 96       	adiw	r28, 0x10	; 16
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <LM35_getTemperature>:
	uint8 temp_value = 0;

	uint16 adc_value = 0;

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_readChannel>

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
     508:	9c 01       	movw	r18, r24
     50a:	a6 e9       	ldi	r26, 0x96	; 150
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	0e 94 47 0c 	call	0x188e	; 0x188e <__umulhisi3>
     512:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__floatunsisf>
     516:	2a e0       	ldi	r18, 0x0A	; 10
     518:	37 ed       	ldi	r19, 0xD7	; 215
     51a:	43 e2       	ldi	r20, 0x23	; 35
     51c:	50 e4       	ldi	r21, 0x40	; 64
     51e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__mulsf3>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 ed       	ldi	r19, 0xD0	; 208
     526:	4f eb       	ldi	r20, 0xBF	; 191
     528:	54 e4       	ldi	r21, 0x44	; 68
     52a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__divsf3>
     52e:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fixunssfsi>
     532:	86 2f       	mov	r24, r22

	return temp_value;
}
     534:	08 95       	ret

00000536 <vLcd_Task>:


//	xQueueReceive(Temp_Sensor_Handeler, ( void * ) &G_temp, portMAX_DELAY);
	while(1)
	{
		g_start_t1 = xTaskGetTickCount();
     536:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
     53a:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <g_start_t1+0x1>
     53e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <g_start_t1>
//			/*do nothing no errors*/
//		}
//		GPIO_writePin(PORTD_ID, PIN3_ID , LOGIC_HIGH);


		if(Fan == FAN_OFF)
     542:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     546:	81 11       	cpse	r24, r1
     548:	08 c0       	rjmp	.+16     	; 0x55a <vLcd_Task+0x24>
		{
			LCD_moveCursor(0,0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_moveCursor>
			LCD_displayString("FAN is OFF");
     550:	81 e6       	ldi	r24, 0x61	; 97
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 39 02 	call	0x472	; 0x472 <LCD_displayString>
     558:	08 c0       	rjmp	.+16     	; 0x56a <vLcd_Task+0x34>
		}
		else
		{
			LCD_moveCursor(0,0);
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_moveCursor>
			LCD_displayString("FAN is ON ");
     562:	8c e6       	ldi	r24, 0x6C	; 108
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 39 02 	call	0x472	; 0x472 <LCD_displayString>
		}

		LCD_moveCursor(1,0);
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_moveCursor>
		LCD_displayString("Temp =    C");
     572:	87 e7       	ldi	r24, 0x77	; 119
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 39 02 	call	0x472	; 0x472 <LCD_displayString>

		LCD_moveCursor(1,7);
     57a:	67 e0       	ldi	r22, 0x07	; 7
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_moveCursor>
		if(G_temp >= 100)
     582:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <G_temp>
     586:	84 36       	cpi	r24, 0x64	; 100
     588:	20 f0       	brcs	.+8      	; 0x592 <vLcd_Task+0x5c>
		{
			LCD_intgerToString(G_temp);
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_intgerToString>
     590:	06 c0       	rjmp	.+12     	; 0x59e <vLcd_Task+0x68>
//			GPIO_writePin(PORTD_ID, PIN3_ID , LOGIC_LOW);

		}
		else
		{
			LCD_intgerToString(G_temp);
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
     598:	80 e2       	ldi	r24, 0x20	; 32
     59a:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_displayCharacter>

		}
		//			GPIO_writePin(PORTD_ID, PIN3_ID , LOGIC_LOW);

		g_end_t1 = xTaskGetTickCount();
     59e:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
     5a2:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <g_end_t1+0x1>
     5a6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <g_end_t1>
		
		g_Task1_duartion = g_end_t1 - g_start_t1 ;
     5aa:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <g_start_t1>
     5ae:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <g_start_t1+0x1>
     5b2:	82 1b       	sub	r24, r18
     5b4:	93 0b       	sbc	r25, r19
     5b6:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <g_Task1_duartion+0x1>
     5ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <g_Task1_duartion>

		vTaskDelay(pdMS_TO_TICKS(2000));
     5be:	81 e2       	ldi	r24, 0x21	; 33
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 41 0a 	call	0x1482	; 0x1482 <vTaskDelay>
	}
     5c6:	b7 cf       	rjmp	.-146    	; 0x536 <vLcd_Task>

000005c8 <vTemp_Task>:
	uint16 start =0, end=0, Task2_duartion=0;

	while(1)
	{
//		GPIO_writePin(PORTD_ID, PIN4_ID , LOGIC_HIGH);
		g_start_t2 = xTaskGetTickCount();
     5c8:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
     5cc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <g_start_t2+0x1>
     5d0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <g_start_t2>

		G_temp = 0 ;
     5d4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <G_temp>
		G_temp = LM35_getTemperature();
     5d8:	0e 94 81 02 	call	0x502	; 0x502 <LM35_getTemperature>
     5dc:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <G_temp>

//		GPIO_writePin(PORTD_ID, PIN4_ID , LOGIC_LOW);

		g_end_t2 = xTaskGetTickCount();
     5e0:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
     5e4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <g_end_t2+0x1>
     5e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <g_end_t2>

		g_Task2_duartion = g_end_t2 - g_start_t2 ;
     5ec:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <g_start_t2>
     5f0:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <g_start_t2+0x1>
     5f4:	82 1b       	sub	r24, r18
     5f6:	93 0b       	sbc	r25, r19
     5f8:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <g_Task2_duartion+0x1>
     5fc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <g_Task2_duartion>

		vTaskDelay(pdMS_TO_TICKS(1000));
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 41 0a 	call	0x1482	; 0x1482 <vTaskDelay>
     608:	df cf       	rjmp	.-66     	; 0x5c8 <vTemp_Task>

0000060a <vMotor_LED_Task>:

	while(1)
	{
//		GPIO_writePin(PORTD_ID, PIN5_ID , LOGIC_HIGH);
		
		g_start_t3 = xTaskGetTickCount();
     60a:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
     60e:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <g_start_t3+0x1>
     612:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <g_start_t3>

		 if(G_temp >= 30)
     616:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <G_temp>
     61a:	8e 31       	cpi	r24, 0x1E	; 30
     61c:	38 f0       	brcs	.+14     	; 0x62c <vMotor_LED_Task+0x22>
		{
			Fan = FAN_ON;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
			DcMotor_Rotate(DC_MOTOR_CW,50); /* Rotates the motor with 50% from its speed */
     624:	62 e3       	ldi	r22, 0x32	; 50
     626:	0e 94 81 00 	call	0x102	; 0x102 <DcMotor_Rotate>
     62a:	10 c0       	rjmp	.+32     	; 0x64c <vMotor_LED_Task+0x42>
		}
		else if(G_temp <= 20)
     62c:	85 31       	cpi	r24, 0x15	; 21
     62e:	40 f4       	brcc	.+16     	; 0x640 <vMotor_LED_Task+0x36>
		{
			Fan = FAN_ON;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end>
			DcMotor_Rotate(DC_MOTOR_ACW,50); /* Rotates the motor with 50% from its speed */
     636:	62 e3       	ldi	r22, 0x32	; 50
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 81 00 	call	0x102	; 0x102 <DcMotor_Rotate>
     63e:	06 c0       	rjmp	.+12     	; 0x64c <vMotor_LED_Task+0x42>
		}
		else
		{
			Fan = FAN_OFF;
     640:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
			DcMotor_Rotate(DC_MOTOR_STOP,0); /* Stop the motor */
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 81 00 	call	0x102	; 0x102 <DcMotor_Rotate>
		}
//		GPIO_writePin(PORTD_ID, PIN5_ID, LOGIC_LOW);

		g_end_t3 = xTaskGetTickCount();
     64c:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
     650:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <g_end_t3+0x1>
     654:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <g_end_t3>
		
		g_Task3_duartion = g_end_t3 - g_start_t3 ;
     658:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <g_start_t3>
     65c:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <g_start_t3+0x1>
     660:	82 1b       	sub	r24, r18
     662:	93 0b       	sbc	r25, r19
     664:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <g_Task3_duartion+0x1>
     668:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <g_Task3_duartion>

		vTaskDelay(pdMS_TO_TICKS(50));
     66c:	82 e3       	ldi	r24, 0x32	; 50
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 41 0a 	call	0x1482	; 0x1482 <vTaskDelay>

	}
     674:	ca cf       	rjmp	.-108    	; 0x60a <vMotor_LED_Task>

00000676 <main>:

Fan_State Fan = FAN_OFF;


void main(void)
{
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <main+0xc>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
	BaseType_t status;

	ADC_ConfigType ADC_Configurations = {INTERNAL_VOLT,F_CPU_8};
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	8a 83       	std	Y+2, r24	; 0x02

	LCD_init();  		 /*The delay*/
     68c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LCD_init>
	DcMotor_Init();
     690:	0e 94 6c 00 	call	0xd8	; 0xd8 <DcMotor_Init>
	ADC_init(&ADC_Configurations);					/* Initialize ADC driver */
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>

//	GPIO_setupPinDirection(PORTC_ID,PIN4_ID,PIN_OUTPUT);
//	GPIO_setupPinDirection(PORTC_ID,PIN5_ID,PIN_OUTPUT);
//	GPIO_setupPinDirection(PORTC_ID,PIN6_ID,PIN_OUTPUT);

	status = xTaskCreate(vLcd_Task, "Lcd_Task", 100, NULL, LCD_Priority, &Lcd_Handler); //180
     69c:	0f 2e       	mov	r0, r31
     69e:	fb e0       	ldi	r31, 0x0B	; 11
     6a0:	ef 2e       	mov	r14, r31
     6a2:	f7 e0       	ldi	r31, 0x07	; 7
     6a4:	ff 2e       	mov	r15, r31
     6a6:	f0 2d       	mov	r31, r0
     6a8:	01 e0       	ldi	r16, 0x01	; 1
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	44 e6       	ldi	r20, 0x64	; 100
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	63 e8       	ldi	r22, 0x83	; 131
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	8b e9       	ldi	r24, 0x9B	; 155
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	0e 94 7d 08 	call	0x10fa	; 0x10fa <xTaskCreate>
	configASSERT(status == pdPASS);								// if status=0 enter infinity loop

	status = xTaskCreate(vTemp_Task, "Temp_Task", 100, NULL, TEMP_Priority, &Temp_Sensor_Handeler);
     6be:	0f 2e       	mov	r0, r31
     6c0:	f7 e0       	ldi	r31, 0x07	; 7
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f7 e0       	ldi	r31, 0x07	; 7
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	03 e0       	ldi	r16, 0x03	; 3
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	44 e6       	ldi	r20, 0x64	; 100
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	6c e8       	ldi	r22, 0x8C	; 140
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	84 ee       	ldi	r24, 0xE4	; 228
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <xTaskCreate>
//	if( Temp_Sensor_Handeler == NULL )
//	{
//		G_Error = 1;
//	}

	status = xTaskCreate(vMotor_LED_Task, "Motor_LED_Task", 100, NULL,MOTOR_LED_Priority, &Dc_motor_Handler);
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f9 e0       	ldi	r31, 0x09	; 9
     6e4:	ef 2e       	mov	r14, r31
     6e6:	f7 e0       	ldi	r31, 0x07	; 7
     6e8:	ff 2e       	mov	r15, r31
     6ea:	f0 2d       	mov	r31, r0
     6ec:	02 e0       	ldi	r16, 0x02	; 2
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	44 e6       	ldi	r20, 0x64	; 100
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	66 e9       	ldi	r22, 0x96	; 150
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e 94 7d 08 	call	0x10fa	; 0x10fa <xTaskCreate>
	configASSERT(status == pdPASS); 							// if status=0 enter infinity loop


	vTaskStartScheduler();
     702:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <vTaskStartScheduler>

}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	08 95       	ret

00000716 <PWM_Timer0_Start>:
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
	TCNT0 = 0; /* Timer0 initial value */
     716:	12 be       	out	0x32, r1	; 50

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value */
     718:	68 2f       	mov	r22, r24
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__floatunsisf>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	48 ec       	ldi	r20, 0xC8	; 200
     72a:	52 e4       	ldi	r21, 0x42	; 66
     72c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__divsf3>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	4f e7       	ldi	r20, 0x7F	; 127
     736:	53 e4       	ldi	r21, 0x43	; 67
     738:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__mulsf3>
     73c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fixunssfsi>
     740:	6c bf       	out	0x3c, r22	; 60
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     742:	8a e6       	ldi	r24, 0x6A	; 106
     744:	83 bf       	out	0x33, r24	; 51

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	63 e0       	ldi	r22, 0x03	; 3
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 b3 00 	call	0x166	; 0x166 <GPIO_setupPinDirection>
     750:	08 95       	ret

00000752 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     752:	1b bc       	out	0x2b, r1	; 43
     754:	8d e4       	ldi	r24, 0x4D	; 77
     756:	8a bd       	out	0x2a, r24	; 42
     758:	8b e0       	ldi	r24, 0x0B	; 11
     75a:	8e bd       	out	0x2e, r24	; 46
     75c:	89 b7       	in	r24, 0x39	; 57
     75e:	80 61       	ori	r24, 0x10	; 16
     760:	89 bf       	out	0x39, r24	; 57
     762:	08 95       	ret

00000764 <pxPortInitialiseStack>:
     764:	31 e1       	ldi	r19, 0x11	; 17
     766:	fc 01       	movw	r30, r24
     768:	30 83       	st	Z, r19
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	22 e2       	ldi	r18, 0x22	; 34
     76e:	20 83       	st	Z, r18
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	a3 e3       	ldi	r26, 0x33	; 51
     774:	a0 83       	st	Z, r26
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	60 83       	st	Z, r22
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	70 83       	st	Z, r23
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	10 82       	st	Z, r1
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	60 e8       	ldi	r22, 0x80	; 128
     786:	60 83       	st	Z, r22
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	10 82       	st	Z, r1
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	60 83       	st	Z, r22
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	60 83       	st	Z, r22
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	64 e0       	ldi	r22, 0x04	; 4
     79c:	60 83       	st	Z, r22
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	65 e0       	ldi	r22, 0x05	; 5
     7a2:	60 83       	st	Z, r22
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	66 e0       	ldi	r22, 0x06	; 6
     7a8:	60 83       	st	Z, r22
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	67 e0       	ldi	r22, 0x07	; 7
     7ae:	60 83       	st	Z, r22
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	68 e0       	ldi	r22, 0x08	; 8
     7b4:	60 83       	st	Z, r22
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	69 e0       	ldi	r22, 0x09	; 9
     7ba:	60 83       	st	Z, r22
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	60 e1       	ldi	r22, 0x10	; 16
     7c0:	60 83       	st	Z, r22
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	30 83       	st	Z, r19
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	32 e1       	ldi	r19, 0x12	; 18
     7ca:	30 83       	st	Z, r19
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	33 e1       	ldi	r19, 0x13	; 19
     7d0:	30 83       	st	Z, r19
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	34 e1       	ldi	r19, 0x14	; 20
     7d6:	30 83       	st	Z, r19
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	35 e1       	ldi	r19, 0x15	; 21
     7dc:	30 83       	st	Z, r19
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	36 e1       	ldi	r19, 0x16	; 22
     7e2:	30 83       	st	Z, r19
     7e4:	31 97       	sbiw	r30, 0x01	; 1
     7e6:	37 e1       	ldi	r19, 0x17	; 23
     7e8:	30 83       	st	Z, r19
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	38 e1       	ldi	r19, 0x18	; 24
     7ee:	30 83       	st	Z, r19
     7f0:	31 97       	sbiw	r30, 0x01	; 1
     7f2:	39 e1       	ldi	r19, 0x19	; 25
     7f4:	30 83       	st	Z, r19
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	30 e2       	ldi	r19, 0x20	; 32
     7fa:	30 83       	st	Z, r19
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	31 e2       	ldi	r19, 0x21	; 33
     800:	30 83       	st	Z, r19
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	20 83       	st	Z, r18
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	23 e2       	ldi	r18, 0x23	; 35
     80a:	20 83       	st	Z, r18
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	40 83       	st	Z, r20
     810:	31 97       	sbiw	r30, 0x01	; 1
     812:	50 83       	st	Z, r21
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	26 e2       	ldi	r18, 0x26	; 38
     818:	20 83       	st	Z, r18
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	27 e2       	ldi	r18, 0x27	; 39
     81e:	20 83       	st	Z, r18
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	28 e2       	ldi	r18, 0x28	; 40
     824:	20 83       	st	Z, r18
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	29 e2       	ldi	r18, 0x29	; 41
     82a:	20 83       	st	Z, r18
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	20 e3       	ldi	r18, 0x30	; 48
     830:	20 83       	st	Z, r18
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	21 e3       	ldi	r18, 0x31	; 49
     836:	20 83       	st	Z, r18
     838:	86 97       	sbiw	r24, 0x26	; 38
     83a:	08 95       	ret

0000083c <xPortStartScheduler>:
     83c:	0e 94 a9 03 	call	0x752	; 0x752 <prvSetupTimerInterrupt>
     840:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     844:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     848:	cd 91       	ld	r28, X+
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	dd 91       	ld	r29, X+
     84e:	de bf       	out	0x3e, r29	; 62
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	bf 91       	pop	r27
     85a:	af 91       	pop	r26
     85c:	9f 91       	pop	r25
     85e:	8f 91       	pop	r24
     860:	7f 91       	pop	r23
     862:	6f 91       	pop	r22
     864:	5f 91       	pop	r21
     866:	4f 91       	pop	r20
     868:	3f 91       	pop	r19
     86a:	2f 91       	pop	r18
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	6f 90       	pop	r6
     884:	5f 90       	pop	r5
     886:	4f 90       	pop	r4
     888:	3f 90       	pop	r3
     88a:	2f 90       	pop	r2
     88c:	1f 90       	pop	r1
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	08 95       	ret
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	08 95       	ret

0000089a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	0f 92       	push	r0
     8a2:	1f 92       	push	r1
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 92       	push	r2
     8a8:	3f 92       	push	r3
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
     8e2:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     8e6:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     8ea:	0d b6       	in	r0, 0x3d	; 61
     8ec:	0d 92       	st	X+, r0
     8ee:	0e b6       	in	r0, 0x3e	; 62
     8f0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     8f2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     8f6:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     8fa:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     8fe:	cd 91       	ld	r28, X+
     900:	cd bf       	out	0x3d, r28	; 61
     902:	dd 91       	ld	r29, X+
     904:	de bf       	out	0x3e, r29	; 62
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	bf 91       	pop	r27
     910:	af 91       	pop	r26
     912:	9f 91       	pop	r25
     914:	8f 91       	pop	r24
     916:	7f 91       	pop	r23
     918:	6f 91       	pop	r22
     91a:	5f 91       	pop	r21
     91c:	4f 91       	pop	r20
     91e:	3f 91       	pop	r19
     920:	2f 91       	pop	r18
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	bf 90       	pop	r11
     930:	af 90       	pop	r10
     932:	9f 90       	pop	r9
     934:	8f 90       	pop	r8
     936:	7f 90       	pop	r7
     938:	6f 90       	pop	r6
     93a:	5f 90       	pop	r5
     93c:	4f 90       	pop	r4
     93e:	3f 90       	pop	r3
     940:	2f 90       	pop	r2
     942:	1f 90       	pop	r1
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0

	asm volatile ( "ret" );
     94a:	08 95       	ret

0000094c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	0f 92       	push	r0
     954:	1f 92       	push	r1
     956:	11 24       	eor	r1, r1
     958:	2f 92       	push	r2
     95a:	3f 92       	push	r3
     95c:	4f 92       	push	r4
     95e:	5f 92       	push	r5
     960:	6f 92       	push	r6
     962:	7f 92       	push	r7
     964:	8f 92       	push	r8
     966:	9f 92       	push	r9
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	4f 93       	push	r20
     97e:	5f 93       	push	r21
     980:	6f 93       	push	r22
     982:	7f 93       	push	r23
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	af 93       	push	r26
     98a:	bf 93       	push	r27
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31
     994:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     998:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     99c:	0d b6       	in	r0, 0x3d	; 61
     99e:	0d 92       	st	X+, r0
     9a0:	0e b6       	in	r0, 0x3e	; 62
     9a2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     9a4:	0e 94 0d 09 	call	0x121a	; 0x121a <xTaskIncrementTick>
     9a8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     9aa:	0e 94 57 0a 	call	0x14ae	; 0x14ae <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     9ae:	a0 91 05 07 	lds	r26, 0x0705	; 0x800705 <pxCurrentTCB>
     9b2:	b0 91 06 07 	lds	r27, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     9b6:	cd 91       	ld	r28, X+
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	dd 91       	ld	r29, X+
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	9f 90       	pop	r9
     9ec:	8f 90       	pop	r8
     9ee:	7f 90       	pop	r7
     9f0:	6f 90       	pop	r6
     9f2:	5f 90       	pop	r5
     9f4:	4f 90       	pop	r4
     9f6:	3f 90       	pop	r3
     9f8:	2f 90       	pop	r2
     9fa:	1f 90       	pop	r1
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a02:	08 95       	ret

00000a04 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     a04:	0e 94 a6 04 	call	0x94c	; 0x94c <vPortYieldFromTick>
		asm volatile ( "reti" );
     a08:	18 95       	reti

00000a0a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a0a:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a0c:	03 96       	adiw	r24, 0x03	; 3
     a0e:	92 83       	std	Z+2, r25	; 0x02
     a10:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a12:	2f ef       	ldi	r18, 0xFF	; 255
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	34 83       	std	Z+4, r19	; 0x04
     a18:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a1a:	96 83       	std	Z+6, r25	; 0x06
     a1c:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a1e:	90 87       	std	Z+8, r25	; 0x08
     a20:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a22:	10 82       	st	Z, r1
     a24:	08 95       	ret

00000a26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     a26:	fc 01       	movw	r30, r24
     a28:	11 86       	std	Z+9, r1	; 0x09
     a2a:	10 86       	std	Z+8, r1	; 0x08
     a2c:	08 95       	ret

00000a2e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	9c 01       	movw	r18, r24
     a34:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     a36:	dc 01       	movw	r26, r24
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	cd 91       	ld	r28, X+
     a3c:	dc 91       	ld	r29, X
     a3e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     a40:	d3 83       	std	Z+3, r29	; 0x03
     a42:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a44:	8c 81       	ldd	r24, Y+4	; 0x04
     a46:	9d 81       	ldd	r25, Y+5	; 0x05
     a48:	95 83       	std	Z+5, r25	; 0x05
     a4a:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     a4c:	8c 81       	ldd	r24, Y+4	; 0x04
     a4e:	9d 81       	ldd	r25, Y+5	; 0x05
     a50:	dc 01       	movw	r26, r24
     a52:	13 96       	adiw	r26, 0x03	; 3
     a54:	7c 93       	st	X, r23
     a56:	6e 93       	st	-X, r22
     a58:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     a5a:	7d 83       	std	Y+5, r23	; 0x05
     a5c:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     a5e:	31 87       	std	Z+9, r19	; 0x09
     a60:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     a62:	f9 01       	movw	r30, r18
     a64:	80 81       	ld	r24, Z
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 83       	st	Z, r24
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a76:	48 81       	ld	r20, Y
     a78:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a7a:	4f 3f       	cpi	r20, 0xFF	; 255
     a7c:	2f ef       	ldi	r18, 0xFF	; 255
     a7e:	52 07       	cpc	r21, r18
     a80:	21 f4       	brne	.+8      	; 0xa8a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a82:	fc 01       	movw	r30, r24
     a84:	a7 81       	ldd	r26, Z+7	; 0x07
     a86:	b0 85       	ldd	r27, Z+8	; 0x08
     a88:	0d c0       	rjmp	.+26     	; 0xaa4 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a8a:	dc 01       	movw	r26, r24
     a8c:	13 96       	adiw	r26, 0x03	; 3
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <vListInsert+0x22>
     a90:	df 01       	movw	r26, r30
     a92:	12 96       	adiw	r26, 0x02	; 2
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	13 97       	sbiw	r26, 0x03	; 3
     a9a:	20 81       	ld	r18, Z
     a9c:	31 81       	ldd	r19, Z+1	; 0x01
     a9e:	42 17       	cp	r20, r18
     aa0:	53 07       	cpc	r21, r19
     aa2:	b0 f7       	brcc	.-20     	; 0xa90 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	ed 91       	ld	r30, X+
     aa8:	fc 91       	ld	r31, X
     aaa:	13 97       	sbiw	r26, 0x03	; 3
     aac:	fb 83       	std	Y+3, r31	; 0x03
     aae:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ab0:	d5 83       	std	Z+5, r29	; 0x05
     ab2:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     ab4:	bd 83       	std	Y+5, r27	; 0x05
     ab6:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     ab8:	13 96       	adiw	r26, 0x03	; 3
     aba:	dc 93       	st	X, r29
     abc:	ce 93       	st	-X, r28
     abe:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ac0:	99 87       	std	Y+9, r25	; 0x09
     ac2:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 81       	ld	r18, Z
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	20 83       	st	Z, r18
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     ad8:	a0 85       	ldd	r26, Z+8	; 0x08
     ada:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     adc:	c2 81       	ldd	r28, Z+2	; 0x02
     ade:	d3 81       	ldd	r29, Z+3	; 0x03
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	95 81       	ldd	r25, Z+5	; 0x05
     ae4:	9d 83       	std	Y+5, r25	; 0x05
     ae6:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ae8:	c4 81       	ldd	r28, Z+4	; 0x04
     aea:	d5 81       	ldd	r29, Z+5	; 0x05
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	93 81       	ldd	r25, Z+3	; 0x03
     af0:	9b 83       	std	Y+3, r25	; 0x03
     af2:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     af4:	11 96       	adiw	r26, 0x01	; 1
     af6:	8d 91       	ld	r24, X+
     af8:	9c 91       	ld	r25, X
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	e8 17       	cp	r30, r24
     afe:	f9 07       	cpc	r31, r25
     b00:	31 f4       	brne	.+12     	; 0xb0e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b02:	84 81       	ldd	r24, Z+4	; 0x04
     b04:	95 81       	ldd	r25, Z+5	; 0x05
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b0e:	11 86       	std	Z+9, r1	; 0x09
     b10:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     b12:	8c 91       	ld	r24, X
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b18:	8c 91       	ld	r24, X
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b20:	ea ec       	ldi	r30, 0xCA	; 202
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	ae ec       	ldi	r26, 0xCE	; 206
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	b1 83       	std	Z+1, r27	; 0x01
     b2a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     b2c:	13 82       	std	Z+3, r1	; 0x03
     b2e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     b30:	e6 ea       	ldi	r30, 0xA6	; 166
     b32:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     b34:	f0 93 c9 00 	sts	0x00C9, r31	; 0x8000c9 <pxEnd+0x1>
     b38:	e0 93 c8 00 	sts	0x00C8, r30	; 0x8000c8 <pxEnd>
    pxEnd->xBlockSize = 0;
     b3c:	13 82       	std	Z+3, r1	; 0x03
     b3e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     b40:	11 82       	std	Z+1, r1	; 0x01
     b42:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     b44:	88 ed       	ldi	r24, 0xD8	; 216
     b46:	95 e0       	ldi	r25, 0x05	; 5
     b48:	13 96       	adiw	r26, 0x03	; 3
     b4a:	9c 93       	st	X, r25
     b4c:	8e 93       	st	-X, r24
     b4e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     b50:	ed 93       	st	X+, r30
     b52:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b54:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <xMinimumEverFreeBytesRemaining+0x1>
     b58:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     b5c:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <xFreeBytesRemaining+0x1>
     b60:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e8       	ldi	r25, 0x80	; 128
     b68:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <xBlockAllocatedBit+0x1>
     b6c:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <xBlockAllocatedBit>
     b70:	08 95       	ret

00000b72 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     b78:	aa ec       	ldi	r26, 0xCA	; 202
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <prvInsertBlockIntoFreeList+0xe>
     b7e:	df 01       	movw	r26, r30
     b80:	ed 91       	ld	r30, X+
     b82:	fc 91       	ld	r31, X
     b84:	11 97       	sbiw	r26, 0x01	; 1
     b86:	ec 17       	cp	r30, r28
     b88:	fd 07       	cpc	r31, r29
     b8a:	c8 f3       	brcs	.-14     	; 0xb7e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	8d 91       	ld	r24, X+
     b90:	9c 91       	ld	r25, X
     b92:	13 97       	sbiw	r26, 0x03	; 3
     b94:	9d 01       	movw	r18, r26
     b96:	28 0f       	add	r18, r24
     b98:	39 1f       	adc	r19, r25
     b9a:	c2 17       	cp	r28, r18
     b9c:	d3 07       	cpc	r29, r19
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     ba0:	2a 81       	ldd	r18, Y+2	; 0x02
     ba2:	3b 81       	ldd	r19, Y+3	; 0x03
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	13 96       	adiw	r26, 0x03	; 3
     baa:	9c 93       	st	X, r25
     bac:	8e 93       	st	-X, r24
     bae:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     bb0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	9b 81       	ldd	r25, Y+3	; 0x03
     bb6:	9e 01       	movw	r18, r28
     bb8:	28 0f       	add	r18, r24
     bba:	39 1f       	adc	r19, r25
     bbc:	e2 17       	cp	r30, r18
     bbe:	f3 07       	cpc	r31, r19
     bc0:	c1 f4       	brne	.+48     	; 0xbf2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     bc2:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <pxEnd>
     bc6:	30 91 c9 00 	lds	r19, 0x00C9	; 0x8000c9 <pxEnd+0x1>
     bca:	e2 17       	cp	r30, r18
     bcc:	f3 07       	cpc	r31, r19
     bce:	71 f0       	breq	.+28     	; 0xbec <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     bd0:	22 81       	ldd	r18, Z+2	; 0x02
     bd2:	33 81       	ldd	r19, Z+3	; 0x03
     bd4:	82 0f       	add	r24, r18
     bd6:	93 1f       	adc	r25, r19
     bd8:	9b 83       	std	Y+3, r25	; 0x03
     bda:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     bdc:	ed 91       	ld	r30, X+
     bde:	fc 91       	ld	r31, X
     be0:	11 97       	sbiw	r26, 0x01	; 1
     be2:	80 81       	ld	r24, Z
     be4:	91 81       	ldd	r25, Z+1	; 0x01
     be6:	99 83       	std	Y+1, r25	; 0x01
     be8:	88 83       	st	Y, r24
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     bec:	39 83       	std	Y+1, r19	; 0x01
     bee:	28 83       	st	Y, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     bf2:	f9 83       	std	Y+1, r31	; 0x01
     bf4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     bf6:	ca 17       	cp	r28, r26
     bf8:	db 07       	cpc	r29, r27
     bfa:	11 f0       	breq	.+4      	; 0xc00 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     bfc:	cd 93       	st	X+, r28
     bfe:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     c14:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     c18:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <pxEnd>
     c1c:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <pxEnd+0x1>
     c20:	89 2b       	or	r24, r25
     c22:	11 f4       	brne	.+4      	; 0xc28 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     c24:	0e 94 90 05 	call	0xb20	; 0xb20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     c28:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <xBlockAllocatedBit>
     c2c:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <xBlockAllocatedBit+0x1>
     c30:	80 23       	and	r24, r16
     c32:	91 23       	and	r25, r17
     c34:	89 2b       	or	r24, r25
     c36:	09 f0       	breq	.+2      	; 0xc3a <pvPortMalloc+0x34>
     c38:	77 c0       	rjmp	.+238    	; 0xd28 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c3a:	01 15       	cp	r16, r1
     c3c:	11 05       	cpc	r17, r1
     c3e:	49 f0       	breq	.+18     	; 0xc52 <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     c40:	c8 01       	movw	r24, r16
     c42:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     c44:	08 17       	cp	r16, r24
     c46:	19 07       	cpc	r17, r25
     c48:	18 f0       	brcs	.+6      	; 0xc50 <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     c50:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     c52:	01 15       	cp	r16, r1
     c54:	11 05       	cpc	r17, r1
     c56:	09 f4       	brne	.+2      	; 0xc5a <pvPortMalloc+0x54>
     c58:	6a c0       	rjmp	.+212    	; 0xd2e <pvPortMalloc+0x128>
     c5a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <xFreeBytesRemaining>
     c5e:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <xFreeBytesRemaining+0x1>
     c62:	80 17       	cp	r24, r16
     c64:	91 07       	cpc	r25, r17
     c66:	08 f4       	brcc	.+2      	; 0xc6a <pvPortMalloc+0x64>
     c68:	65 c0       	rjmp	.+202    	; 0xd34 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     c6a:	c0 91 ca 00 	lds	r28, 0x00CA	; 0x8000ca <xStart>
     c6e:	d0 91 cb 00 	lds	r29, 0x00CB	; 0x8000cb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     c72:	ea ec       	ldi	r30, 0xCA	; 202
     c74:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
     c78:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     c7a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	9b 81       	ldd	r25, Y+3	; 0x03
     c80:	80 17       	cp	r24, r16
     c82:	91 07       	cpc	r25, r17
     c84:	20 f4       	brcc	.+8      	; 0xc8e <pvPortMalloc+0x88>
     c86:	88 81       	ld	r24, Y
     c88:	99 81       	ldd	r25, Y+1	; 0x01
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a9 f7       	brne	.-22     	; 0xc78 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     c8e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <pxEnd>
     c92:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <pxEnd+0x1>
     c96:	c8 17       	cp	r28, r24
     c98:	d9 07       	cpc	r29, r25
     c9a:	09 f4       	brne	.+2      	; 0xc9e <pvPortMalloc+0x98>
     c9c:	4e c0       	rjmp	.+156    	; 0xd3a <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     c9e:	e0 80       	ld	r14, Z
     ca0:	f1 80       	ldd	r15, Z+1	; 0x01
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	e8 0e       	add	r14, r24
     ca6:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ca8:	88 81       	ld	r24, Y
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     cb0:	2a 81       	ldd	r18, Y+2	; 0x02
     cb2:	3b 81       	ldd	r19, Y+3	; 0x03
     cb4:	20 1b       	sub	r18, r16
     cb6:	31 0b       	sbc	r19, r17
     cb8:	29 30       	cpi	r18, 0x09	; 9
     cba:	31 05       	cpc	r19, r1
     cbc:	50 f0       	brcs	.+20     	; 0xcd2 <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     cbe:	ce 01       	movw	r24, r28
     cc0:	80 0f       	add	r24, r16
     cc2:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     cc4:	fc 01       	movw	r30, r24
     cc6:	33 83       	std	Z+3, r19	; 0x03
     cc8:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     cca:	1b 83       	std	Y+3, r17	; 0x03
     ccc:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     cce:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     cd2:	2a 81       	ldd	r18, Y+2	; 0x02
     cd4:	3b 81       	ldd	r19, Y+3	; 0x03
     cd6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <xFreeBytesRemaining>
     cda:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <xFreeBytesRemaining+0x1>
     cde:	82 1b       	sub	r24, r18
     ce0:	93 0b       	sbc	r25, r19
     ce2:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <xFreeBytesRemaining+0x1>
     ce6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     cea:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <xMinimumEverFreeBytesRemaining>
     cee:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <xMinimumEverFreeBytesRemaining+0x1>
     cf2:	84 17       	cp	r24, r20
     cf4:	95 07       	cpc	r25, r21
     cf6:	20 f4       	brcc	.+8      	; 0xd00 <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     cf8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <xMinimumEverFreeBytesRemaining+0x1>
     cfc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d00:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <xBlockAllocatedBit>
     d04:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <xBlockAllocatedBit+0x1>
     d08:	28 2b       	or	r18, r24
     d0a:	39 2b       	or	r19, r25
     d0c:	3b 83       	std	Y+3, r19	; 0x03
     d0e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d10:	19 82       	std	Y+1, r1	; 0x01
     d12:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d14:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <xNumberOfSuccessfulAllocations>
     d18:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <xNumberOfSuccessfulAllocations+0x1>
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <xNumberOfSuccessfulAllocations+0x1>
     d22:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <xNumberOfSuccessfulAllocations>
     d26:	0b c0       	rjmp	.+22     	; 0xd3e <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     d28:	e1 2c       	mov	r14, r1
     d2a:	f1 2c       	mov	r15, r1
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <pvPortMalloc+0x138>
     d2e:	e1 2c       	mov	r14, r1
     d30:	f1 2c       	mov	r15, r1
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <pvPortMalloc+0x138>
     d34:	e1 2c       	mov	r14, r1
     d36:	f1 2c       	mov	r15, r1
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <pvPortMalloc+0x138>
     d3a:	e1 2c       	mov	r14, r1
     d3c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     d3e:	0e 94 cb 09 	call	0x1396	; 0x1396 <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     d42:	c7 01       	movw	r24, r14
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	08 95       	ret

00000d52 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	99 f1       	breq	.+102    	; 0xdc4 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     d5e:	ec 01       	movw	r28, r24
     d60:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     d62:	4a 81       	ldd	r20, Y+2	; 0x02
     d64:	5b 81       	ldd	r21, Y+3	; 0x03
     d66:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <xBlockAllocatedBit>
     d6a:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <xBlockAllocatedBit+0x1>
     d6e:	ba 01       	movw	r22, r20
     d70:	62 23       	and	r22, r18
     d72:	73 23       	and	r23, r19
     d74:	67 2b       	or	r22, r23
     d76:	31 f1       	breq	.+76     	; 0xdc4 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     d78:	68 81       	ld	r22, Y
     d7a:	79 81       	ldd	r23, Y+1	; 0x01
     d7c:	67 2b       	or	r22, r23
     d7e:	11 f5       	brne	.+68     	; 0xdc4 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     d80:	20 95       	com	r18
     d82:	30 95       	com	r19
     d84:	24 23       	and	r18, r20
     d86:	35 23       	and	r19, r21
     d88:	3b 83       	std	Y+3, r19	; 0x03
     d8a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     d8c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <xFreeBytesRemaining>
     d98:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <xFreeBytesRemaining+0x1>
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <xFreeBytesRemaining+0x1>
     da4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     da8:	ce 01       	movw	r24, r28
     daa:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     dae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <xNumberOfSuccessfulFrees>
     db2:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <xNumberOfSuccessfulFrees+0x1>
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <xNumberOfSuccessfulFrees+0x1>
     dbc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     dc0:	0e 94 cb 09 	call	0x1396	; 0x1396 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     dce:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     dd2:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     dd6:	80 81       	ld	r24, Z
     dd8:	81 11       	cpse	r24, r1
     dda:	07 c0       	rjmp	.+14     	; 0xdea <prvResetNextTaskUnblockTime+0x1c>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	9f ef       	ldi	r25, 0xFF	; 255
     de0:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
     de4:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
     de8:	08 95       	ret
     dea:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
     dee:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
     df2:	05 80       	ldd	r0, Z+5	; 0x05
     df4:	f6 81       	ldd	r31, Z+6	; 0x06
     df6:	e0 2d       	mov	r30, r0
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
     e00:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
     e04:	08 95       	ret

00000e06 <prvInitialiseNewTask>:
     e06:	2f 92       	push	r2
     e08:	3f 92       	push	r3
     e0a:	4f 92       	push	r4
     e0c:	5f 92       	push	r5
     e0e:	6f 92       	push	r6
     e10:	7f 92       	push	r7
     e12:	8f 92       	push	r8
     e14:	9f 92       	push	r9
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	1c 01       	movw	r2, r24
     e2e:	4b 01       	movw	r8, r22
     e30:	29 01       	movw	r4, r18
     e32:	3a 01       	movw	r6, r20
     e34:	a9 01       	movw	r20, r18
     e36:	65 ea       	ldi	r22, 0xA5	; 165
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	d5 01       	movw	r26, r10
     e3c:	57 96       	adiw	r26, 0x17	; 23
     e3e:	8d 91       	ld	r24, X+
     e40:	9c 91       	ld	r25, X
     e42:	58 97       	sbiw	r26, 0x18	; 24
     e44:	0e 94 56 0c 	call	0x18ac	; 0x18ac <memset>
     e48:	f5 01       	movw	r30, r10
     e4a:	87 89       	ldd	r24, Z+23	; 0x17
     e4c:	90 8d       	ldd	r25, Z+24	; 0x18
     e4e:	f1 e0       	ldi	r31, 0x01	; 1
     e50:	4f 1a       	sub	r4, r31
     e52:	51 08       	sbc	r5, r1
     e54:	48 0e       	add	r4, r24
     e56:	59 1e       	adc	r5, r25
     e58:	81 14       	cp	r8, r1
     e5a:	91 04       	cpc	r9, r1
     e5c:	89 f4       	brne	.+34     	; 0xe80 <prvInitialiseNewTask+0x7a>
     e5e:	17 c0       	rjmp	.+46     	; 0xe8e <prvInitialiseNewTask+0x88>
     e60:	82 2f       	mov	r24, r18
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	f4 01       	movw	r30, r8
     e66:	e8 0f       	add	r30, r24
     e68:	f9 1f       	adc	r31, r25
     e6a:	30 81       	ld	r19, Z
     e6c:	d5 01       	movw	r26, r10
     e6e:	a8 0f       	add	r26, r24
     e70:	b9 1f       	adc	r27, r25
     e72:	59 96       	adiw	r26, 0x19	; 25
     e74:	3c 93       	st	X, r19
     e76:	80 81       	ld	r24, Z
     e78:	88 23       	and	r24, r24
     e7a:	29 f0       	breq	.+10     	; 0xe86 <prvInitialiseNewTask+0x80>
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <prvInitialiseNewTask+0x7c>
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	2c 30       	cpi	r18, 0x0C	; 12
     e84:	68 f3       	brcs	.-38     	; 0xe60 <prvInitialiseNewTask+0x5a>
     e86:	d5 01       	movw	r26, r10
     e88:	94 96       	adiw	r26, 0x24	; 36
     e8a:	1c 92       	st	X, r1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <prvInitialiseNewTask+0x8c>
     e8e:	f5 01       	movw	r30, r10
     e90:	11 8e       	std	Z+25, r1	; 0x19
     e92:	f3 e0       	ldi	r31, 0x03	; 3
     e94:	fe 15       	cp	r31, r14
     e96:	20 f4       	brcc	.+8      	; 0xea0 <prvInitialiseNewTask+0x9a>
     e98:	0f 2e       	mov	r0, r31
     e9a:	f3 e0       	ldi	r31, 0x03	; 3
     e9c:	ef 2e       	mov	r14, r31
     e9e:	f0 2d       	mov	r31, r0
     ea0:	d5 01       	movw	r26, r10
     ea2:	56 96       	adiw	r26, 0x16	; 22
     ea4:	ec 92       	st	X, r14
     ea6:	c5 01       	movw	r24, r10
     ea8:	02 96       	adiw	r24, 0x02	; 2
     eaa:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInitialiseItem>
     eae:	c5 01       	movw	r24, r10
     eb0:	0c 96       	adiw	r24, 0x0c	; 12
     eb2:	0e 94 13 05 	call	0xa26	; 0xa26 <vListInitialiseItem>
     eb6:	f5 01       	movw	r30, r10
     eb8:	b1 86       	std	Z+9, r11	; 0x09
     eba:	a0 86       	std	Z+8, r10	; 0x08
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	8e 19       	sub	r24, r14
     ec2:	91 09       	sbc	r25, r1
     ec4:	95 87       	std	Z+13, r25	; 0x0d
     ec6:	84 87       	std	Z+12, r24	; 0x0c
     ec8:	b3 8a       	std	Z+19, r11	; 0x13
     eca:	a2 8a       	std	Z+18, r10	; 0x12
     ecc:	84 e0       	ldi	r24, 0x04	; 4
     ece:	b7 96       	adiw	r30, 0x27	; 39
     ed0:	df 01       	movw	r26, r30
     ed2:	1d 92       	st	X+, r1
     ed4:	8a 95       	dec	r24
     ed6:	e9 f7       	brne	.-6      	; 0xed2 <prvInitialiseNewTask+0xcc>
     ed8:	f5 01       	movw	r30, r10
     eda:	13 a6       	std	Z+43, r1	; 0x2b
     edc:	a8 01       	movw	r20, r16
     ede:	b1 01       	movw	r22, r2
     ee0:	c2 01       	movw	r24, r4
     ee2:	0e 94 b2 03 	call	0x764	; 0x764 <pxPortInitialiseStack>
     ee6:	d5 01       	movw	r26, r10
     ee8:	8d 93       	st	X+, r24
     eea:	9c 93       	st	X, r25
     eec:	c1 14       	cp	r12, r1
     eee:	d1 04       	cpc	r13, r1
     ef0:	19 f0       	breq	.+6      	; 0xef8 <prvInitialiseNewTask+0xf2>
     ef2:	f6 01       	movw	r30, r12
     ef4:	b1 82       	std	Z+1, r11	; 0x01
     ef6:	a0 82       	st	Z, r10
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	08 95       	ret

00000f1c <prvIdleTask>:
     f1c:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxReadyTasksLists>
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	e0 f3       	brcs	.-8      	; 0xf1c <prvIdleTask>
     f24:	0e 94 4d 04 	call	0x89a	; 0x89a <vPortYield>
     f28:	f9 cf       	rjmp	.-14     	; 0xf1c <prvIdleTask>

00000f2a <prvInitialiseTaskLists>:
     f2a:	cf 93       	push	r28
     f2c:	c0 e0       	ldi	r28, 0x00	; 0
     f2e:	10 c0       	rjmp	.+32     	; 0xf50 <prvInitialiseTaskLists+0x26>
     f30:	8c 2f       	mov	r24, r28
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 01       	movw	r18, r24
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	8f 51       	subi	r24, 0x1F	; 31
     f48:	99 4f       	sbci	r25, 0xF9	; 249
     f4a:	0e 94 05 05 	call	0xa0a	; 0xa0a <vListInitialise>
     f4e:	cf 5f       	subi	r28, 0xFF	; 255
     f50:	c4 30       	cpi	r28, 0x04	; 4
     f52:	70 f3       	brcs	.-36     	; 0xf30 <prvInitialiseTaskLists+0x6>
     f54:	88 ed       	ldi	r24, 0xD8	; 216
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	0e 94 05 05 	call	0xa0a	; 0xa0a <vListInitialise>
     f5c:	8f ec       	ldi	r24, 0xCF	; 207
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	0e 94 05 05 	call	0xa0a	; 0xa0a <vListInitialise>
     f64:	82 ec       	ldi	r24, 0xC2	; 194
     f66:	96 e0       	ldi	r25, 0x06	; 6
     f68:	0e 94 05 05 	call	0xa0a	; 0xa0a <vListInitialise>
     f6c:	89 eb       	ldi	r24, 0xB9	; 185
     f6e:	96 e0       	ldi	r25, 0x06	; 6
     f70:	0e 94 05 05 	call	0xa0a	; 0xa0a <vListInitialise>
     f74:	88 ed       	ldi	r24, 0xD8	; 216
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <pxDelayedTaskList+0x1>
     f7c:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <pxDelayedTaskList>
     f80:	8f ec       	ldi	r24, 0xCF	; 207
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
     f88:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <pxOverflowDelayedTaskList>
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <prvAddNewTaskToReadyList>:
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	0f 92       	push	r0
     f9c:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <uxCurrentNumberOfTasks>
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <uxCurrentNumberOfTasks>
     fa6:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxCurrentTCB>
     faa:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     fae:	89 2b       	or	r24, r25
     fb0:	59 f4       	brne	.+22     	; 0xfc8 <prvAddNewTaskToReadyList+0x38>
     fb2:	d0 93 06 07 	sts	0x0706, r29	; 0x800706 <pxCurrentTCB+0x1>
     fb6:	c0 93 05 07 	sts	0x0705, r28	; 0x800705 <pxCurrentTCB>
     fba:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <uxCurrentNumberOfTasks>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	99 f4       	brne	.+38     	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fc2:	0e 94 95 07 	call	0xf2a	; 0xf2a <prvInitialiseTaskLists>
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fc8:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xSchedulerRunning>
     fcc:	81 11       	cpse	r24, r1
     fce:	0c c0       	rjmp	.+24     	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fd0:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
     fd4:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
     fd8:	96 89       	ldd	r25, Z+22	; 0x16
     fda:	8e 89       	ldd	r24, Y+22	; 0x16
     fdc:	89 17       	cp	r24, r25
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fe0:	d0 93 06 07 	sts	0x0706, r29	; 0x800706 <pxCurrentTCB+0x1>
     fe4:	c0 93 05 07 	sts	0x0705, r28	; 0x800705 <pxCurrentTCB>
     fe8:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxTaskNumber>
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <uxTaskNumber>
     ff2:	8d a3       	std	Y+37, r24	; 0x25
     ff4:	8e 89       	ldd	r24, Y+22	; 0x16
     ff6:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
     ffa:	98 17       	cp	r25, r24
     ffc:	10 f4       	brcc	.+4      	; 0x1002 <prvAddNewTaskToReadyList+0x72>
     ffe:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTopReadyPriority>
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9c 01       	movw	r18, r24
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	be 01       	movw	r22, r28
    1018:	6e 5f       	subi	r22, 0xFE	; 254
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 51       	subi	r24, 0x1F	; 31
    101e:	99 4f       	sbci	r25, 0xF9	; 249
    1020:	0e 94 17 05 	call	0xa2e	; 0xa2e <vListInsertEnd>
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <xSchedulerRunning>
    102c:	88 23       	and	r24, r24
    102e:	51 f0       	breq	.+20     	; 0x1044 <prvAddNewTaskToReadyList+0xb4>
    1030:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    1034:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    1038:	96 89       	ldd	r25, Z+22	; 0x16
    103a:	8e 89       	ldd	r24, Y+22	; 0x16
    103c:	98 17       	cp	r25, r24
    103e:	10 f4       	brcc	.+4      	; 0x1044 <prvAddNewTaskToReadyList+0xb4>
    1040:	0e 94 4d 04 	call	0x89a	; 0x89a <vPortYield>
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <prvAddCurrentTaskToDelayedList>:
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	f6 2e       	mov	r15, r22
    1058:	00 91 b6 06 	lds	r16, 0x06B6	; 0x8006b6 <xTickCount>
    105c:	10 91 b7 06 	lds	r17, 0x06B7	; 0x8006b7 <xTickCount+0x1>
    1060:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <pxCurrentTCB>
    1064:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    1068:	02 96       	adiw	r24, 0x02	; 2
    106a:	0e 94 69 05 	call	0xad2	; 0xad2 <uxListRemove>
    106e:	cf 3f       	cpi	r28, 0xFF	; 255
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	d8 07       	cpc	r29, r24
    1074:	69 f4       	brne	.+26     	; 0x1090 <prvAddCurrentTaskToDelayedList+0x46>
    1076:	ff 20       	and	r15, r15
    1078:	59 f0       	breq	.+22     	; 0x1090 <prvAddCurrentTaskToDelayedList+0x46>
    107a:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <pxCurrentTCB>
    107e:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    1082:	6e 5f       	subi	r22, 0xFE	; 254
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	89 eb       	ldi	r24, 0xB9	; 185
    1088:	96 e0       	ldi	r25, 0x06	; 6
    108a:	0e 94 17 05 	call	0xa2e	; 0xa2e <vListInsertEnd>
    108e:	2f c0       	rjmp	.+94     	; 0x10ee <prvAddCurrentTaskToDelayedList+0xa4>
    1090:	c0 0f       	add	r28, r16
    1092:	d1 1f       	adc	r29, r17
    1094:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    1098:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    109c:	d3 83       	std	Z+3, r29	; 0x03
    109e:	c2 83       	std	Z+2, r28	; 0x02
    10a0:	c0 17       	cp	r28, r16
    10a2:	d1 07       	cpc	r29, r17
    10a4:	68 f4       	brcc	.+26     	; 0x10c0 <prvAddCurrentTaskToDelayedList+0x76>
    10a6:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <pxCurrentTCB>
    10aa:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    10ae:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <pxOverflowDelayedTaskList>
    10b2:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
    10b6:	6e 5f       	subi	r22, 0xFE	; 254
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	0e 94 38 05 	call	0xa70	; 0xa70 <vListInsert>
    10be:	17 c0       	rjmp	.+46     	; 0x10ee <prvAddCurrentTaskToDelayedList+0xa4>
    10c0:	60 91 05 07 	lds	r22, 0x0705	; 0x800705 <pxCurrentTCB>
    10c4:	70 91 06 07 	lds	r23, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    10c8:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxDelayedTaskList>
    10cc:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
    10d0:	6e 5f       	subi	r22, 0xFE	; 254
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	0e 94 38 05 	call	0xa70	; 0xa70 <vListInsert>
    10d8:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xNextTaskUnblockTime>
    10dc:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xNextTaskUnblockTime+0x1>
    10e0:	c8 17       	cp	r28, r24
    10e2:	d9 07       	cpc	r29, r25
    10e4:	20 f4       	brcc	.+8      	; 0x10ee <prvAddCurrentTaskToDelayedList+0xa4>
    10e6:	d0 93 ae 06 	sts	0x06AE, r29	; 0x8006ae <xNextTaskUnblockTime+0x1>
    10ea:	c0 93 ad 06 	sts	0x06AD, r28	; 0x8006ad <xNextTaskUnblockTime>
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	08 95       	ret

000010fa <xTaskCreate>:
    10fa:	2f 92       	push	r2
    10fc:	3f 92       	push	r3
    10fe:	4f 92       	push	r4
    1100:	5f 92       	push	r5
    1102:	6f 92       	push	r6
    1104:	7f 92       	push	r7
    1106:	8f 92       	push	r8
    1108:	9f 92       	push	r9
    110a:	af 92       	push	r10
    110c:	bf 92       	push	r11
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	3c 01       	movw	r6, r24
    1120:	1b 01       	movw	r2, r22
    1122:	5a 01       	movw	r10, r20
    1124:	29 01       	movw	r4, r18
    1126:	ca 01       	movw	r24, r20
    1128:	0e 94 03 06 	call	0xc06	; 0xc06 <pvPortMalloc>
    112c:	6c 01       	movw	r12, r24
    112e:	89 2b       	or	r24, r25
    1130:	71 f0       	breq	.+28     	; 0x114e <xTaskCreate+0x54>
    1132:	8c e2       	ldi	r24, 0x2C	; 44
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 03 06 	call	0xc06	; 0xc06 <pvPortMalloc>
    113a:	ec 01       	movw	r28, r24
    113c:	89 2b       	or	r24, r25
    113e:	19 f0       	breq	.+6      	; 0x1146 <xTaskCreate+0x4c>
    1140:	d8 8e       	std	Y+24, r13	; 0x18
    1142:	cf 8a       	std	Y+23, r12	; 0x17
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <xTaskCreate+0x58>
    1146:	c6 01       	movw	r24, r12
    1148:	0e 94 a9 06 	call	0xd52	; 0xd52 <vPortFree>
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <xTaskCreate+0x58>
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
    1152:	20 97       	sbiw	r28, 0x00	; 0
    1154:	91 f0       	breq	.+36     	; 0x117a <xTaskCreate+0x80>
    1156:	95 01       	movw	r18, r10
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	81 2c       	mov	r8, r1
    115e:	91 2c       	mov	r9, r1
    1160:	5e 01       	movw	r10, r28
    1162:	67 01       	movw	r12, r14
    1164:	e0 2e       	mov	r14, r16
    1166:	82 01       	movw	r16, r4
    1168:	b1 01       	movw	r22, r2
    116a:	c3 01       	movw	r24, r6
    116c:	0e 94 03 07 	call	0xe06	; 0xe06 <prvInitialiseNewTask>
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 c8 07 	call	0xf90	; 0xf90 <prvAddNewTaskToReadyList>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	01 c0       	rjmp	.+2      	; 0x117c <xTaskCreate+0x82>
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	bf 90       	pop	r11
    118e:	af 90       	pop	r10
    1190:	9f 90       	pop	r9
    1192:	8f 90       	pop	r8
    1194:	7f 90       	pop	r7
    1196:	6f 90       	pop	r6
    1198:	5f 90       	pop	r5
    119a:	4f 90       	pop	r4
    119c:	3f 90       	pop	r3
    119e:	2f 90       	pop	r2
    11a0:	08 95       	ret

000011a2 <vTaskStartScheduler>:
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	0f 2e       	mov	r0, r31
    11aa:	fb ea       	ldi	r31, 0xAB	; 171
    11ac:	ef 2e       	mov	r14, r31
    11ae:	f6 e0       	ldi	r31, 0x06	; 6
    11b0:	ff 2e       	mov	r15, r31
    11b2:	f0 2d       	mov	r31, r0
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	45 e5       	ldi	r20, 0x55	; 85
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	65 ea       	ldi	r22, 0xA5	; 165
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	8e e8       	ldi	r24, 0x8E	; 142
    11c4:	97 e0       	ldi	r25, 0x07	; 7
    11c6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <xTaskCreate>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	81 f4       	brne	.+32     	; 0x11ee <vTaskStartScheduler+0x4c>
    11ce:	f8 94       	cli
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
    11d8:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <xSchedulerRunning>
    11e2:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <xTickCount+0x1>
    11e6:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <xTickCount>
    11ea:	0e 94 1e 04 	call	0x83c	; 0x83c <xPortStartScheduler>
    11ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <vTaskSuspendAll>:
    11fa:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxSchedulerSuspended>
    1204:	08 95       	ret

00001206 <xTaskGetTickCount>:
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	0f 92       	push	r0
    120c:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xTickCount>
    1210:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <xTickCount+0x1>
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	08 95       	ret

0000121a <xTaskIncrementTick>:
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    122c:	81 11       	cpse	r24, r1
    122e:	9d c0       	rjmp	.+314    	; 0x136a <xTaskIncrementTick+0x150>
    1230:	e0 90 b6 06 	lds	r14, 0x06B6	; 0x8006b6 <xTickCount>
    1234:	f0 90 b7 06 	lds	r15, 0x06B7	; 0x8006b7 <xTickCount+0x1>
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	e8 1a       	sub	r14, r24
    123c:	f8 0a       	sbc	r15, r24
    123e:	f0 92 b7 06 	sts	0x06B7, r15	; 0x8006b7 <xTickCount+0x1>
    1242:	e0 92 b6 06 	sts	0x06B6, r14	; 0x8006b6 <xTickCount>
    1246:	e1 14       	cp	r14, r1
    1248:	f1 04       	cpc	r15, r1
    124a:	b9 f4       	brne	.+46     	; 0x127a <xTaskIncrementTick+0x60>
    124c:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <pxDelayedTaskList>
    1250:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
    1254:	20 91 cb 06 	lds	r18, 0x06CB	; 0x8006cb <pxOverflowDelayedTaskList>
    1258:	30 91 cc 06 	lds	r19, 0x06CC	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
    125c:	30 93 ce 06 	sts	0x06CE, r19	; 0x8006ce <pxDelayedTaskList+0x1>
    1260:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <pxDelayedTaskList>
    1264:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <pxOverflowDelayedTaskList+0x1>
    1268:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <pxOverflowDelayedTaskList>
    126c:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <xNumOfOverflows>
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <xNumOfOverflows>
    1276:	0e 94 e7 06 	call	0xdce	; 0xdce <prvResetNextTaskUnblockTime>
    127a:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xNextTaskUnblockTime>
    127e:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xNextTaskUnblockTime+0x1>
    1282:	e8 16       	cp	r14, r24
    1284:	f9 06       	cpc	r15, r25
    1286:	28 f4       	brcc	.+10     	; 0x1292 <xTaskIncrementTick+0x78>
    1288:	d1 2c       	mov	r13, r1
    128a:	53 c0       	rjmp	.+166    	; 0x1332 <xTaskIncrementTick+0x118>
    128c:	dd 24       	eor	r13, r13
    128e:	d3 94       	inc	r13
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <xTaskIncrementTick+0x7a>
    1292:	d1 2c       	mov	r13, r1
    1294:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
    1298:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
    129c:	80 81       	ld	r24, Z
    129e:	81 11       	cpse	r24, r1
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <xTaskIncrementTick+0x96>
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	9f ef       	ldi	r25, 0xFF	; 255
    12a6:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
    12aa:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
    12ae:	41 c0       	rjmp	.+130    	; 0x1332 <xTaskIncrementTick+0x118>
    12b0:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <pxDelayedTaskList>
    12b4:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <pxDelayedTaskList+0x1>
    12b8:	05 80       	ldd	r0, Z+5	; 0x05
    12ba:	f6 81       	ldd	r31, Z+6	; 0x06
    12bc:	e0 2d       	mov	r30, r0
    12be:	c6 81       	ldd	r28, Z+6	; 0x06
    12c0:	d7 81       	ldd	r29, Z+7	; 0x07
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	e8 16       	cp	r14, r24
    12c8:	f9 06       	cpc	r15, r25
    12ca:	28 f4       	brcc	.+10     	; 0x12d6 <xTaskIncrementTick+0xbc>
    12cc:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xNextTaskUnblockTime+0x1>
    12d0:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xNextTaskUnblockTime>
    12d4:	2e c0       	rjmp	.+92     	; 0x1332 <xTaskIncrementTick+0x118>
    12d6:	8e 01       	movw	r16, r28
    12d8:	0e 5f       	subi	r16, 0xFE	; 254
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	c8 01       	movw	r24, r16
    12de:	0e 94 69 05 	call	0xad2	; 0xad2 <uxListRemove>
    12e2:	8c 89       	ldd	r24, Y+20	; 0x14
    12e4:	9d 89       	ldd	r25, Y+21	; 0x15
    12e6:	89 2b       	or	r24, r25
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <xTaskIncrementTick+0xd8>
    12ea:	ce 01       	movw	r24, r28
    12ec:	0c 96       	adiw	r24, 0x0c	; 12
    12ee:	0e 94 69 05 	call	0xad2	; 0xad2 <uxListRemove>
    12f2:	8e 89       	ldd	r24, Y+22	; 0x16
    12f4:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    12f8:	98 17       	cp	r25, r24
    12fa:	10 f4       	brcc	.+4      	; 0x1300 <xTaskIncrementTick+0xe6>
    12fc:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTopReadyPriority>
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 01       	movw	r18, r24
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	b8 01       	movw	r22, r16
    1316:	8f 51       	subi	r24, 0x1F	; 31
    1318:	99 4f       	sbci	r25, 0xF9	; 249
    131a:	0e 94 17 05 	call	0xa2e	; 0xa2e <vListInsertEnd>
    131e:	9e 89       	ldd	r25, Y+22	; 0x16
    1320:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    1324:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    1328:	86 89       	ldd	r24, Z+22	; 0x16
    132a:	98 17       	cp	r25, r24
    132c:	08 f0       	brcs	.+2      	; 0x1330 <xTaskIncrementTick+0x116>
    132e:	ae cf       	rjmp	.-164    	; 0x128c <xTaskIncrementTick+0x72>
    1330:	b1 cf       	rjmp	.-158    	; 0x1294 <xTaskIncrementTick+0x7a>
    1332:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    1336:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    133a:	86 89       	ldd	r24, Z+22	; 0x16
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	fc 01       	movw	r30, r24
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	8e 0f       	add	r24, r30
    134e:	9f 1f       	adc	r25, r31
    1350:	fc 01       	movw	r30, r24
    1352:	ef 51       	subi	r30, 0x1F	; 31
    1354:	f9 4f       	sbci	r31, 0xF9	; 249
    1356:	80 81       	ld	r24, Z
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	10 f0       	brcs	.+4      	; 0x1360 <xTaskIncrementTick+0x146>
    135c:	dd 24       	eor	r13, r13
    135e:	d3 94       	inc	r13
    1360:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <xYieldPending>
    1364:	81 11       	cpse	r24, r1
    1366:	0c c0       	rjmp	.+24     	; 0x1380 <xTaskIncrementTick+0x166>
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <xTaskIncrementTick+0x16a>
    136a:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <xPendedTicks>
    136e:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <xPendedTicks+0x1>
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <xPendedTicks+0x1>
    1378:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <xPendedTicks>
    137c:	d1 2c       	mov	r13, r1
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <xTaskIncrementTick+0x16a>
    1380:	dd 24       	eor	r13, r13
    1382:	d3 94       	inc	r13
    1384:	8d 2d       	mov	r24, r13
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	08 95       	ret

00001396 <xTaskResumeAll>:
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	0f 92       	push	r0
    13a4:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    13a8:	81 50       	subi	r24, 0x01	; 1
    13aa:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <uxSchedulerSuspended>
    13ae:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    13b2:	81 11       	cpse	r24, r1
    13b4:	5c c0       	rjmp	.+184    	; 0x146e <xTaskResumeAll+0xd8>
    13b6:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <uxCurrentNumberOfTasks>
    13ba:	81 11       	cpse	r24, r1
    13bc:	33 c0       	rjmp	.+102    	; 0x1424 <xTaskResumeAll+0x8e>
    13be:	5a c0       	rjmp	.+180    	; 0x1474 <xTaskResumeAll+0xde>
    13c0:	e0 91 c7 06 	lds	r30, 0x06C7	; 0x8006c7 <xPendingReadyList+0x5>
    13c4:	f0 91 c8 06 	lds	r31, 0x06C8	; 0x8006c8 <xPendingReadyList+0x6>
    13c8:	c6 81       	ldd	r28, Z+6	; 0x06
    13ca:	d7 81       	ldd	r29, Z+7	; 0x07
    13cc:	ce 01       	movw	r24, r28
    13ce:	0c 96       	adiw	r24, 0x0c	; 12
    13d0:	0e 94 69 05 	call	0xad2	; 0xad2 <uxListRemove>
    13d4:	8e 01       	movw	r16, r28
    13d6:	0e 5f       	subi	r16, 0xFE	; 254
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 69 05 	call	0xad2	; 0xad2 <uxListRemove>
    13e0:	8e 89       	ldd	r24, Y+22	; 0x16
    13e2:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    13e6:	98 17       	cp	r25, r24
    13e8:	10 f4       	brcc	.+4      	; 0x13ee <xTaskResumeAll+0x58>
    13ea:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <uxTopReadyPriority>
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9c 01       	movw	r18, r24
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	82 0f       	add	r24, r18
    1400:	93 1f       	adc	r25, r19
    1402:	b8 01       	movw	r22, r16
    1404:	8f 51       	subi	r24, 0x1F	; 31
    1406:	99 4f       	sbci	r25, 0xF9	; 249
    1408:	0e 94 17 05 	call	0xa2e	; 0xa2e <vListInsertEnd>
    140c:	9e 89       	ldd	r25, Y+22	; 0x16
    140e:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <pxCurrentTCB>
    1412:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <pxCurrentTCB+0x1>
    1416:	86 89       	ldd	r24, Z+22	; 0x16
    1418:	98 17       	cp	r25, r24
    141a:	30 f0       	brcs	.+12     	; 0x1428 <xTaskResumeAll+0x92>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <xTaskResumeAll+0x92>
    1424:	c0 e0       	ldi	r28, 0x00	; 0
    1426:	d0 e0       	ldi	r29, 0x00	; 0
    1428:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <xPendingReadyList>
    142c:	81 11       	cpse	r24, r1
    142e:	c8 cf       	rjmp	.-112    	; 0x13c0 <xTaskResumeAll+0x2a>
    1430:	cd 2b       	or	r28, r29
    1432:	11 f0       	breq	.+4      	; 0x1438 <xTaskResumeAll+0xa2>
    1434:	0e 94 e7 06 	call	0xdce	; 0xdce <prvResetNextTaskUnblockTime>
    1438:	c0 91 b2 06 	lds	r28, 0x06B2	; 0x8006b2 <xPendedTicks>
    143c:	d0 91 b3 06 	lds	r29, 0x06B3	; 0x8006b3 <xPendedTicks+0x1>
    1440:	20 97       	sbiw	r28, 0x00	; 0
    1442:	69 f0       	breq	.+26     	; 0x145e <xTaskResumeAll+0xc8>
    1444:	0e 94 0d 09 	call	0x121a	; 0x121a <xTaskIncrementTick>
    1448:	88 23       	and	r24, r24
    144a:	19 f0       	breq	.+6      	; 0x1452 <xTaskResumeAll+0xbc>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    1452:	21 97       	sbiw	r28, 0x01	; 1
    1454:	b9 f7       	brne	.-18     	; 0x1444 <xTaskResumeAll+0xae>
    1456:	10 92 b3 06 	sts	0x06B3, r1	; 0x8006b3 <xPendedTicks+0x1>
    145a:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <xPendedTicks>
    145e:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <xYieldPending>
    1462:	88 23       	and	r24, r24
    1464:	31 f0       	breq	.+12     	; 0x1472 <xTaskResumeAll+0xdc>
    1466:	0e 94 4d 04 	call	0x89a	; 0x89a <vPortYield>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <xTaskResumeAll+0xde>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <xTaskResumeAll+0xde>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <vTaskDelay>:
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	ec 01       	movw	r28, r24
    1488:	89 2b       	or	r24, r25
    148a:	49 f0       	breq	.+18     	; 0x149e <vTaskDelay+0x1c>
    148c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	ce 01       	movw	r24, r28
    1494:	0e 94 25 08 	call	0x104a	; 0x104a <prvAddCurrentTaskToDelayedList>
    1498:	0e 94 cb 09 	call	0x1396	; 0x1396 <xTaskResumeAll>
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <vTaskDelay+0x1e>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	81 11       	cpse	r24, r1
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <vTaskDelay+0x26>
    14a4:	0e 94 4d 04 	call	0x89a	; 0x89a <vPortYield>
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    14ae:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <uxSchedulerSuspended>
    14b2:	88 23       	and	r24, r24
    14b4:	21 f0       	breq	.+8      	; 0x14be <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <xYieldPending>
    14bc:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    14be:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    14c2:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <uxTopReadyPriority>
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <vTaskSwitchContext+0x1c>
    14c8:	21 50       	subi	r18, 0x01	; 1
    14ca:	82 2f       	mov	r24, r18
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	fc 01       	movw	r30, r24
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	e8 0f       	add	r30, r24
    14de:	f9 1f       	adc	r31, r25
    14e0:	ef 51       	subi	r30, 0x1F	; 31
    14e2:	f9 4f       	sbci	r31, 0xF9	; 249
    14e4:	30 81       	ld	r19, Z
    14e6:	33 23       	and	r19, r19
    14e8:	79 f3       	breq	.-34     	; 0x14c8 <vTaskSwitchContext+0x1a>
    14ea:	ac 01       	movw	r20, r24
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
    14f0:	44 0f       	add	r20, r20
    14f2:	55 1f       	adc	r21, r21
    14f4:	44 0f       	add	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	48 0f       	add	r20, r24
    14fa:	59 1f       	adc	r21, r25
    14fc:	df 01       	movw	r26, r30
    14fe:	01 80       	ldd	r0, Z+1	; 0x01
    1500:	f2 81       	ldd	r31, Z+2	; 0x02
    1502:	e0 2d       	mov	r30, r0
    1504:	02 80       	ldd	r0, Z+2	; 0x02
    1506:	f3 81       	ldd	r31, Z+3	; 0x03
    1508:	e0 2d       	mov	r30, r0
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	fc 93       	st	X, r31
    150e:	ee 93       	st	-X, r30
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	4c 51       	subi	r20, 0x1C	; 28
    1514:	59 4f       	sbci	r21, 0xF9	; 249
    1516:	e4 17       	cp	r30, r20
    1518:	f5 07       	cpc	r31, r21
    151a:	29 f4       	brne	.+10     	; 0x1526 <vTaskSwitchContext+0x78>
    151c:	42 81       	ldd	r20, Z+2	; 0x02
    151e:	53 81       	ldd	r21, Z+3	; 0x03
    1520:	fd 01       	movw	r30, r26
    1522:	52 83       	std	Z+2, r21	; 0x02
    1524:	41 83       	std	Z+1, r20	; 0x01
    1526:	fc 01       	movw	r30, r24
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	8e 0f       	add	r24, r30
    1536:	9f 1f       	adc	r25, r31
    1538:	fc 01       	movw	r30, r24
    153a:	ef 51       	subi	r30, 0x1F	; 31
    153c:	f9 4f       	sbci	r31, 0xF9	; 249
    153e:	01 80       	ldd	r0, Z+1	; 0x01
    1540:	f2 81       	ldd	r31, Z+2	; 0x02
    1542:	e0 2d       	mov	r30, r0
    1544:	86 81       	ldd	r24, Z+6	; 0x06
    1546:	97 81       	ldd	r25, Z+7	; 0x07
    1548:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <pxCurrentTCB+0x1>
    154c:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <pxCurrentTCB>
    1550:	20 93 b5 06 	sts	0x06B5, r18	; 0x8006b5 <uxTopReadyPriority>
    1554:	08 95       	ret

00001556 <__divsf3>:
    1556:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3x>
    155a:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_round>
    155e:	0e 94 99 0b 	call	0x1732	; 0x1732 <__fp_pscB>
    1562:	58 f0       	brcs	.+22     	; 0x157a <__divsf3+0x24>
    1564:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fp_pscA>
    1568:	40 f0       	brcs	.+16     	; 0x157a <__divsf3+0x24>
    156a:	29 f4       	brne	.+10     	; 0x1576 <__divsf3+0x20>
    156c:	5f 3f       	cpi	r21, 0xFF	; 255
    156e:	29 f0       	breq	.+10     	; 0x157a <__divsf3+0x24>
    1570:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__fp_inf>
    1574:	51 11       	cpse	r21, r1
    1576:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_szero>
    157a:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_nan>

0000157e <__divsf3x>:
    157e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fp_split3>
    1582:	68 f3       	brcs	.-38     	; 0x155e <__divsf3+0x8>

00001584 <__divsf3_pse>:
    1584:	99 23       	and	r25, r25
    1586:	b1 f3       	breq	.-20     	; 0x1574 <__divsf3+0x1e>
    1588:	55 23       	and	r21, r21
    158a:	91 f3       	breq	.-28     	; 0x1570 <__divsf3+0x1a>
    158c:	95 1b       	sub	r25, r21
    158e:	55 0b       	sbc	r21, r21
    1590:	bb 27       	eor	r27, r27
    1592:	aa 27       	eor	r26, r26
    1594:	62 17       	cp	r22, r18
    1596:	73 07       	cpc	r23, r19
    1598:	84 07       	cpc	r24, r20
    159a:	38 f0       	brcs	.+14     	; 0x15aa <__divsf3_pse+0x26>
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	5f 4f       	sbci	r21, 0xFF	; 255
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	44 1f       	adc	r20, r20
    15a6:	aa 1f       	adc	r26, r26
    15a8:	a9 f3       	breq	.-22     	; 0x1594 <__divsf3_pse+0x10>
    15aa:	35 d0       	rcall	.+106    	; 0x1616 <__divsf3_pse+0x92>
    15ac:	0e 2e       	mov	r0, r30
    15ae:	3a f0       	brmi	.+14     	; 0x15be <__divsf3_pse+0x3a>
    15b0:	e0 e8       	ldi	r30, 0x80	; 128
    15b2:	32 d0       	rcall	.+100    	; 0x1618 <__divsf3_pse+0x94>
    15b4:	91 50       	subi	r25, 0x01	; 1
    15b6:	50 40       	sbci	r21, 0x00	; 0
    15b8:	e6 95       	lsr	r30
    15ba:	00 1c       	adc	r0, r0
    15bc:	ca f7       	brpl	.-14     	; 0x15b0 <__divsf3_pse+0x2c>
    15be:	2b d0       	rcall	.+86     	; 0x1616 <__divsf3_pse+0x92>
    15c0:	fe 2f       	mov	r31, r30
    15c2:	29 d0       	rcall	.+82     	; 0x1616 <__divsf3_pse+0x92>
    15c4:	66 0f       	add	r22, r22
    15c6:	77 1f       	adc	r23, r23
    15c8:	88 1f       	adc	r24, r24
    15ca:	bb 1f       	adc	r27, r27
    15cc:	26 17       	cp	r18, r22
    15ce:	37 07       	cpc	r19, r23
    15d0:	48 07       	cpc	r20, r24
    15d2:	ab 07       	cpc	r26, r27
    15d4:	b0 e8       	ldi	r27, 0x80	; 128
    15d6:	09 f0       	breq	.+2      	; 0x15da <__divsf3_pse+0x56>
    15d8:	bb 0b       	sbc	r27, r27
    15da:	80 2d       	mov	r24, r0
    15dc:	bf 01       	movw	r22, r30
    15de:	ff 27       	eor	r31, r31
    15e0:	93 58       	subi	r25, 0x83	; 131
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	3a f0       	brmi	.+14     	; 0x15f4 <__divsf3_pse+0x70>
    15e6:	9e 3f       	cpi	r25, 0xFE	; 254
    15e8:	51 05       	cpc	r21, r1
    15ea:	78 f0       	brcs	.+30     	; 0x160a <__divsf3_pse+0x86>
    15ec:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__fp_inf>
    15f0:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_szero>
    15f4:	5f 3f       	cpi	r21, 0xFF	; 255
    15f6:	e4 f3       	brlt	.-8      	; 0x15f0 <__divsf3_pse+0x6c>
    15f8:	98 3e       	cpi	r25, 0xE8	; 232
    15fa:	d4 f3       	brlt	.-12     	; 0x15f0 <__divsf3_pse+0x6c>
    15fc:	86 95       	lsr	r24
    15fe:	77 95       	ror	r23
    1600:	67 95       	ror	r22
    1602:	b7 95       	ror	r27
    1604:	f7 95       	ror	r31
    1606:	9f 5f       	subi	r25, 0xFF	; 255
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__divsf3_pse+0x78>
    160a:	88 0f       	add	r24, r24
    160c:	91 1d       	adc	r25, r1
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	97 f9       	bld	r25, 7
    1614:	08 95       	ret
    1616:	e1 e0       	ldi	r30, 0x01	; 1
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	bb 1f       	adc	r27, r27
    1620:	62 17       	cp	r22, r18
    1622:	73 07       	cpc	r23, r19
    1624:	84 07       	cpc	r24, r20
    1626:	ba 07       	cpc	r27, r26
    1628:	20 f0       	brcs	.+8      	; 0x1632 <__divsf3_pse+0xae>
    162a:	62 1b       	sub	r22, r18
    162c:	73 0b       	sbc	r23, r19
    162e:	84 0b       	sbc	r24, r20
    1630:	ba 0b       	sbc	r27, r26
    1632:	ee 1f       	adc	r30, r30
    1634:	88 f7       	brcc	.-30     	; 0x1618 <__divsf3_pse+0x94>
    1636:	e0 95       	com	r30
    1638:	08 95       	ret

0000163a <__fixunssfsi>:
    163a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__fp_splitA>
    163e:	88 f0       	brcs	.+34     	; 0x1662 <__fixunssfsi+0x28>
    1640:	9f 57       	subi	r25, 0x7F	; 127
    1642:	98 f0       	brcs	.+38     	; 0x166a <__fixunssfsi+0x30>
    1644:	b9 2f       	mov	r27, r25
    1646:	99 27       	eor	r25, r25
    1648:	b7 51       	subi	r27, 0x17	; 23
    164a:	b0 f0       	brcs	.+44     	; 0x1678 <__fixunssfsi+0x3e>
    164c:	e1 f0       	breq	.+56     	; 0x1686 <__fixunssfsi+0x4c>
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	1a f0       	brmi	.+6      	; 0x165e <__fixunssfsi+0x24>
    1658:	ba 95       	dec	r27
    165a:	c9 f7       	brne	.-14     	; 0x164e <__fixunssfsi+0x14>
    165c:	14 c0       	rjmp	.+40     	; 0x1686 <__fixunssfsi+0x4c>
    165e:	b1 30       	cpi	r27, 0x01	; 1
    1660:	91 f0       	breq	.+36     	; 0x1686 <__fixunssfsi+0x4c>
    1662:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_zero>
    1666:	b1 e0       	ldi	r27, 0x01	; 1
    1668:	08 95       	ret
    166a:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__fp_zero>
    166e:	67 2f       	mov	r22, r23
    1670:	78 2f       	mov	r23, r24
    1672:	88 27       	eor	r24, r24
    1674:	b8 5f       	subi	r27, 0xF8	; 248
    1676:	39 f0       	breq	.+14     	; 0x1686 <__fixunssfsi+0x4c>
    1678:	b9 3f       	cpi	r27, 0xF9	; 249
    167a:	cc f3       	brlt	.-14     	; 0x166e <__fixunssfsi+0x34>
    167c:	86 95       	lsr	r24
    167e:	77 95       	ror	r23
    1680:	67 95       	ror	r22
    1682:	b3 95       	inc	r27
    1684:	d9 f7       	brne	.-10     	; 0x167c <__fixunssfsi+0x42>
    1686:	3e f4       	brtc	.+14     	; 0x1696 <__fixunssfsi+0x5c>
    1688:	90 95       	com	r25
    168a:	80 95       	com	r24
    168c:	70 95       	com	r23
    168e:	61 95       	neg	r22
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	08 95       	ret

00001698 <__floatunsisf>:
    1698:	e8 94       	clt
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <__floatsisf+0x12>

0000169c <__floatsisf>:
    169c:	97 fb       	bst	r25, 7
    169e:	3e f4       	brtc	.+14     	; 0x16ae <__floatsisf+0x12>
    16a0:	90 95       	com	r25
    16a2:	80 95       	com	r24
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	99 23       	and	r25, r25
    16b0:	a9 f0       	breq	.+42     	; 0x16dc <__floatsisf+0x40>
    16b2:	f9 2f       	mov	r31, r25
    16b4:	96 e9       	ldi	r25, 0x96	; 150
    16b6:	bb 27       	eor	r27, r27
    16b8:	93 95       	inc	r25
    16ba:	f6 95       	lsr	r31
    16bc:	87 95       	ror	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b7 95       	ror	r27
    16c4:	f1 11       	cpse	r31, r1
    16c6:	f8 cf       	rjmp	.-16     	; 0x16b8 <__floatsisf+0x1c>
    16c8:	fa f4       	brpl	.+62     	; 0x1708 <__floatsisf+0x6c>
    16ca:	bb 0f       	add	r27, r27
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__floatsisf+0x36>
    16ce:	60 ff       	sbrs	r22, 0
    16d0:	1b c0       	rjmp	.+54     	; 0x1708 <__floatsisf+0x6c>
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <__floatsisf+0x6c>
    16dc:	88 23       	and	r24, r24
    16de:	11 f0       	breq	.+4      	; 0x16e4 <__floatsisf+0x48>
    16e0:	96 e9       	ldi	r25, 0x96	; 150
    16e2:	11 c0       	rjmp	.+34     	; 0x1706 <__floatsisf+0x6a>
    16e4:	77 23       	and	r23, r23
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <__floatsisf+0x54>
    16e8:	9e e8       	ldi	r25, 0x8E	; 142
    16ea:	87 2f       	mov	r24, r23
    16ec:	76 2f       	mov	r23, r22
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <__floatsisf+0x5e>
    16f0:	66 23       	and	r22, r22
    16f2:	71 f0       	breq	.+28     	; 0x1710 <__floatsisf+0x74>
    16f4:	96 e8       	ldi	r25, 0x86	; 134
    16f6:	86 2f       	mov	r24, r22
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	2a f0       	brmi	.+10     	; 0x1708 <__floatsisf+0x6c>
    16fe:	9a 95       	dec	r25
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	da f7       	brpl	.-10     	; 0x16fe <__floatsisf+0x62>
    1708:	88 0f       	add	r24, r24
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	97 f9       	bld	r25, 7
    1710:	08 95       	ret

00001712 <__fp_inf>:
    1712:	97 f9       	bld	r25, 7
    1714:	9f 67       	ori	r25, 0x7F	; 127
    1716:	80 e8       	ldi	r24, 0x80	; 128
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	08 95       	ret

0000171e <__fp_nan>:
    171e:	9f ef       	ldi	r25, 0xFF	; 255
    1720:	80 ec       	ldi	r24, 0xC0	; 192
    1722:	08 95       	ret

00001724 <__fp_pscA>:
    1724:	00 24       	eor	r0, r0
    1726:	0a 94       	dec	r0
    1728:	16 16       	cp	r1, r22
    172a:	17 06       	cpc	r1, r23
    172c:	18 06       	cpc	r1, r24
    172e:	09 06       	cpc	r0, r25
    1730:	08 95       	ret

00001732 <__fp_pscB>:
    1732:	00 24       	eor	r0, r0
    1734:	0a 94       	dec	r0
    1736:	12 16       	cp	r1, r18
    1738:	13 06       	cpc	r1, r19
    173a:	14 06       	cpc	r1, r20
    173c:	05 06       	cpc	r0, r21
    173e:	08 95       	ret

00001740 <__fp_round>:
    1740:	09 2e       	mov	r0, r25
    1742:	03 94       	inc	r0
    1744:	00 0c       	add	r0, r0
    1746:	11 f4       	brne	.+4      	; 0x174c <__fp_round+0xc>
    1748:	88 23       	and	r24, r24
    174a:	52 f0       	brmi	.+20     	; 0x1760 <__fp_round+0x20>
    174c:	bb 0f       	add	r27, r27
    174e:	40 f4       	brcc	.+16     	; 0x1760 <__fp_round+0x20>
    1750:	bf 2b       	or	r27, r31
    1752:	11 f4       	brne	.+4      	; 0x1758 <__fp_round+0x18>
    1754:	60 ff       	sbrs	r22, 0
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <__fp_round+0x20>
    1758:	6f 5f       	subi	r22, 0xFF	; 255
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	08 95       	ret

00001762 <__fp_split3>:
    1762:	57 fd       	sbrc	r21, 7
    1764:	90 58       	subi	r25, 0x80	; 128
    1766:	44 0f       	add	r20, r20
    1768:	55 1f       	adc	r21, r21
    176a:	59 f0       	breq	.+22     	; 0x1782 <__fp_splitA+0x10>
    176c:	5f 3f       	cpi	r21, 0xFF	; 255
    176e:	71 f0       	breq	.+28     	; 0x178c <__fp_splitA+0x1a>
    1770:	47 95       	ror	r20

00001772 <__fp_splitA>:
    1772:	88 0f       	add	r24, r24
    1774:	97 fb       	bst	r25, 7
    1776:	99 1f       	adc	r25, r25
    1778:	61 f0       	breq	.+24     	; 0x1792 <__fp_splitA+0x20>
    177a:	9f 3f       	cpi	r25, 0xFF	; 255
    177c:	79 f0       	breq	.+30     	; 0x179c <__fp_splitA+0x2a>
    177e:	87 95       	ror	r24
    1780:	08 95       	ret
    1782:	12 16       	cp	r1, r18
    1784:	13 06       	cpc	r1, r19
    1786:	14 06       	cpc	r1, r20
    1788:	55 1f       	adc	r21, r21
    178a:	f2 cf       	rjmp	.-28     	; 0x1770 <__fp_split3+0xe>
    178c:	46 95       	lsr	r20
    178e:	f1 df       	rcall	.-30     	; 0x1772 <__fp_splitA>
    1790:	08 c0       	rjmp	.+16     	; 0x17a2 <__fp_splitA+0x30>
    1792:	16 16       	cp	r1, r22
    1794:	17 06       	cpc	r1, r23
    1796:	18 06       	cpc	r1, r24
    1798:	99 1f       	adc	r25, r25
    179a:	f1 cf       	rjmp	.-30     	; 0x177e <__fp_splitA+0xc>
    179c:	86 95       	lsr	r24
    179e:	71 05       	cpc	r23, r1
    17a0:	61 05       	cpc	r22, r1
    17a2:	08 94       	sec
    17a4:	08 95       	ret

000017a6 <__fp_zero>:
    17a6:	e8 94       	clt

000017a8 <__fp_szero>:
    17a8:	bb 27       	eor	r27, r27
    17aa:	66 27       	eor	r22, r22
    17ac:	77 27       	eor	r23, r23
    17ae:	cb 01       	movw	r24, r22
    17b0:	97 f9       	bld	r25, 7
    17b2:	08 95       	ret

000017b4 <__mulsf3>:
    17b4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3x>
    17b8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__fp_round>
    17bc:	0e 94 92 0b 	call	0x1724	; 0x1724 <__fp_pscA>
    17c0:	38 f0       	brcs	.+14     	; 0x17d0 <__mulsf3+0x1c>
    17c2:	0e 94 99 0b 	call	0x1732	; 0x1732 <__fp_pscB>
    17c6:	20 f0       	brcs	.+8      	; 0x17d0 <__mulsf3+0x1c>
    17c8:	95 23       	and	r25, r21
    17ca:	11 f0       	breq	.+4      	; 0x17d0 <__mulsf3+0x1c>
    17cc:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__fp_inf>
    17d0:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_nan>
    17d4:	11 24       	eor	r1, r1
    17d6:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_szero>

000017da <__mulsf3x>:
    17da:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fp_split3>
    17de:	70 f3       	brcs	.-36     	; 0x17bc <__mulsf3+0x8>

000017e0 <__mulsf3_pse>:
    17e0:	95 9f       	mul	r25, r21
    17e2:	c1 f3       	breq	.-16     	; 0x17d4 <__mulsf3+0x20>
    17e4:	95 0f       	add	r25, r21
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	55 1f       	adc	r21, r21
    17ea:	62 9f       	mul	r22, r18
    17ec:	f0 01       	movw	r30, r0
    17ee:	72 9f       	mul	r23, r18
    17f0:	bb 27       	eor	r27, r27
    17f2:	f0 0d       	add	r31, r0
    17f4:	b1 1d       	adc	r27, r1
    17f6:	63 9f       	mul	r22, r19
    17f8:	aa 27       	eor	r26, r26
    17fa:	f0 0d       	add	r31, r0
    17fc:	b1 1d       	adc	r27, r1
    17fe:	aa 1f       	adc	r26, r26
    1800:	64 9f       	mul	r22, r20
    1802:	66 27       	eor	r22, r22
    1804:	b0 0d       	add	r27, r0
    1806:	a1 1d       	adc	r26, r1
    1808:	66 1f       	adc	r22, r22
    180a:	82 9f       	mul	r24, r18
    180c:	22 27       	eor	r18, r18
    180e:	b0 0d       	add	r27, r0
    1810:	a1 1d       	adc	r26, r1
    1812:	62 1f       	adc	r22, r18
    1814:	73 9f       	mul	r23, r19
    1816:	b0 0d       	add	r27, r0
    1818:	a1 1d       	adc	r26, r1
    181a:	62 1f       	adc	r22, r18
    181c:	83 9f       	mul	r24, r19
    181e:	a0 0d       	add	r26, r0
    1820:	61 1d       	adc	r22, r1
    1822:	22 1f       	adc	r18, r18
    1824:	74 9f       	mul	r23, r20
    1826:	33 27       	eor	r19, r19
    1828:	a0 0d       	add	r26, r0
    182a:	61 1d       	adc	r22, r1
    182c:	23 1f       	adc	r18, r19
    182e:	84 9f       	mul	r24, r20
    1830:	60 0d       	add	r22, r0
    1832:	21 1d       	adc	r18, r1
    1834:	82 2f       	mov	r24, r18
    1836:	76 2f       	mov	r23, r22
    1838:	6a 2f       	mov	r22, r26
    183a:	11 24       	eor	r1, r1
    183c:	9f 57       	subi	r25, 0x7F	; 127
    183e:	50 40       	sbci	r21, 0x00	; 0
    1840:	9a f0       	brmi	.+38     	; 0x1868 <__mulsf3_pse+0x88>
    1842:	f1 f0       	breq	.+60     	; 0x1880 <__mulsf3_pse+0xa0>
    1844:	88 23       	and	r24, r24
    1846:	4a f0       	brmi	.+18     	; 0x185a <__mulsf3_pse+0x7a>
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	bb 1f       	adc	r27, r27
    184e:	66 1f       	adc	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	91 50       	subi	r25, 0x01	; 1
    1856:	50 40       	sbci	r21, 0x00	; 0
    1858:	a9 f7       	brne	.-22     	; 0x1844 <__mulsf3_pse+0x64>
    185a:	9e 3f       	cpi	r25, 0xFE	; 254
    185c:	51 05       	cpc	r21, r1
    185e:	80 f0       	brcs	.+32     	; 0x1880 <__mulsf3_pse+0xa0>
    1860:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__fp_inf>
    1864:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__fp_szero>
    1868:	5f 3f       	cpi	r21, 0xFF	; 255
    186a:	e4 f3       	brlt	.-8      	; 0x1864 <__mulsf3_pse+0x84>
    186c:	98 3e       	cpi	r25, 0xE8	; 232
    186e:	d4 f3       	brlt	.-12     	; 0x1864 <__mulsf3_pse+0x84>
    1870:	86 95       	lsr	r24
    1872:	77 95       	ror	r23
    1874:	67 95       	ror	r22
    1876:	b7 95       	ror	r27
    1878:	f7 95       	ror	r31
    187a:	e7 95       	ror	r30
    187c:	9f 5f       	subi	r25, 0xFF	; 255
    187e:	c1 f7       	brne	.-16     	; 0x1870 <__mulsf3_pse+0x90>
    1880:	fe 2b       	or	r31, r30
    1882:	88 0f       	add	r24, r24
    1884:	91 1d       	adc	r25, r1
    1886:	96 95       	lsr	r25
    1888:	87 95       	ror	r24
    188a:	97 f9       	bld	r25, 7
    188c:	08 95       	ret

0000188e <__umulhisi3>:
    188e:	a2 9f       	mul	r26, r18
    1890:	b0 01       	movw	r22, r0
    1892:	b3 9f       	mul	r27, r19
    1894:	c0 01       	movw	r24, r0
    1896:	a3 9f       	mul	r26, r19
    1898:	70 0d       	add	r23, r0
    189a:	81 1d       	adc	r24, r1
    189c:	11 24       	eor	r1, r1
    189e:	91 1d       	adc	r25, r1
    18a0:	b2 9f       	mul	r27, r18
    18a2:	70 0d       	add	r23, r0
    18a4:	81 1d       	adc	r24, r1
    18a6:	11 24       	eor	r1, r1
    18a8:	91 1d       	adc	r25, r1
    18aa:	08 95       	ret

000018ac <memset>:
    18ac:	dc 01       	movw	r26, r24
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <memset+0x6>
    18b0:	6d 93       	st	X+, r22
    18b2:	41 50       	subi	r20, 0x01	; 1
    18b4:	50 40       	sbci	r21, 0x00	; 0
    18b6:	e0 f7       	brcc	.-8      	; 0x18b0 <memset+0x4>
    18b8:	08 95       	ret

000018ba <itoa>:
    18ba:	45 32       	cpi	r20, 0x25	; 37
    18bc:	51 05       	cpc	r21, r1
    18be:	20 f4       	brcc	.+8      	; 0x18c8 <itoa+0xe>
    18c0:	42 30       	cpi	r20, 0x02	; 2
    18c2:	10 f0       	brcs	.+4      	; 0x18c8 <itoa+0xe>
    18c4:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__itoa_ncheck>
    18c8:	fb 01       	movw	r30, r22
    18ca:	10 82       	st	Z, r1
    18cc:	cb 01       	movw	r24, r22
    18ce:	08 95       	ret

000018d0 <__itoa_ncheck>:
    18d0:	bb 27       	eor	r27, r27
    18d2:	4a 30       	cpi	r20, 0x0A	; 10
    18d4:	31 f4       	brne	.+12     	; 0x18e2 <__itoa_ncheck+0x12>
    18d6:	99 23       	and	r25, r25
    18d8:	22 f4       	brpl	.+8      	; 0x18e2 <__itoa_ncheck+0x12>
    18da:	bd e2       	ldi	r27, 0x2D	; 45
    18dc:	90 95       	com	r25
    18de:	81 95       	neg	r24
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__utoa_common>

000018e6 <__utoa_ncheck>:
    18e6:	bb 27       	eor	r27, r27

000018e8 <__utoa_common>:
    18e8:	fb 01       	movw	r30, r22
    18ea:	55 27       	eor	r21, r21
    18ec:	aa 27       	eor	r26, r26
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	aa 1f       	adc	r26, r26
    18f4:	a4 17       	cp	r26, r20
    18f6:	10 f0       	brcs	.+4      	; 0x18fc <__utoa_common+0x14>
    18f8:	a4 1b       	sub	r26, r20
    18fa:	83 95       	inc	r24
    18fc:	50 51       	subi	r21, 0x10	; 16
    18fe:	b9 f7       	brne	.-18     	; 0x18ee <__utoa_common+0x6>
    1900:	a0 5d       	subi	r26, 0xD0	; 208
    1902:	aa 33       	cpi	r26, 0x3A	; 58
    1904:	08 f0       	brcs	.+2      	; 0x1908 <__utoa_common+0x20>
    1906:	a9 5d       	subi	r26, 0xD9	; 217
    1908:	a1 93       	st	Z+, r26
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	79 f7       	brne	.-34     	; 0x18ec <__utoa_common+0x4>
    190e:	b1 11       	cpse	r27, r1
    1910:	b1 93       	st	Z+, r27
    1912:	11 92       	st	Z+, r1
    1914:	cb 01       	movw	r24, r22
    1916:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <strrev>

0000191a <strrev>:
    191a:	dc 01       	movw	r26, r24
    191c:	fc 01       	movw	r30, r24
    191e:	67 2f       	mov	r22, r23
    1920:	71 91       	ld	r23, Z+
    1922:	77 23       	and	r23, r23
    1924:	e1 f7       	brne	.-8      	; 0x191e <strrev+0x4>
    1926:	32 97       	sbiw	r30, 0x02	; 2
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <strrev+0x18>
    192a:	7c 91       	ld	r23, X
    192c:	6d 93       	st	X+, r22
    192e:	70 83       	st	Z, r23
    1930:	62 91       	ld	r22, -Z
    1932:	ae 17       	cp	r26, r30
    1934:	bf 07       	cpc	r27, r31
    1936:	c8 f3       	brcs	.-14     	; 0x192a <strrev+0x10>
    1938:	08 95       	ret

0000193a <_exit>:
    193a:	f8 94       	cli

0000193c <__stop_program>:
    193c:	ff cf       	rjmp	.-2      	; 0x193c <__stop_program>
