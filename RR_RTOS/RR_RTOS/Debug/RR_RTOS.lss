
RR_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  000027c0  00002854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000690  00800102  00800102  000028f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004dc3  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000149b  00000000  00000000  00007b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c9a  00000000  00000000  00008ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf0  00000000  00000000  0000bc94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019ac  00000000  00000000  0000c884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003edb  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0001210b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_7>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_9>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <vMotor_LED_Task+0x12>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__trampolines_end>:
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <__vector_9+0x22>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <main+0xfe>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__trampolines_end+0x1c>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__trampolines_end+0x60>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <LM35_getTemperature+0xc>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__trampolines_end+0xa8>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <DcMotor_Rotate+0x4>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e0 ec       	ldi	r30, 0xC0	; 192
     1e4:	f7 e2       	ldi	r31, 0x27	; 39
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a2 30       	cpi	r26, 0x02	; 2
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	27 e0       	ldi	r18, 0x07	; 7
     1f4:	a2 e0       	ldi	r26, 0x02	; 2
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a2 39       	cpi	r26, 0x92	; 146
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 0f 03 	call	0x61e	; 0x61e <main>
     206:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <_exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <DcMotor_Init>:
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
     20e:	41 e0       	ldi	r20, 0x01	; 1
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	61 e0       	ldi	r22, 0x01	; 1
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
     236:	08 95       	ret

00000238 <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     238:	cf 93       	push	r28
     23a:	c6 2f       	mov	r28, r22
	if(state == DC_MOTOR_CW)
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	69 f4       	brne	.+26     	; 0x25a <DcMotor_Rotate+0x22>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		PWM_Timer0_Start(speed);
     252:	8c 2f       	mov	r24, r28
     254:	0e 94 50 06 	call	0xca0	; 0xca0 <PWM_Timer0_Start>
     258:	1f c0       	rjmp	.+62     	; 0x298 <DcMotor_Rotate+0x60>
	}
	else if(state == DC_MOTOR_ACW)
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	71 f4       	brne	.+28     	; 0x27a <DcMotor_Rotate+0x42>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		PWM_Timer0_Start(speed);
     272:	8c 2f       	mov	r24, r28
     274:	0e 94 50 06 	call	0xca0	; 0xca0 <PWM_Timer0_Start>
     278:	0f c0       	rjmp	.+30     	; 0x298 <DcMotor_Rotate+0x60>
	}
	else if(state == DC_MOTOR_STOP)
     27a:	81 11       	cpse	r24, r1
     27c:	0d c0       	rjmp	.+26     	; 0x298 <DcMotor_Rotate+0x60>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		PWM_Timer0_Start(speed);
     292:	8c 2f       	mov	r24, r28
     294:	0e 94 50 06 	call	0xca0	; 0xca0 <PWM_Timer0_Start>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     29c:	cf 93       	push	r28
     29e:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	67 e0       	ldi	r22, 0x07	; 7
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2aa:	89 ef       	ldi	r24, 0xF9	; 249
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_sendCommand+0x12>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_sendCommand+0x18>
     2b4:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */


	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	66 e0       	ldi	r22, 0x06	; 6
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
     2c0:	89 ef       	ldi	r24, 0xF9	; 249
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_sendCommand+0x28>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_sendCommand+0x2e>
     2ca:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     2cc:	6c 2f       	mov	r22, r28
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <GPIO_writePort>
     2d4:	89 ef       	ldi	r24, 0xF9	; 249
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_sendCommand+0x3c>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_sendCommand+0x42>
     2de:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	66 e0       	ldi	r22, 0x06	; 6
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
     2ea:	89 ef       	ldi	r24, 0xF9	; 249
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_sendCommand+0x52>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_sendCommand+0x58>
     2f4:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     2fa:	41 e0       	ldi	r20, 0x01	; 1
     2fc:	67 e0       	ldi	r22, 0x07	; 7
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	66 e0       	ldi	r22, 0x06	; 6
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
     30e:	87 e8       	ldi	r24, 0x87	; 135
     310:	93 e1       	ldi	r25, 0x13	; 19
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <LCD_init+0x18>
     316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_init+0x1e>
     318:	00 00       	nop
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     31a:	6f ef       	ldi	r22, 0xFF	; 255
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	0e 94 2c 06 	call	0xc58	; 0xc58 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     322:	88 e3       	ldi	r24, 0x38	; 56
     324:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     328:	8c e0       	ldi	r24, 0x0C	; 12
     32a:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_sendCommand>
     334:	08 95       	ret

00000336 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     336:	cf 93       	push	r28
     338:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	67 e0       	ldi	r22, 0x07	; 7
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
     344:	89 ef       	ldi	r24, 0xF9	; 249
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_displayCharacter+0x12>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_displayCharacter+0x18>
     34e:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	66 e0       	ldi	r22, 0x06	; 6
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
     35a:	89 ef       	ldi	r24, 0xF9	; 249
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <LCD_displayCharacter+0x28>
     362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_displayCharacter+0x2e>
     364:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
     366:	6c 2f       	mov	r22, r28
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <GPIO_writePort>
     36e:	89 ef       	ldi	r24, 0xF9	; 249
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <LCD_displayCharacter+0x3c>
     376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_displayCharacter+0x42>
     378:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	66 e0       	ldi	r22, 0x06	; 6
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
     384:	89 ef       	ldi	r24, 0xF9	; 249
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_displayCharacter+0x52>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_displayCharacter+0x58>
     38e:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	8c 01       	movw	r16, r24
	uint8 i = 0;
     39c:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
     3a0:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_displayCharacter>
		i++;
     3a4:	cf 5f       	subi	r28, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     3a6:	f8 01       	movw	r30, r16
     3a8:	ec 0f       	add	r30, r28
     3aa:	f1 1d       	adc	r31, r1
     3ac:	80 81       	ld	r24, Z
     3ae:	81 11       	cpse	r24, r1
     3b0:	f7 cf       	rjmp	.-18     	; 0x3a0 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	31 f0       	breq	.+12     	; 0x3ca <LCD_moveCursor+0x10>
     3be:	70 f0       	brcs	.+28     	; 0x3dc <LCD_moveCursor+0x22>
     3c0:	82 30       	cpi	r24, 0x02	; 2
     3c2:	31 f0       	breq	.+12     	; 0x3d0 <LCD_moveCursor+0x16>
     3c4:	83 30       	cpi	r24, 0x03	; 3
     3c6:	39 f0       	breq	.+14     	; 0x3d6 <LCD_moveCursor+0x1c>
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <LCD_moveCursor+0x24>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
     3ca:	90 e4       	ldi	r25, 0x40	; 64
     3cc:	96 0f       	add	r25, r22
				break;
     3ce:	07 c0       	rjmp	.+14     	; 0x3de <LCD_moveCursor+0x24>
		case 2:
			lcd_memory_address=col+0x14;
     3d0:	94 e1       	ldi	r25, 0x14	; 20
     3d2:	96 0f       	add	r25, r22
				break;
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <LCD_moveCursor+0x24>
		case 3:
			lcd_memory_address=col+0x54;
     3d6:	94 e5       	ldi	r25, 0x54	; 84
     3d8:	96 0f       	add	r25, r22
				break;
     3da:	01 c0       	rjmp	.+2      	; 0x3de <LCD_moveCursor+0x24>
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
	{
		case 0:
			lcd_memory_address=col;
     3dc:	96 2f       	mov	r25, r22
		case 3:
			lcd_memory_address=col+0x54;
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     3de:	89 2f       	mov	r24, r25
     3e0:	80 68       	ori	r24, 0x80	; 128
     3e2:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_sendCommand>
     3e6:	08 95       	ret

000003e8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ea 01       	movw	r28, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     3ee:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	60 97       	sbiw	r28, 0x10	; 16
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     412:	4a e0       	ldi	r20, 0x0A	; 10
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	be 01       	movw	r22, r28
     418:	6f 5f       	subi	r22, 0xFF	; 255
     41a:	7f 4f       	sbci	r23, 0xFF	; 255
     41c:	0e 94 35 11 	call	0x226a	; 0x226a <itoa>
   LCD_displayString(buff); /* Display the string */
     420:	ce 01       	movw	r24, r28
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>
}
     428:	60 96       	adiw	r28, 0x10	; 16
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_sendCommand>
     440:	08 95       	ret

00000442 <LM35_getTemperature>:
	uint8 temp_value = 0;

	uint16 adc_value = 0;

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 34 05 	call	0xa68	; 0xa68 <ADC_readChannel>

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
     448:	9c 01       	movw	r18, r24
     44a:	a6 e9       	ldi	r26, 0x96	; 150
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__umulhisi3>
     452:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__floatunsisf>
     456:	2a e0       	ldi	r18, 0x0A	; 10
     458:	37 ed       	ldi	r19, 0xD7	; 215
     45a:	43 e2       	ldi	r20, 0x23	; 35
     45c:	50 e4       	ldi	r21, 0x40	; 64
     45e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__mulsf3>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 ed       	ldi	r19, 0xD0	; 208
     466:	4f eb       	ldi	r20, 0xBF	; 191
     468:	54 e4       	ldi	r21, 0x44	; 68
     46a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     46e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixunssfsi>
     472:	86 2f       	mov	r24, r22

	return temp_value;
}
     474:	08 95       	ret

00000476 <ResistanceCalculation>:

// sensor and load resistor forms a voltage divider. so using analog value and load value
// we will find sensor resistor.

float32 ResistanceCalculation(uint16 raw_adc)
{
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
  return ( ((float32)RL_VALUE*(ADC_MAXIMUM_VALUE-raw_adc)/raw_adc));   // we will find sensor resistor.
     484:	6f ef       	ldi	r22, 0xFF	; 255
     486:	73 e0       	ldi	r23, 0x03	; 3
     488:	68 1b       	sub	r22, r24
     48a:	79 0b       	sbc	r23, r25
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__floatunsisf>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e2       	ldi	r20, 0x20	; 32
     49a:	51 e4       	ldi	r21, 0x41	; 65
     49c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__mulsf3>
     4a0:	6b 01       	movw	r12, r22
     4a2:	7c 01       	movw	r14, r24
     4a4:	be 01       	movw	r22, r28
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__floatunsisf>
     4ae:	9b 01       	movw	r18, r22
     4b0:	ac 01       	movw	r20, r24
     4b2:	c7 01       	movw	r24, r14
     4b4:	b6 01       	movw	r22, r12
     4b6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <SensorCalibration>:

float32 SensorCalibration()
{
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	cf 93       	push	r28
  uint8 i;                                   // This function assumes that sensor is in clean air.
  float32 val=0;
     4d2:	c1 2c       	mov	r12, r1
     4d4:	d1 2c       	mov	r13, r1
     4d6:	76 01       	movw	r14, r12

  for (i=0;i<15;i++)
     4d8:	c0 e0       	ldi	r28, 0x00	; 0
     4da:	14 c0       	rjmp	.+40     	; 0x504 <SensorCalibration+0x3c>
  {                   //take multiple samples and calculate the average value
    val += ResistanceCalculation(ADC_readChannel(0));
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 34 05 	call	0xa68	; 0xa68 <ADC_readChannel>
     4e2:	0e 94 3b 02 	call	0x476	; 0x476 <ResistanceCalculation>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__addsf3>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	8f e4       	ldi	r24, 0x4F	; 79
     4f8:	93 ec       	ldi	r25, 0xC3	; 195
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <SensorCalibration+0x32>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <SensorCalibration+0x38>
     500:	00 00       	nop
float32 SensorCalibration()
{
  uint8 i;                                   // This function assumes that sensor is in clean air.
  float32 val=0;

  for (i=0;i<15;i++)
     502:	cf 5f       	subi	r28, 0xFF	; 255
     504:	cf 30       	cpi	r28, 0x0F	; 15
     506:	50 f3       	brcs	.-44     	; 0x4dc <SensorCalibration+0x14>
  {                   //take multiple samples and calculate the average value
    val += ResistanceCalculation(ADC_readChannel(0));
    _delay_ms(200);
  }

  val = val/15;
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e7       	ldi	r20, 0x70	; 112
     50e:	51 e4       	ldi	r21, 0x41	; 65
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
  val = val/RO_CLEAN_AIR_FACTOR;           //divided by RO_CLEAN_AIR_FACTOR yields the Ro according to the chart in the datasheet
     518:	2e ea       	ldi	r18, 0xAE	; 174
     51a:	37 e4       	ldi	r19, 0x47	; 71
     51c:	4d e1       	ldi	r20, 0x1D	; 29
     51e:	51 e4       	ldi	r21, 0x41	; 65
     520:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>

  return val;
}
     524:	cf 91       	pop	r28
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	08 95       	ret

00000530 <ReadSensor>:

float32 ReadSensor()
{
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	cf 93       	push	r28
  uint8 i;
  float32 rs=0;
     53a:	c1 2c       	mov	r12, r1
     53c:	d1 2c       	mov	r13, r1
     53e:	76 01       	movw	r14, r12

  for (i=0;i<5;i++)
     540:	c0 e0       	ldi	r28, 0x00	; 0
     542:	14 c0       	rjmp	.+40     	; 0x56c <ReadSensor+0x3c>
  {                                 // take multiple readings and average it.
    rs += ResistanceCalculation(ADC_readChannel(0));   // rs changes according to gas concentration.
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 34 05 	call	0xa68	; 0xa68 <ADC_readChannel>
     54a:	0e 94 3b 02 	call	0x476	; 0x476 <ResistanceCalculation>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__addsf3>
     55a:	6b 01       	movw	r12, r22
     55c:	7c 01       	movw	r14, r24
     55e:	83 ed       	ldi	r24, 0xD3	; 211
     560:	90 e3       	ldi	r25, 0x30	; 48
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <ReadSensor+0x32>
     566:	00 c0       	rjmp	.+0      	; 0x568 <ReadSensor+0x38>
     568:	00 00       	nop
float32 ReadSensor()
{
  uint8 i;
  float32 rs=0;

  for (i=0;i<5;i++)
     56a:	cf 5f       	subi	r28, 0xFF	; 255
     56c:	c5 30       	cpi	r28, 0x05	; 5
     56e:	50 f3       	brcs	.-44     	; 0x544 <ReadSensor+0x14>
  {                                 // take multiple readings and average it.
    rs += ResistanceCalculation(ADC_readChannel(0));   // rs changes according to gas concentration.
    _delay_ms(50);
  }

  rs = rs/5;
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 ea       	ldi	r20, 0xA0	; 160
     576:	50 e4       	ldi	r21, 0x40	; 64
     578:	c7 01       	movw	r24, r14
     57a:	b6 01       	movw	r22, r12
     57c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
  return rs;
}
     580:	cf 91       	pop	r28
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	08 95       	ret

0000058c <GetPercentage>:
//Using slope,ratio(y2) and another point(x1,y1) on line we will find
// gas concentration(x2) using x2 = [((y2-y1)/slope)+x1]
// as in curves are on logarithmic coordinate, power of 10 is taken to convert result to non-logarithmic.

uint16  GetPercentage(float32 rs_ro_ratio, float32 *curve)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ea 01       	movw	r28, r20
	uint8 x=0;
	x = ( ((log(rs_ro_ratio) - curve[1]) /curve[2]) + curve[0] );
     592:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <log>
     596:	2c 81       	ldd	r18, Y+4	; 0x04
     598:	3d 81       	ldd	r19, Y+5	; 0x05
     59a:	4e 81       	ldd	r20, Y+6	; 0x06
     59c:	5f 81       	ldd	r21, Y+7	; 0x07
     59e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__subsf3>
     5a2:	28 85       	ldd	r18, Y+8	; 0x08
     5a4:	39 85       	ldd	r19, Y+9	; 0x09
     5a6:	4a 85       	ldd	r20, Y+10	; 0x0a
     5a8:	5b 85       	ldd	r21, Y+11	; 0x0b
     5aa:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     5ae:	28 81       	ld	r18, Y
     5b0:	39 81       	ldd	r19, Y+1	; 0x01
     5b2:	4a 81       	ldd	r20, Y+2	; 0x02
     5b4:	5b 81       	ldd	r21, Y+3	; 0x03
     5b6:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__addsf3>
     5ba:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixunssfsi>

	return pow(10,x);
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__floatunsisf>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e2       	ldi	r24, 0x20	; 32
     5d2:	91 e4       	ldi	r25, 0x41	; 65
     5d4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <pow>
     5d8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixunssfsi>
}
     5dc:	cb 01       	movw	r24, r22
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <GetGasPercentage>:
  return rs;
}

uint16 GetGasPercentage(float32 rs_ro_ratio, uint16 gas_id)
{
  if ( gas_id == LPG ) {
     5e4:	41 15       	cp	r20, r1
     5e6:	51 05       	cpc	r21, r1
     5e8:	29 f4       	brne	.+10     	; 0x5f4 <GetGasPercentage+0x10>
     return GetPercentage(rs_ro_ratio,LPGCurve);
     5ea:	4c e6       	ldi	r20, 0x6C	; 108
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	0e 94 c6 02 	call	0x58c	; 0x58c <GetPercentage>
     5f2:	08 95       	ret
  }
  else if( gas_id == SMOKE ) {
     5f4:	41 30       	cpi	r20, 0x01	; 1
     5f6:	51 05       	cpc	r21, r1
     5f8:	29 f4       	brne	.+10     	; 0x604 <GetGasPercentage+0x20>
     return GetPercentage(rs_ro_ratio,SmokeCurve);
     5fa:	40 e6       	ldi	r20, 0x60	; 96
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	0e 94 c6 02 	call	0x58c	; 0x58c <GetPercentage>
     602:	08 95       	ret
  }
  return 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
}
     608:	08 95       	ret

0000060a <Timer_Init>:
}


 void Timer_Init(void)
 {
	 TCCR1A = 0;
     60a:	1f bc       	out	0x2f, r1	; 47
	 
	 TCCR1B  |= ( 1<< CS10);
     60c:	8e b5       	in	r24, 0x2e	; 46
     60e:	81 60       	ori	r24, 0x01	; 1
     610:	8e bd       	out	0x2e, r24	; 46
	 TIMSK |= (1 << TOIE1);
     612:	89 b7       	in	r24, 0x39	; 57
     614:	84 60       	ori	r24, 0x04	; 4
     616:	89 bf       	out	0x39, r24	; 57
	 TCNT1= 0;
     618:	1d bc       	out	0x2d, r1	; 45
     61a:	1c bc       	out	0x2c, r1	; 44
     61c:	08 95       	ret

0000061e <main>:
Fan_State Fan = FAN_OFF;

BaseType_t status = pdFAIL;

void main(void)
{
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	00 d0       	rcall	.+0      	; 0x62a <main+0xc>
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
	
	g_counter=0;
     62e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <g_counter+0x1>
     632:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_counter>
	Timer_Init();
     636:	0e 94 05 03 	call	0x60a	; 0x60a <Timer_Init>
		

	ADC_ConfigType ADC_Configurations = {INTERNAL_VOLT,F_CPU_8};
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	89 83       	std	Y+1, r24	; 0x01
     63e:	8a 83       	std	Y+2, r24	; 0x02

	LCD_init();
     640:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_init>
	DcMotor_Init();
     644:	0e 94 07 01 	call	0x20e	; 0x20e <DcMotor_Init>
	ADC_init(&ADC_Configurations);					/* Initialize ADC driver */
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	0e 94 23 05 	call	0xa46	; 0xa46 <ADC_init>

	/* Enable interrupts by setting I-bit */
	SREG  |= (1<<7);
     650:	8f b7       	in	r24, 0x3f	; 63
     652:	80 68       	ori	r24, 0x80	; 128
     654:	8f bf       	out	0x3f, r24	; 63

	GPIO_setupPinDirection(PORTC_ID,PIN4_ID,PIN_OUTPUT);	// for Proteus config only
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	64 e0       	ldi	r22, 0x04	; 4
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN5_ID,PIN_OUTPUT);	// for Proteus config only
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	65 e0       	ldi	r22, 0x05	; 5
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN6_ID,PIN_OUTPUT);	// for Proteus config only
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN7_ID,PIN_OUTPUT);	// for Proteus config only
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	67 e0       	ldi	r22, 0x07	; 7
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>

	status = xTaskCreate(vLcd_Task, "Lcd_Task", 100, NULL, LCD_Priority, &Lcd_Handler); //180
     67e:	0f 2e       	mov	r0, r31
     680:	f0 e9       	ldi	r31, 0x90	; 144
     682:	ef 2e       	mov	r14, r31
     684:	f7 e0       	ldi	r31, 0x07	; 7
     686:	ff 2e       	mov	r15, r31
     688:	f0 2d       	mov	r31, r0
     68a:	02 e0       	ldi	r16, 0x02	; 2
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	44 e6       	ldi	r20, 0x64	; 100
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	69 e7       	ldi	r22, 0x79	; 121
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	82 e9       	ldi	r24, 0x92	; 146
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
     6a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	configASSERT(status == pdPASS);								// if status=0 enter infinity loop

	status = xTaskCreate(vTemp_Task, "Temp_Task", 100, NULL, TEMP_Priority, &Temp_Sensor_Handeler);
     6a4:	0f 2e       	mov	r0, r31
     6a6:	fa e8       	ldi	r31, 0x8A	; 138
     6a8:	ef 2e       	mov	r14, r31
     6aa:	f7 e0       	ldi	r31, 0x07	; 7
     6ac:	ff 2e       	mov	r15, r31
     6ae:	f0 2d       	mov	r31, r0
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	44 e6       	ldi	r20, 0x64	; 100
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	62 e8       	ldi	r22, 0x82	; 130
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	8a e1       	ldi	r24, 0x1A	; 26
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
     6c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	configASSERT(status == pdPASS);


	status = xTaskCreate(vMotor_LED_Task, "Motor_LED_Task", 100, NULL,MOTOR_LED_Priority, &Dc_motor_Handler);
     6c8:	0f 2e       	mov	r0, r31
     6ca:	fc e8       	ldi	r31, 0x8C	; 140
     6cc:	ef 2e       	mov	r14, r31
     6ce:	f7 e0       	ldi	r31, 0x07	; 7
     6d0:	ff 2e       	mov	r15, r31
     6d2:	f0 2d       	mov	r31, r0
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	44 e6       	ldi	r20, 0x64	; 100
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	6c e8       	ldi	r22, 0x8C	; 140
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	8b e4       	ldi	r24, 0x4B	; 75
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
     6e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	configASSERT(status == pdPASS); 							// if status=0 enter infinity loop
	
	status = xTaskCreate(vGas_Task, "Gas_Task", 100, NULL, Gas_Priority, &Gas_Sensor_Handler);
     6ec:	0f 2e       	mov	r0, r31
     6ee:	fe e8       	ldi	r31, 0x8E	; 142
     6f0:	ef 2e       	mov	r14, r31
     6f2:	f7 e0       	ldi	r31, 0x07	; 7
     6f4:	ff 2e       	mov	r15, r31
     6f6:	f0 2d       	mov	r31, r0
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	44 e6       	ldi	r20, 0x64	; 100
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	6b e9       	ldi	r22, 0x9B	; 155
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	85 ea       	ldi	r24, 0xA5	; 165
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
     70c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	configASSERT(status == pdPASS);								// if status=0 enter infinity loop

	vTaskStartScheduler();
     710:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskStartScheduler>

}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	08 95       	ret

00000724 <vLcd_Task>:

void vLcd_Task(void *pvparamters)
{
	GPIO_writePin(PORTC_ID, PIN4_ID , LOGIC_HIGH);			// for Proteus config only
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	64 e0       	ldi	r22, 0x04	; 4
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
	
	
	g_counter=0;
     72e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <g_counter+0x1>
     732:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_counter>
	Timer_Init();
     736:	0e 94 05 03 	call	0x60a	; 0x60a <Timer_Init>
	
	g_start_t1 = xTaskGetTickCount();
     73a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     73e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_start_t1+0x1>
     742:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_start_t1>
	LCD_clearScreen();
     746:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_clearScreen>
	while(1)
	{
		g_start_t1 = xTaskGetTickCount();
     74a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     74e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_start_t1+0x1>
     752:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_start_t1>
		
		if(Fan == FAN_OFF)
     756:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Fan>
     75a:	81 11       	cpse	r24, r1
     75c:	08 c0       	rjmp	.+16     	; 0x76e <vLcd_Task+0x4a>
		{
			LCD_moveCursor(0,0);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
			LCD_displayString("FAN is OFF");
     764:	84 ea       	ldi	r24, 0xA4	; 164
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>
     76c:	13 c0       	rjmp	.+38     	; 0x794 <vLcd_Task+0x70>
		}
		else if(Fan == FAN_ON_CLK)
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	49 f4       	brne	.+18     	; 0x784 <vLcd_Task+0x60>
		{
			LCD_moveCursor(0,0);
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
			LCD_displayString("FAN is ON CLK ");
     77a:	8f ea       	ldi	r24, 0xAF	; 175
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>
     782:	08 c0       	rjmp	.+16     	; 0x794 <vLcd_Task+0x70>
		}
		else
		{
			LCD_moveCursor(0,0);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
			LCD_displayString("FAN is ON ACLK ");
     78c:	8e eb       	ldi	r24, 0xBE	; 190
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>
		}

		LCD_moveCursor(1,0);
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
		LCD_displayString("Temp =    C");
     79c:	8e ec       	ldi	r24, 0xCE	; 206
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>

		LCD_moveCursor(1,7);
     7a4:	67 e0       	ldi	r22, 0x07	; 7
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
		if(G_temp >= 100)
     7ac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <G_temp>
     7b0:	84 36       	cpi	r24, 0x64	; 100
     7b2:	20 f0       	brcs	.+8      	; 0x7bc <vLcd_Task+0x98>
		{
			LCD_intgerToString(G_temp);
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_intgerToString>
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <vLcd_Task+0xa4>
		}
		else
		{
			LCD_intgerToString(G_temp);
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
     7c2:	80 e2       	ldi	r24, 0x20	; 32
     7c4:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_displayCharacter>
		}
		
		LCD_displayStringRowColumn(2,0,"LPG:         ppm");
     7c8:	4a ed       	ldi	r20, 0xDA	; 218
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_displayStringRowColumn>
		LCD_moveCursor(2,5);
     7d4:	65 e0       	ldi	r22, 0x05	; 5
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
		LCD_displayString(G_lpg);
     7dc:	84 e1       	ldi	r24, 0x14	; 20
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>

		LCD_displayStringRowColumn(3,0,"SMOKE:       ppm");
     7e4:	4b ee       	ldi	r20, 0xEB	; 235
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_displayStringRowColumn>
		LCD_moveCursor(3,7);
     7f0:	67 e0       	ldi	r22, 0x07	; 7
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_moveCursor>
		LCD_displayString(G_smoke);
     7f8:	84 e0       	ldi	r24, 0x04	; 4
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_displayString>

		GPIO_writePin(PORTC_ID, PIN4_ID , LOGIC_LOW);					// for Proteus config only
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	64 e0       	ldi	r22, 0x04	; 4
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		g_end_t1 = xTaskGetTickCount();
     80a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     80e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <g_end_t1+0x1>
     812:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_end_t1>
		
		g_Task1_duartion = g_end_t1 - g_start_t1 ;
     816:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <g_start_t1>
     81a:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <g_start_t1+0x1>
     81e:	82 1b       	sub	r24, r18
     820:	93 0b       	sbc	r25, r19
     822:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <g_Task1_duartion+0x1>
     826:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <g_Task1_duartion>

		vTaskDelay(pdMS_TO_TICKS(2000));
     82a:	84 e1       	ldi	r24, 0x14	; 20
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
	}
     832:	8b cf       	rjmp	.-234    	; 0x74a <vLcd_Task+0x26>

00000834 <vTemp_Task>:
}

void vTemp_Task(void *pvparamters)
{
	
	g_counter=0;
     834:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <g_counter+0x1>
     838:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_counter>
	Timer_Init();
     83c:	0e 94 05 03 	call	0x60a	; 0x60a <Timer_Init>
	
	
	while(1)
	{
		g_start_t2 = xTaskGetTickCount();
     840:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     844:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <g_start_t2+0x1>
     848:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_start_t2>
		GPIO_writePin(PORTC_ID, PIN5_ID , LOGIC_HIGH);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	65 e0       	ldi	r22, 0x05	; 5
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		G_temp=0;
     856:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <G_temp>
		G_temp = LM35_getTemperature();
     85a:	0e 94 21 02 	call	0x442	; 0x442 <LM35_getTemperature>
     85e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <G_temp>

		GPIO_writePin(PORTC_ID, PIN5_ID , LOGIC_LOW);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		g_end_t2 = xTaskGetTickCount();
     86c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     870:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <g_end_t2+0x1>
     874:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <g_end_t2>

		g_Task2_duartion = g_end_t2 - g_start_t2 ;
     878:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <g_start_t2>
     87c:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <g_start_t2+0x1>
     880:	82 1b       	sub	r24, r18
     882:	93 0b       	sbc	r25, r19
     884:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <g_Task2_duartion+0x1>
     888:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_Task2_duartion>

		vTaskDelay(pdMS_TO_TICKS(1000));
     88c:	8a e0       	ldi	r24, 0x0A	; 10
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
     894:	d5 cf       	rjmp	.-86     	; 0x840 <vTemp_Task+0xc>

00000896 <vMotor_LED_Task>:
}

void vMotor_LED_Task(void *pvparamters)
{
	
	g_counter=0;
     896:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <g_counter+0x1>
     89a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_counter>
	Timer_Init();
     89e:	0e 94 05 03 	call	0x60a	; 0x60a <Timer_Init>
	
	
	while(1)
	{
		g_start_t3 = xTaskGetTickCount();
     8a2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     8a6:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <g_start_t3+0x1>
     8aa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_start_t3>
		GPIO_writePin(PORTC_ID, PIN6_ID , LOGIC_HIGH);
     8ae:	41 e0       	ldi	r20, 0x01	; 1
     8b0:	66 e0       	ldi	r22, 0x06	; 6
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		if(G_lpg >= 2000 || G_smoke >= 400)
     8b8:	84 e1       	ldi	r24, 0x14	; 20
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	80 3d       	cpi	r24, 0xD0	; 208
     8be:	97 40       	sbci	r25, 0x07	; 7
     8c0:	28 f4       	brcc	.+10     	; 0x8cc <vMotor_LED_Task+0x36>
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	80 39       	cpi	r24, 0x90	; 144
     8c8:	91 40       	sbci	r25, 0x01	; 1
     8ca:	38 f0       	brcs	.+14     	; 0x8da <vMotor_LED_Task+0x44>
		{
			Fan = FAN_ON_ACLK;
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Fan>
			DcMotor_Rotate(DC_MOTOR_ACW,50); /* Rotates the motor with 50% from its speed */
     8d2:	62 e3       	ldi	r22, 0x32	; 50
     8d4:	0e 94 1c 01 	call	0x238	; 0x238 <DcMotor_Rotate>
			g_counter_S++;
		}

		vTaskDelay(pdMS_TO_TICKS(250));
	}
}
     8d8:	08 95       	ret
		{
			Fan = FAN_ON_ACLK;
			DcMotor_Rotate(DC_MOTOR_ACW,50); /* Rotates the motor with 50% from its speed */
			break;
		}
		else if(G_temp >= 30)
     8da:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <G_temp>
     8de:	8e 31       	cpi	r24, 0x1E	; 30
     8e0:	38 f0       	brcs	.+14     	; 0x8f0 <vMotor_LED_Task+0x5a>
		{
			Fan = FAN_ON_CLK;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Fan>
			DcMotor_Rotate(DC_MOTOR_CW,50); /* Rotates the motor with 50% from its speed */
     8e8:	62 e3       	ldi	r22, 0x32	; 50
     8ea:	0e 94 1c 01 	call	0x238	; 0x238 <DcMotor_Rotate>
     8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vMotor_LED_Task+0x66>
		}
		else
		{
			Fan = FAN_OFF;
     8f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Fan>
			DcMotor_Rotate(DC_MOTOR_STOP,0); /* Stop the motor */
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0e 94 1c 01 	call	0x238	; 0x238 <DcMotor_Rotate>
		}
		GPIO_writePin(PORTC_ID, PIN6_ID , LOGIC_LOW);
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	66 e0       	ldi	r22, 0x06	; 6
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		g_end_t3 = xTaskGetTickCount();
     906:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     90a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <g_end_t3+0x1>
     90e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <g_end_t3>
		
 		g_Task3_duartion = g_end_t3 - g_start_t3 ;
     912:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <g_start_t3>
     916:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <g_start_t3+0x1>
     91a:	ac 01       	movw	r20, r24
     91c:	42 1b       	sub	r20, r18
     91e:	53 0b       	sbc	r21, r19
     920:	50 93 38 01 	sts	0x0138, r21	; 0x800138 <g_Task3_duartion+0x1>
     924:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <g_Task3_duartion>

		if (g_end_t3>=64000)
     928:	81 15       	cp	r24, r1
     92a:	9a 4f       	sbci	r25, 0xFA	; 250
     92c:	48 f0       	brcs	.+18     	; 0x940 <vMotor_LED_Task+0xaa>
		{
			g_counter_S++;
     92e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <g_counter_S>
     932:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <g_counter_S+0x1>
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <g_counter_S+0x1>
     93c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_counter_S>
		}

		vTaskDelay(pdMS_TO_TICKS(250));
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
	}
     948:	ac cf       	rjmp	.-168    	; 0x8a2 <vMotor_LED_Task+0xc>

0000094a <vGas_Task>:
}

void vGas_Task (void *pvparamters)
{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	60 97       	sbiw	r28, 0x10	; 16
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
	
	g_counter=0;
     95e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <g_counter+0x1>
     962:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_counter>
	Timer_Init();
     966:	0e 94 05 03 	call	0x60a	; 0x60a <Timer_Init>
	
		
	g_start_t4 = xTaskGetTickCount();
     96a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     96e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <g_start_t4+0x1>
     972:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <g_start_t4>

	GPIO_writePin(PORTC_ID, PIN7_ID , LOGIC_HIGH);					// for Proteus config only
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	67 e0       	ldi	r22, 0x07	; 7
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>
	

	uint8 Res[16];
	float32 Ro=10,rs_ro;
	
	Ro = SensorCalibration();                       //Please make sure the sensor is in clean air when you perform the calibration
     980:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SensorCalibration>
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
	//Ro = 500;
	dtostrf(Ro, 6, 2, Res);                         // floating to string(Floating pt value and to be converted,min. width of the output,no.of digits after the pt, store the output string)
     988:	8e 01       	movw	r16, r28
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	22 e0       	ldi	r18, 0x02	; 2
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	46 e0       	ldi	r20, 0x06	; 6
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	0e 94 0e 11 	call	0x221c	; 0x221c <dtostrf>
	
	while(1)
	{
		itoa(GetGasPercentage(ReadSensor()/Ro,LPG), G_lpg, 10);
     99a:	0e 94 98 02 	call	0x530	; 0x530 <ReadSensor>
     99e:	a7 01       	movw	r20, r14
     9a0:	96 01       	movw	r18, r12
     9a2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <GetGasPercentage>
     9ae:	4a e0       	ldi	r20, 0x0A	; 10
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	64 e1       	ldi	r22, 0x14	; 20
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	0e 94 35 11 	call	0x226a	; 0x226a <itoa>
		itoa(GetGasPercentage(ReadSensor()/Ro,SMOKE), G_smoke, 10);
     9ba:	0e 94 98 02 	call	0x530	; 0x530 <ReadSensor>
     9be:	a7 01       	movw	r20, r14
     9c0:	96 01       	movw	r18, r12
     9c2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <GetGasPercentage>
     9ce:	4a e0       	ldi	r20, 0x0A	; 10
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	64 e0       	ldi	r22, 0x04	; 4
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	0e 94 35 11 	call	0x226a	; 0x226a <itoa>
		
		GPIO_writePin(PORTC_ID, PIN7_ID , LOGIC_LOW);					// for Proteus config only
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	67 e0       	ldi	r22, 0x07	; 7
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	0e 94 b9 05 	call	0xb72	; 0xb72 <GPIO_writePin>

		g_end_t4 = xTaskGetTickCount();
     9e4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <xTaskGetTickCount>
     9e8:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <g_end_t4+0x1>
     9ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <g_end_t4>

		g_Task4_duartion = g_end_t4 - g_start_t4 ;
     9f0:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <g_start_t4>
     9f4:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <g_start_t4+0x1>
     9f8:	82 1b       	sub	r24, r18
     9fa:	93 0b       	sbc	r25, r19
     9fc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <g_Task4_duartion+0x1>
     a00:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_Task4_duartion>

		vTaskDelay(pdMS_TO_TICKS(500));
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
     a0c:	c6 cf       	rjmp	.-116    	; 0x99a <vGas_Task+0x50>

00000a0e <__vector_9>:
	 TCNT1= 0;

 }

 ISR(TIMER1_OVF_vect)
 {
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
	 TCNT1= 0;
     a1c:	1d bc       	out	0x2d, r1	; 45
     a1e:	1c bc       	out	0x2c, r1	; 44
	 g_counter += 1;
     a20:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <g_counter>
     a24:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <g_counter+0x1>
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <g_counter+0x1>
     a2e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <g_counter>
	 TIFR |= (1 << TOV1);
     a32:	88 b7       	in	r24, 0x38	; 56
     a34:	84 60       	ori	r24, 0x04	; 4
     a36:	88 bf       	out	0x38, r24	; 56
 }
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     a46:	fc 01       	movw	r30, r24
	/* ADMUX Register Bits Description:
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 * REF1:0  = 00 Clear these two bits before setup the required reference voltage value
	 */
	ADMUX = 0;
     a48:	17 b8       	out	0x07, r1	; 7

	/* Setup the reference voltage value inside the REFS1 and REFS0 bits*/
	ADMUX |= (Config_Ptr->ref_volt << 6);
     a4a:	87 b1       	in	r24, 0x07	; 7
     a4c:	90 81       	ld	r25, Z
     a4e:	40 e4       	ldi	r20, 0x40	; 64
     a50:	94 9f       	mul	r25, r20
     a52:	90 01       	movw	r18, r0
     a54:	11 24       	eor	r1, r1
     a56:	28 2b       	or	r18, r24
     a58:	27 b9       	out	0x07, r18	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable the AUTO trigger
	 * ADPS2:0 = 000 Clear these three bits before setup the required prescaler value
	 */
	ADCSRA = (1<<ADEN);
     a5a:	80 e8       	ldi	r24, 0x80	; 128
     a5c:	86 b9       	out	0x06, r24	; 6

	/* Setup the prescaler value inside the ADPS2, ADPS1 and ADPS0 bits*/
	ADCSRA |= Config_Ptr->prescaler;
     a5e:	96 b1       	in	r25, 0x06	; 6
     a60:	81 81       	ldd	r24, Z+1	; 0x01
     a62:	89 2b       	or	r24, r25
     a64:	86 b9       	out	0x06, r24	; 6
     a66:	08 95       	ret

00000a68 <ADC_readChannel>:
}

uint16 ADC_readChannel(uint8 channel_num)
{
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     a68:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     a6a:	97 b1       	in	r25, 0x07	; 7
     a6c:	90 7e       	andi	r25, 0xE0	; 224
     a6e:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     a70:	97 b1       	in	r25, 0x07	; 7
     a72:	89 2b       	or	r24, r25
     a74:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     a76:	86 b1       	in	r24, 0x06	; 6
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     a7c:	34 9b       	sbis	0x06, 4	; 6
     a7e:	fe cf       	rjmp	.-4      	; 0xa7c <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     a80:	86 b1       	in	r24, 0x06	; 6
     a82:	80 61       	ori	r24, 0x10	; 16
     a84:	86 b9       	out	0x06, r24	; 6
	return ADC; /* Read the digital value from the data register */
     a86:	84 b1       	in	r24, 0x04	; 4
     a88:	95 b1       	in	r25, 0x05	; 5
}
     a8a:	08 95       	ret

00000a8c <GPIO_setupPinDirection>:
			break;
		}
	}

	return pin_value;
}
     a8c:	68 30       	cpi	r22, 0x08	; 8
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <GPIO_setupPinDirection+0x6>
     a90:	6f c0       	rjmp	.+222    	; 0xb70 <GPIO_setupPinDirection+0xe4>
     a92:	84 30       	cpi	r24, 0x04	; 4
     a94:	08 f0       	brcs	.+2      	; 0xa98 <GPIO_setupPinDirection+0xc>
     a96:	6c c0       	rjmp	.+216    	; 0xb70 <GPIO_setupPinDirection+0xe4>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	01 f1       	breq	.+64     	; 0xadc <GPIO_setupPinDirection+0x50>
     a9c:	30 f0       	brcs	.+12     	; 0xaaa <GPIO_setupPinDirection+0x1e>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	b1 f1       	breq	.+108    	; 0xb0e <GPIO_setupPinDirection+0x82>
     aa2:	83 30       	cpi	r24, 0x03	; 3
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <GPIO_setupPinDirection+0x1c>
     aa6:	4c c0       	rjmp	.+152    	; 0xb40 <GPIO_setupPinDirection+0xb4>
     aa8:	08 95       	ret
     aaa:	41 30       	cpi	r20, 0x01	; 1
     aac:	59 f4       	brne	.+22     	; 0xac4 <GPIO_setupPinDirection+0x38>
     aae:	2a b3       	in	r18, 0x1a	; 26
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <GPIO_setupPinDirection+0x2e>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	6a 95       	dec	r22
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <GPIO_setupPinDirection+0x2a>
     abe:	82 2b       	or	r24, r18
     ac0:	8a bb       	out	0x1a, r24	; 26
     ac2:	08 95       	ret
     ac4:	2a b3       	in	r18, 0x1a	; 26
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <GPIO_setupPinDirection+0x44>
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	6a 95       	dec	r22
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <GPIO_setupPinDirection+0x40>
     ad4:	80 95       	com	r24
     ad6:	82 23       	and	r24, r18
     ad8:	8a bb       	out	0x1a, r24	; 26
     ada:	08 95       	ret
     adc:	41 30       	cpi	r20, 0x01	; 1
     ade:	59 f4       	brne	.+22     	; 0xaf6 <GPIO_setupPinDirection+0x6a>
     ae0:	27 b3       	in	r18, 0x17	; 23
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <GPIO_setupPinDirection+0x60>
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	6a 95       	dec	r22
     aee:	e2 f7       	brpl	.-8      	; 0xae8 <GPIO_setupPinDirection+0x5c>
     af0:	82 2b       	or	r24, r18
     af2:	87 bb       	out	0x17, r24	; 23
     af4:	08 95       	ret
     af6:	27 b3       	in	r18, 0x17	; 23
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <GPIO_setupPinDirection+0x76>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	6a 95       	dec	r22
     b04:	e2 f7       	brpl	.-8      	; 0xafe <GPIO_setupPinDirection+0x72>
     b06:	80 95       	com	r24
     b08:	82 23       	and	r24, r18
     b0a:	87 bb       	out	0x17, r24	; 23
     b0c:	08 95       	ret
     b0e:	41 30       	cpi	r20, 0x01	; 1
     b10:	59 f4       	brne	.+22     	; 0xb28 <GPIO_setupPinDirection+0x9c>
     b12:	24 b3       	in	r18, 0x14	; 20
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <GPIO_setupPinDirection+0x92>
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	6a 95       	dec	r22
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <GPIO_setupPinDirection+0x8e>
     b22:	82 2b       	or	r24, r18
     b24:	84 bb       	out	0x14, r24	; 20
     b26:	08 95       	ret
     b28:	24 b3       	in	r18, 0x14	; 20
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <GPIO_setupPinDirection+0xa8>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	6a 95       	dec	r22
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <GPIO_setupPinDirection+0xa4>
     b38:	80 95       	com	r24
     b3a:	82 23       	and	r24, r18
     b3c:	84 bb       	out	0x14, r24	; 20
     b3e:	08 95       	ret
     b40:	41 30       	cpi	r20, 0x01	; 1
     b42:	59 f4       	brne	.+22     	; 0xb5a <GPIO_setupPinDirection+0xce>
     b44:	21 b3       	in	r18, 0x11	; 17
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <GPIO_setupPinDirection+0xc4>
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	6a 95       	dec	r22
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <GPIO_setupPinDirection+0xc0>
     b54:	82 2b       	or	r24, r18
     b56:	81 bb       	out	0x11, r24	; 17
     b58:	08 95       	ret
     b5a:	21 b3       	in	r18, 0x11	; 17
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <GPIO_setupPinDirection+0xda>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	6a 95       	dec	r22
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <GPIO_setupPinDirection+0xd6>
     b6a:	80 95       	com	r24
     b6c:	82 23       	and	r24, r18
     b6e:	81 bb       	out	0x11, r24	; 17
     b70:	08 95       	ret

00000b72 <GPIO_writePin>:
     b72:	68 30       	cpi	r22, 0x08	; 8
     b74:	08 f0       	brcs	.+2      	; 0xb78 <GPIO_writePin+0x6>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <GPIO_writePin+0xe4>
     b78:	84 30       	cpi	r24, 0x04	; 4
     b7a:	08 f0       	brcs	.+2      	; 0xb7e <GPIO_writePin+0xc>
     b7c:	6c c0       	rjmp	.+216    	; 0xc56 <GPIO_writePin+0xe4>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	01 f1       	breq	.+64     	; 0xbc2 <GPIO_writePin+0x50>
     b82:	30 f0       	brcs	.+12     	; 0xb90 <GPIO_writePin+0x1e>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	b1 f1       	breq	.+108    	; 0xbf4 <GPIO_writePin+0x82>
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	09 f4       	brne	.+2      	; 0xb8e <GPIO_writePin+0x1c>
     b8c:	4c c0       	rjmp	.+152    	; 0xc26 <GPIO_writePin+0xb4>
     b8e:	08 95       	ret
     b90:	41 30       	cpi	r20, 0x01	; 1
     b92:	59 f4       	brne	.+22     	; 0xbaa <GPIO_writePin+0x38>
     b94:	2b b3       	in	r18, 0x1b	; 27
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <GPIO_writePin+0x2e>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	6a 95       	dec	r22
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <GPIO_writePin+0x2a>
     ba4:	82 2b       	or	r24, r18
     ba6:	8b bb       	out	0x1b, r24	; 27
     ba8:	08 95       	ret
     baa:	2b b3       	in	r18, 0x1b	; 27
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <GPIO_writePin+0x44>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <GPIO_writePin+0x40>
     bba:	80 95       	com	r24
     bbc:	82 23       	and	r24, r18
     bbe:	8b bb       	out	0x1b, r24	; 27
     bc0:	08 95       	ret
     bc2:	41 30       	cpi	r20, 0x01	; 1
     bc4:	59 f4       	brne	.+22     	; 0xbdc <GPIO_writePin+0x6a>
     bc6:	28 b3       	in	r18, 0x18	; 24
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_writePin+0x60>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	6a 95       	dec	r22
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_writePin+0x5c>
     bd6:	82 2b       	or	r24, r18
     bd8:	88 bb       	out	0x18, r24	; 24
     bda:	08 95       	ret
     bdc:	28 b3       	in	r18, 0x18	; 24
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <GPIO_writePin+0x76>
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	6a 95       	dec	r22
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <GPIO_writePin+0x72>
     bec:	80 95       	com	r24
     bee:	82 23       	and	r24, r18
     bf0:	88 bb       	out	0x18, r24	; 24
     bf2:	08 95       	ret
     bf4:	41 30       	cpi	r20, 0x01	; 1
     bf6:	59 f4       	brne	.+22     	; 0xc0e <GPIO_writePin+0x9c>
     bf8:	25 b3       	in	r18, 0x15	; 21
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <GPIO_writePin+0x92>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	6a 95       	dec	r22
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <GPIO_writePin+0x8e>
     c08:	82 2b       	or	r24, r18
     c0a:	85 bb       	out	0x15, r24	; 21
     c0c:	08 95       	ret
     c0e:	25 b3       	in	r18, 0x15	; 21
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_writePin+0xa8>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	6a 95       	dec	r22
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_writePin+0xa4>
     c1e:	80 95       	com	r24
     c20:	82 23       	and	r24, r18
     c22:	85 bb       	out	0x15, r24	; 21
     c24:	08 95       	ret
     c26:	41 30       	cpi	r20, 0x01	; 1
     c28:	59 f4       	brne	.+22     	; 0xc40 <GPIO_writePin+0xce>
     c2a:	22 b3       	in	r18, 0x12	; 18
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <GPIO_writePin+0xc4>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	6a 95       	dec	r22
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <GPIO_writePin+0xc0>
     c3a:	82 2b       	or	r24, r18
     c3c:	82 bb       	out	0x12, r24	; 18
     c3e:	08 95       	ret
     c40:	22 b3       	in	r18, 0x12	; 18
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <GPIO_writePin+0xda>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	6a 95       	dec	r22
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <GPIO_writePin+0xd6>
     c50:	80 95       	com	r24
     c52:	82 23       	and	r24, r18
     c54:	82 bb       	out	0x12, r24	; 18
     c56:	08 95       	ret

00000c58 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	78 f4       	brcc	.+30     	; 0xc7a <GPIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	41 f0       	breq	.+16     	; 0xc70 <GPIO_setupPortDirection+0x18>
     c60:	28 f0       	brcs	.+10     	; 0xc6c <GPIO_setupPortDirection+0x14>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	39 f0       	breq	.+14     	; 0xc74 <GPIO_setupPortDirection+0x1c>
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	39 f0       	breq	.+14     	; 0xc78 <GPIO_setupPortDirection+0x20>
     c6a:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
     c6c:	6a bb       	out	0x1a, r22	; 26
			break;
     c6e:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
     c70:	67 bb       	out	0x17, r22	; 23
			break;
     c72:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
     c74:	64 bb       	out	0x14, r22	; 20
			break;
     c76:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
     c78:	61 bb       	out	0x11, r22	; 17
     c7a:	08 95       	ret

00000c7c <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	78 f4       	brcc	.+30     	; 0xc9e <GPIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	41 f0       	breq	.+16     	; 0xc94 <GPIO_writePort+0x18>
     c84:	28 f0       	brcs	.+10     	; 0xc90 <GPIO_writePort+0x14>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	39 f0       	breq	.+14     	; 0xc98 <GPIO_writePort+0x1c>
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	39 f0       	breq	.+14     	; 0xc9c <GPIO_writePort+0x20>
     c8e:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
     c90:	6b bb       	out	0x1b, r22	; 27
			break;
     c92:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
     c94:	68 bb       	out	0x18, r22	; 24
			break;
     c96:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
     c98:	65 bb       	out	0x15, r22	; 21
			break;
     c9a:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
     c9c:	62 bb       	out	0x12, r22	; 18
     c9e:	08 95       	ret

00000ca0 <PWM_Timer0_Start>:
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
	TCNT0 = 0; /* Timer0 initial value */
     ca0:	12 be       	out	0x32, r1	; 50

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value */
     ca2:	68 2f       	mov	r22, r24
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__floatunsisf>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	48 ec       	ldi	r20, 0xC8	; 200
     cb4:	52 e4       	ldi	r21, 0x42	; 66
     cb6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4f e7       	ldi	r20, 0x7F	; 127
     cc0:	53 e4       	ldi	r21, 0x43	; 67
     cc2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__mulsf3>
     cc6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixunssfsi>
     cca:	6c bf       	out	0x3c, r22	; 60
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     ccc:	8a e6       	ldi	r24, 0x6A	; 106
     cce:	83 bf       	out	0x33, r24	; 51

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 46 05 	call	0xa8c	; 0xa8c <GPIO_setupPinDirection>
     cda:	08 95       	ret

00000cdc <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     cdc:	86 e0       	ldi	r24, 0x06	; 6
     cde:	8b bd       	out	0x2b, r24	; 43
     ce0:	89 e1       	ldi	r24, 0x19	; 25
     ce2:	8a bd       	out	0x2a, r24	; 42
     ce4:	8b e0       	ldi	r24, 0x0B	; 11
     ce6:	8e bd       	out	0x2e, r24	; 46
     ce8:	89 b7       	in	r24, 0x39	; 57
     cea:	80 61       	ori	r24, 0x10	; 16
     cec:	89 bf       	out	0x39, r24	; 57
     cee:	08 95       	ret

00000cf0 <pxPortInitialiseStack>:
     cf0:	31 e1       	ldi	r19, 0x11	; 17
     cf2:	fc 01       	movw	r30, r24
     cf4:	30 83       	st	Z, r19
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	22 e2       	ldi	r18, 0x22	; 34
     cfa:	20 83       	st	Z, r18
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	a3 e3       	ldi	r26, 0x33	; 51
     d00:	a0 83       	st	Z, r26
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	60 83       	st	Z, r22
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	70 83       	st	Z, r23
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	10 82       	st	Z, r1
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	60 e8       	ldi	r22, 0x80	; 128
     d12:	60 83       	st	Z, r22
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	10 82       	st	Z, r1
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	62 e0       	ldi	r22, 0x02	; 2
     d1c:	60 83       	st	Z, r22
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	63 e0       	ldi	r22, 0x03	; 3
     d22:	60 83       	st	Z, r22
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	60 83       	st	Z, r22
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	65 e0       	ldi	r22, 0x05	; 5
     d2e:	60 83       	st	Z, r22
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	66 e0       	ldi	r22, 0x06	; 6
     d34:	60 83       	st	Z, r22
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	67 e0       	ldi	r22, 0x07	; 7
     d3a:	60 83       	st	Z, r22
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	68 e0       	ldi	r22, 0x08	; 8
     d40:	60 83       	st	Z, r22
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	69 e0       	ldi	r22, 0x09	; 9
     d46:	60 83       	st	Z, r22
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	60 e1       	ldi	r22, 0x10	; 16
     d4c:	60 83       	st	Z, r22
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	30 83       	st	Z, r19
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	32 e1       	ldi	r19, 0x12	; 18
     d56:	30 83       	st	Z, r19
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	33 e1       	ldi	r19, 0x13	; 19
     d5c:	30 83       	st	Z, r19
     d5e:	31 97       	sbiw	r30, 0x01	; 1
     d60:	34 e1       	ldi	r19, 0x14	; 20
     d62:	30 83       	st	Z, r19
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	35 e1       	ldi	r19, 0x15	; 21
     d68:	30 83       	st	Z, r19
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	36 e1       	ldi	r19, 0x16	; 22
     d6e:	30 83       	st	Z, r19
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	37 e1       	ldi	r19, 0x17	; 23
     d74:	30 83       	st	Z, r19
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	38 e1       	ldi	r19, 0x18	; 24
     d7a:	30 83       	st	Z, r19
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	39 e1       	ldi	r19, 0x19	; 25
     d80:	30 83       	st	Z, r19
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	30 e2       	ldi	r19, 0x20	; 32
     d86:	30 83       	st	Z, r19
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	31 e2       	ldi	r19, 0x21	; 33
     d8c:	30 83       	st	Z, r19
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	20 83       	st	Z, r18
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	23 e2       	ldi	r18, 0x23	; 35
     d96:	20 83       	st	Z, r18
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	40 83       	st	Z, r20
     d9c:	31 97       	sbiw	r30, 0x01	; 1
     d9e:	50 83       	st	Z, r21
     da0:	31 97       	sbiw	r30, 0x01	; 1
     da2:	26 e2       	ldi	r18, 0x26	; 38
     da4:	20 83       	st	Z, r18
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	27 e2       	ldi	r18, 0x27	; 39
     daa:	20 83       	st	Z, r18
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	28 e2       	ldi	r18, 0x28	; 40
     db0:	20 83       	st	Z, r18
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	29 e2       	ldi	r18, 0x29	; 41
     db6:	20 83       	st	Z, r18
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	20 e3       	ldi	r18, 0x30	; 48
     dbc:	20 83       	st	Z, r18
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	21 e3       	ldi	r18, 0x31	; 49
     dc2:	20 83       	st	Z, r18
     dc4:	86 97       	sbiw	r24, 0x26	; 38
     dc6:	08 95       	ret

00000dc8 <xPortStartScheduler>:
     dc8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <prvSetupTimerInterrupt>
     dcc:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     dd0:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     dd4:	cd 91       	ld	r28, X+
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	dd 91       	ld	r29, X+
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	3f 90       	pop	r3
     e16:	2f 90       	pop	r2
     e18:	1f 90       	pop	r1
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	08 95       	ret
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	08 95       	ret

00000e26 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	0f 92       	push	r0
     e2e:	1f 92       	push	r1
     e30:	11 24       	eor	r1, r1
     e32:	2f 92       	push	r2
     e34:	3f 92       	push	r3
     e36:	4f 92       	push	r4
     e38:	5f 92       	push	r5
     e3a:	6f 92       	push	r6
     e3c:	7f 92       	push	r7
     e3e:	8f 92       	push	r8
     e40:	9f 92       	push	r9
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
     e6e:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     e72:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     e76:	0d b6       	in	r0, 0x3d	; 61
     e78:	0d 92       	st	X+, r0
     e7a:	0e b6       	in	r0, 0x3e	; 62
     e7c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e7e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e82:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     e86:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     e8a:	cd 91       	ld	r28, X+
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	dd 91       	ld	r29, X+
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	9f 90       	pop	r9
     ec0:	8f 90       	pop	r8
     ec2:	7f 90       	pop	r7
     ec4:	6f 90       	pop	r6
     ec6:	5f 90       	pop	r5
     ec8:	4f 90       	pop	r4
     eca:	3f 90       	pop	r3
     ecc:	2f 90       	pop	r2
     ece:	1f 90       	pop	r1
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ed6:	08 95       	ret

00000ed8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	0f 92       	push	r0
     ee0:	1f 92       	push	r1
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     f24:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     f28:	0d b6       	in	r0, 0x3d	; 61
     f2a:	0d 92       	st	X+, r0
     f2c:	0e b6       	in	r0, 0x3e	; 62
     f2e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     f30:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <xTaskIncrementTick>
     f34:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     f36:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     f3a:	a0 91 88 07 	lds	r26, 0x0788	; 0x800788 <pxCurrentTCB>
     f3e:	b0 91 89 07 	lds	r27, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
     f42:	cd 91       	ld	r28, X+
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	dd 91       	ld	r29, X+
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	7f 90       	pop	r7
     f7c:	6f 90       	pop	r6
     f7e:	5f 90       	pop	r5
     f80:	4f 90       	pop	r4
     f82:	3f 90       	pop	r3
     f84:	2f 90       	pop	r2
     f86:	1f 90       	pop	r1
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f8e:	08 95       	ret

00000f90 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     f90:	0e 94 6c 07 	call	0xed8	; 0xed8 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f94:	18 95       	reti

00000f96 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f96:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f98:	03 96       	adiw	r24, 0x03	; 3
     f9a:	92 83       	std	Z+2, r25	; 0x02
     f9c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     f9e:	2f ef       	ldi	r18, 0xFF	; 255
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	34 83       	std	Z+4, r19	; 0x04
     fa4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fa6:	96 83       	std	Z+6, r25	; 0x06
     fa8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     faa:	90 87       	std	Z+8, r25	; 0x08
     fac:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     fae:	10 82       	st	Z, r1
     fb0:	08 95       	ret

00000fb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     fb2:	fc 01       	movw	r30, r24
     fb4:	11 86       	std	Z+9, r1	; 0x09
     fb6:	10 86       	std	Z+8, r1	; 0x08
     fb8:	08 95       	ret

00000fba <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	9c 01       	movw	r18, r24
     fc0:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     fc2:	dc 01       	movw	r26, r24
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	cd 91       	ld	r28, X+
     fc8:	dc 91       	ld	r29, X
     fca:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     fcc:	d3 83       	std	Z+3, r29	; 0x03
     fce:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	95 83       	std	Z+5, r25	; 0x05
     fd6:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	dc 01       	movw	r26, r24
     fde:	13 96       	adiw	r26, 0x03	; 3
     fe0:	7c 93       	st	X, r23
     fe2:	6e 93       	st	-X, r22
     fe4:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     fe6:	7d 83       	std	Y+5, r23	; 0x05
     fe8:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     fea:	31 87       	std	Z+9, r19	; 0x09
     fec:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     fee:	f9 01       	movw	r30, r18
     ff0:	80 81       	ld	r24, Z
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 83       	st	Z, r24
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1002:	48 81       	ld	r20, Y
    1004:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1006:	4f 3f       	cpi	r20, 0xFF	; 255
    1008:	2f ef       	ldi	r18, 0xFF	; 255
    100a:	52 07       	cpc	r21, r18
    100c:	21 f4       	brne	.+8      	; 0x1016 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    100e:	fc 01       	movw	r30, r24
    1010:	a7 81       	ldd	r26, Z+7	; 0x07
    1012:	b0 85       	ldd	r27, Z+8	; 0x08
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1016:	dc 01       	movw	r26, r24
    1018:	13 96       	adiw	r26, 0x03	; 3
    101a:	01 c0       	rjmp	.+2      	; 0x101e <vListInsert+0x22>
    101c:	df 01       	movw	r26, r30
    101e:	12 96       	adiw	r26, 0x02	; 2
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	13 97       	sbiw	r26, 0x03	; 3
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	42 17       	cp	r20, r18
    102c:	53 07       	cpc	r21, r19
    102e:	b0 f7       	brcc	.-20     	; 0x101c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	fb 83       	std	Y+3, r31	; 0x03
    103a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    103c:	d5 83       	std	Z+5, r29	; 0x05
    103e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1040:	bd 83       	std	Y+5, r27	; 0x05
    1042:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	dc 93       	st	X, r29
    1048:	ce 93       	st	-X, r28
    104a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    104c:	99 87       	std	Y+9, r25	; 0x09
    104e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1050:	fc 01       	movw	r30, r24
    1052:	20 81       	ld	r18, Z
    1054:	2f 5f       	subi	r18, 0xFF	; 255
    1056:	20 83       	st	Z, r18
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1064:	a0 85       	ldd	r26, Z+8	; 0x08
    1066:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1068:	c2 81       	ldd	r28, Z+2	; 0x02
    106a:	d3 81       	ldd	r29, Z+3	; 0x03
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	9d 83       	std	Y+5, r25	; 0x05
    1072:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1074:	c4 81       	ldd	r28, Z+4	; 0x04
    1076:	d5 81       	ldd	r29, Z+5	; 0x05
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	9b 83       	std	Y+3, r25	; 0x03
    107e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	8d 91       	ld	r24, X+
    1084:	9c 91       	ld	r25, X
    1086:	12 97       	sbiw	r26, 0x02	; 2
    1088:	e8 17       	cp	r30, r24
    108a:	f9 07       	cpc	r31, r25
    108c:	31 f4       	brne	.+12     	; 0x109a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    108e:	84 81       	ldd	r24, Z+4	; 0x04
    1090:	95 81       	ldd	r25, Z+5	; 0x05
    1092:	12 96       	adiw	r26, 0x02	; 2
    1094:	9c 93       	st	X, r25
    1096:	8e 93       	st	-X, r24
    1098:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    109a:	11 86       	std	Z+9, r1	; 0x09
    109c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    109e:	8c 91       	ld	r24, X
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    10a4:	8c 91       	ld	r24, X
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    10ac:	ed e4       	ldi	r30, 0x4D	; 77
    10ae:	f1 e0       	ldi	r31, 0x01	; 1
    10b0:	a1 e5       	ldi	r26, 0x51	; 81
    10b2:	b1 e0       	ldi	r27, 0x01	; 1
    10b4:	b1 83       	std	Z+1, r27	; 0x01
    10b6:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    10b8:	13 82       	std	Z+3, r1	; 0x03
    10ba:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    10bc:	e9 e2       	ldi	r30, 0x29	; 41
    10be:	f7 e0       	ldi	r31, 0x07	; 7
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    10c0:	f0 93 4c 01 	sts	0x014C, r31	; 0x80014c <pxEnd+0x1>
    10c4:	e0 93 4b 01 	sts	0x014B, r30	; 0x80014b <pxEnd>
    pxEnd->xBlockSize = 0;
    10c8:	13 82       	std	Z+3, r1	; 0x03
    10ca:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    10cc:	11 82       	std	Z+1, r1	; 0x01
    10ce:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    10d0:	88 ed       	ldi	r24, 0xD8	; 216
    10d2:	95 e0       	ldi	r25, 0x05	; 5
    10d4:	13 96       	adiw	r26, 0x03	; 3
    10d6:	9c 93       	st	X, r25
    10d8:	8e 93       	st	-X, r24
    10da:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    10dc:	ed 93       	st	X+, r30
    10de:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10e0:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <xMinimumEverFreeBytesRemaining+0x1>
    10e4:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10e8:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <xFreeBytesRemaining+0x1>
    10ec:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e8       	ldi	r25, 0x80	; 128
    10f4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <xBlockAllocatedBit+0x1>
    10f8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <xBlockAllocatedBit>
    10fc:	08 95       	ret

000010fe <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1104:	ad e4       	ldi	r26, 0x4D	; 77
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <prvInsertBlockIntoFreeList+0xe>
    110a:	df 01       	movw	r26, r30
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	ec 17       	cp	r30, r28
    1114:	fd 07       	cpc	r31, r29
    1116:	c8 f3       	brcs	.-14     	; 0x110a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1118:	12 96       	adiw	r26, 0x02	; 2
    111a:	8d 91       	ld	r24, X+
    111c:	9c 91       	ld	r25, X
    111e:	13 97       	sbiw	r26, 0x03	; 3
    1120:	9d 01       	movw	r18, r26
    1122:	28 0f       	add	r18, r24
    1124:	39 1f       	adc	r19, r25
    1126:	c2 17       	cp	r28, r18
    1128:	d3 07       	cpc	r29, r19
    112a:	49 f4       	brne	.+18     	; 0x113e <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    112c:	2a 81       	ldd	r18, Y+2	; 0x02
    112e:	3b 81       	ldd	r19, Y+3	; 0x03
    1130:	82 0f       	add	r24, r18
    1132:	93 1f       	adc	r25, r19
    1134:	13 96       	adiw	r26, 0x03	; 3
    1136:	9c 93       	st	X, r25
    1138:	8e 93       	st	-X, r24
    113a:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    113c:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03
    1142:	9e 01       	movw	r18, r28
    1144:	28 0f       	add	r18, r24
    1146:	39 1f       	adc	r19, r25
    1148:	e2 17       	cp	r30, r18
    114a:	f3 07       	cpc	r31, r19
    114c:	c1 f4       	brne	.+48     	; 0x117e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    114e:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <pxEnd>
    1152:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <pxEnd+0x1>
    1156:	e2 17       	cp	r30, r18
    1158:	f3 07       	cpc	r31, r19
    115a:	71 f0       	breq	.+28     	; 0x1178 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    115c:	22 81       	ldd	r18, Z+2	; 0x02
    115e:	33 81       	ldd	r19, Z+3	; 0x03
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
    116c:	11 97       	sbiw	r26, 0x01	; 1
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	99 83       	std	Y+1, r25	; 0x01
    1174:	88 83       	st	Y, r24
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1178:	39 83       	std	Y+1, r19	; 0x01
    117a:	28 83       	st	Y, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    117e:	f9 83       	std	Y+1, r31	; 0x01
    1180:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1182:	ca 17       	cp	r28, r26
    1184:	db 07       	cpc	r29, r27
    1186:	11 f0       	breq	.+4      	; 0x118c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1188:	cd 93       	st	X+, r28
    118a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
    11a0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    11a4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <pxEnd>
    11a8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <pxEnd+0x1>
    11ac:	89 2b       	or	r24, r25
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <pvPortMalloc+0x22>
        {
            prvHeapInit();
    11b0:	0e 94 56 08 	call	0x10ac	; 0x10ac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    11b4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <xBlockAllocatedBit>
    11b8:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <xBlockAllocatedBit+0x1>
    11bc:	80 23       	and	r24, r16
    11be:	91 23       	and	r25, r17
    11c0:	89 2b       	or	r24, r25
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <pvPortMalloc+0x34>
    11c4:	77 c0       	rjmp	.+238    	; 0x12b4 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    11c6:	01 15       	cp	r16, r1
    11c8:	11 05       	cpc	r17, r1
    11ca:	49 f0       	breq	.+18     	; 0x11de <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
    11cc:	c8 01       	movw	r24, r16
    11ce:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
    11d0:	08 17       	cp	r16, r24
    11d2:	19 07       	cpc	r17, r25
    11d4:	18 f0       	brcs	.+6      	; 0x11dc <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
    11d6:	00 e0       	ldi	r16, 0x00	; 0
    11d8:	10 e0       	ldi	r17, 0x00	; 0
    11da:	01 c0       	rjmp	.+2      	; 0x11de <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
    11dc:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    11de:	01 15       	cp	r16, r1
    11e0:	11 05       	cpc	r17, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <pvPortMalloc+0x54>
    11e4:	6a c0       	rjmp	.+212    	; 0x12ba <pvPortMalloc+0x128>
    11e6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <xFreeBytesRemaining>
    11ea:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <xFreeBytesRemaining+0x1>
    11ee:	80 17       	cp	r24, r16
    11f0:	91 07       	cpc	r25, r17
    11f2:	08 f4       	brcc	.+2      	; 0x11f6 <pvPortMalloc+0x64>
    11f4:	65 c0       	rjmp	.+202    	; 0x12c0 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    11f6:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <xStart>
    11fa:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    11fe:	ed e4       	ldi	r30, 0x4D	; 77
    1200:	f1 e0       	ldi	r31, 0x01	; 1
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
    1204:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    1206:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	9b 81       	ldd	r25, Y+3	; 0x03
    120c:	80 17       	cp	r24, r16
    120e:	91 07       	cpc	r25, r17
    1210:	20 f4       	brcc	.+8      	; 0x121a <pvPortMalloc+0x88>
    1212:	88 81       	ld	r24, Y
    1214:	99 81       	ldd	r25, Y+1	; 0x01
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	a9 f7       	brne	.-22     	; 0x1204 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    121a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <pxEnd>
    121e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <pxEnd+0x1>
    1222:	c8 17       	cp	r28, r24
    1224:	d9 07       	cpc	r29, r25
    1226:	09 f4       	brne	.+2      	; 0x122a <pvPortMalloc+0x98>
    1228:	4e c0       	rjmp	.+156    	; 0x12c6 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    122a:	e0 80       	ld	r14, Z
    122c:	f1 80       	ldd	r15, Z+1	; 0x01
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	e8 0e       	add	r14, r24
    1232:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1234:	88 81       	ld	r24, Y
    1236:	99 81       	ldd	r25, Y+1	; 0x01
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    123c:	2a 81       	ldd	r18, Y+2	; 0x02
    123e:	3b 81       	ldd	r19, Y+3	; 0x03
    1240:	20 1b       	sub	r18, r16
    1242:	31 0b       	sbc	r19, r17
    1244:	29 30       	cpi	r18, 0x09	; 9
    1246:	31 05       	cpc	r19, r1
    1248:	50 f0       	brcs	.+20     	; 0x125e <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    124a:	ce 01       	movw	r24, r28
    124c:	80 0f       	add	r24, r16
    124e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1250:	fc 01       	movw	r30, r24
    1252:	33 83       	std	Z+3, r19	; 0x03
    1254:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    1256:	1b 83       	std	Y+3, r17	; 0x03
    1258:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    125a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    125e:	2a 81       	ldd	r18, Y+2	; 0x02
    1260:	3b 81       	ldd	r19, Y+3	; 0x03
    1262:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <xFreeBytesRemaining>
    1266:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <xFreeBytesRemaining+0x1>
    126a:	82 1b       	sub	r24, r18
    126c:	93 0b       	sbc	r25, r19
    126e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <xFreeBytesRemaining+0x1>
    1272:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1276:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <xMinimumEverFreeBytesRemaining>
    127a:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <xMinimumEverFreeBytesRemaining+0x1>
    127e:	84 17       	cp	r24, r20
    1280:	95 07       	cpc	r25, r21
    1282:	20 f4       	brcc	.+8      	; 0x128c <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1284:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <xMinimumEverFreeBytesRemaining+0x1>
    1288:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
    128c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <xBlockAllocatedBit>
    1290:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <xBlockAllocatedBit+0x1>
    1294:	28 2b       	or	r18, r24
    1296:	39 2b       	or	r19, r25
    1298:	3b 83       	std	Y+3, r19	; 0x03
    129a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    129c:	19 82       	std	Y+1, r1	; 0x01
    129e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    12a0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <xNumberOfSuccessfulAllocations>
    12a4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <xNumberOfSuccessfulAllocations+0x1>
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <xNumberOfSuccessfulAllocations+0x1>
    12ae:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <xNumberOfSuccessfulAllocations>
    12b2:	0b c0       	rjmp	.+22     	; 0x12ca <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    12b4:	e1 2c       	mov	r14, r1
    12b6:	f1 2c       	mov	r15, r1
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <pvPortMalloc+0x138>
    12ba:	e1 2c       	mov	r14, r1
    12bc:	f1 2c       	mov	r15, r1
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <pvPortMalloc+0x138>
    12c0:	e1 2c       	mov	r14, r1
    12c2:	f1 2c       	mov	r15, r1
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <pvPortMalloc+0x138>
    12c6:	e1 2c       	mov	r14, r1
    12c8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    12ca:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    12ce:	c7 01       	movw	r24, r14
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	08 95       	ret

000012de <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	99 f1       	breq	.+102    	; 0x1350 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    12ea:	ec 01       	movw	r28, r24
    12ec:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    12ee:	4a 81       	ldd	r20, Y+2	; 0x02
    12f0:	5b 81       	ldd	r21, Y+3	; 0x03
    12f2:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <xBlockAllocatedBit>
    12f6:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <xBlockAllocatedBit+0x1>
    12fa:	ba 01       	movw	r22, r20
    12fc:	62 23       	and	r22, r18
    12fe:	73 23       	and	r23, r19
    1300:	67 2b       	or	r22, r23
    1302:	31 f1       	breq	.+76     	; 0x1350 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    1304:	68 81       	ld	r22, Y
    1306:	79 81       	ldd	r23, Y+1	; 0x01
    1308:	67 2b       	or	r22, r23
    130a:	11 f5       	brne	.+68     	; 0x1350 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
    130c:	20 95       	com	r18
    130e:	30 95       	com	r19
    1310:	24 23       	and	r18, r20
    1312:	35 23       	and	r19, r21
    1314:	3b 83       	std	Y+3, r19	; 0x03
    1316:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
    1318:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	9b 81       	ldd	r25, Y+3	; 0x03
    1320:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <xFreeBytesRemaining>
    1324:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <xFreeBytesRemaining+0x1>
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <xFreeBytesRemaining+0x1>
    1330:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 7f 08 	call	0x10fe	; 0x10fe <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    133a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <xNumberOfSuccessfulFrees>
    133e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <xNumberOfSuccessfulFrees+0x1>
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNumberOfSuccessfulFrees+0x1>
    1348:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    134c:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
    135a:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxDelayedTaskList>
    135e:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxDelayedTaskList+0x1>
    1362:	80 81       	ld	r24, Z
    1364:	81 11       	cpse	r24, r1
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <prvResetNextTaskUnblockTime+0x1c>
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <xNextTaskUnblockTime+0x1>
    1370:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xNextTaskUnblockTime>
    1374:	08 95       	ret
    1376:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxDelayedTaskList>
    137a:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxDelayedTaskList+0x1>
    137e:	05 80       	ldd	r0, Z+5	; 0x05
    1380:	f6 81       	ldd	r31, Z+6	; 0x06
    1382:	e0 2d       	mov	r30, r0
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <xNextTaskUnblockTime+0x1>
    138c:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xNextTaskUnblockTime>
    1390:	08 95       	ret

00001392 <prvInitialiseNewTask>:
    1392:	2f 92       	push	r2
    1394:	3f 92       	push	r3
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	1c 01       	movw	r2, r24
    13ba:	4b 01       	movw	r8, r22
    13bc:	29 01       	movw	r4, r18
    13be:	3a 01       	movw	r6, r20
    13c0:	a9 01       	movw	r20, r18
    13c2:	65 ea       	ldi	r22, 0xA5	; 165
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	d5 01       	movw	r26, r10
    13c8:	57 96       	adiw	r26, 0x17	; 23
    13ca:	8d 91       	ld	r24, X+
    13cc:	9c 91       	ld	r25, X
    13ce:	58 97       	sbiw	r26, 0x18	; 24
    13d0:	0e 94 2e 11 	call	0x225c	; 0x225c <memset>
    13d4:	f5 01       	movw	r30, r10
    13d6:	87 89       	ldd	r24, Z+23	; 0x17
    13d8:	90 8d       	ldd	r25, Z+24	; 0x18
    13da:	f1 e0       	ldi	r31, 0x01	; 1
    13dc:	4f 1a       	sub	r4, r31
    13de:	51 08       	sbc	r5, r1
    13e0:	48 0e       	add	r4, r24
    13e2:	59 1e       	adc	r5, r25
    13e4:	81 14       	cp	r8, r1
    13e6:	91 04       	cpc	r9, r1
    13e8:	89 f4       	brne	.+34     	; 0x140c <prvInitialiseNewTask+0x7a>
    13ea:	17 c0       	rjmp	.+46     	; 0x141a <prvInitialiseNewTask+0x88>
    13ec:	82 2f       	mov	r24, r18
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	f4 01       	movw	r30, r8
    13f2:	e8 0f       	add	r30, r24
    13f4:	f9 1f       	adc	r31, r25
    13f6:	30 81       	ld	r19, Z
    13f8:	d5 01       	movw	r26, r10
    13fa:	a8 0f       	add	r26, r24
    13fc:	b9 1f       	adc	r27, r25
    13fe:	59 96       	adiw	r26, 0x19	; 25
    1400:	3c 93       	st	X, r19
    1402:	80 81       	ld	r24, Z
    1404:	88 23       	and	r24, r24
    1406:	29 f0       	breq	.+10     	; 0x1412 <prvInitialiseNewTask+0x80>
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	01 c0       	rjmp	.+2      	; 0x140e <prvInitialiseNewTask+0x7c>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	2c 30       	cpi	r18, 0x0C	; 12
    1410:	68 f3       	brcs	.-38     	; 0x13ec <prvInitialiseNewTask+0x5a>
    1412:	d5 01       	movw	r26, r10
    1414:	94 96       	adiw	r26, 0x24	; 36
    1416:	1c 92       	st	X, r1
    1418:	02 c0       	rjmp	.+4      	; 0x141e <prvInitialiseNewTask+0x8c>
    141a:	f5 01       	movw	r30, r10
    141c:	11 8e       	std	Z+25, r1	; 0x19
    141e:	f3 e0       	ldi	r31, 0x03	; 3
    1420:	fe 15       	cp	r31, r14
    1422:	20 f4       	brcc	.+8      	; 0x142c <prvInitialiseNewTask+0x9a>
    1424:	0f 2e       	mov	r0, r31
    1426:	f3 e0       	ldi	r31, 0x03	; 3
    1428:	ef 2e       	mov	r14, r31
    142a:	f0 2d       	mov	r31, r0
    142c:	d5 01       	movw	r26, r10
    142e:	56 96       	adiw	r26, 0x16	; 22
    1430:	ec 92       	st	X, r14
    1432:	c5 01       	movw	r24, r10
    1434:	02 96       	adiw	r24, 0x02	; 2
    1436:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vListInitialiseItem>
    143a:	c5 01       	movw	r24, r10
    143c:	0c 96       	adiw	r24, 0x0c	; 12
    143e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vListInitialiseItem>
    1442:	f5 01       	movw	r30, r10
    1444:	b1 86       	std	Z+9, r11	; 0x09
    1446:	a0 86       	std	Z+8, r10	; 0x08
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	8e 19       	sub	r24, r14
    144e:	91 09       	sbc	r25, r1
    1450:	95 87       	std	Z+13, r25	; 0x0d
    1452:	84 87       	std	Z+12, r24	; 0x0c
    1454:	b3 8a       	std	Z+19, r11	; 0x13
    1456:	a2 8a       	std	Z+18, r10	; 0x12
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	b7 96       	adiw	r30, 0x27	; 39
    145c:	df 01       	movw	r26, r30
    145e:	1d 92       	st	X+, r1
    1460:	8a 95       	dec	r24
    1462:	e9 f7       	brne	.-6      	; 0x145e <prvInitialiseNewTask+0xcc>
    1464:	f5 01       	movw	r30, r10
    1466:	13 a6       	std	Z+43, r1	; 0x2b
    1468:	a8 01       	movw	r20, r16
    146a:	b1 01       	movw	r22, r2
    146c:	c2 01       	movw	r24, r4
    146e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <pxPortInitialiseStack>
    1472:	d5 01       	movw	r26, r10
    1474:	8d 93       	st	X+, r24
    1476:	9c 93       	st	X, r25
    1478:	c1 14       	cp	r12, r1
    147a:	d1 04       	cpc	r13, r1
    147c:	19 f0       	breq	.+6      	; 0x1484 <prvInitialiseNewTask+0xf2>
    147e:	f6 01       	movw	r30, r12
    1480:	b1 82       	std	Z+1, r11	; 0x01
    1482:	a0 82       	st	Z, r10
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	4f 90       	pop	r4
    14a2:	3f 90       	pop	r3
    14a4:	2f 90       	pop	r2
    14a6:	08 95       	ret

000014a8 <prvIdleTask>:
    14a8:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <pxReadyTasksLists>
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	e0 f3       	brcs	.-8      	; 0x14a8 <prvIdleTask>
    14b0:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    14b4:	f9 cf       	rjmp	.-14     	; 0x14a8 <prvIdleTask>

000014b6 <prvInitialiseTaskLists>:
    14b6:	cf 93       	push	r28
    14b8:	c0 e0       	ldi	r28, 0x00	; 0
    14ba:	10 c0       	rjmp	.+32     	; 0x14dc <prvInitialiseTaskLists+0x26>
    14bc:	8c 2f       	mov	r24, r28
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9c 01       	movw	r18, r24
    14c2:	22 0f       	add	r18, r18
    14c4:	33 1f       	adc	r19, r19
    14c6:	22 0f       	add	r18, r18
    14c8:	33 1f       	adc	r19, r19
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	82 0f       	add	r24, r18
    14d0:	93 1f       	adc	r25, r19
    14d2:	8c 59       	subi	r24, 0x9C	; 156
    14d4:	98 4f       	sbci	r25, 0xF8	; 248
    14d6:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    14da:	cf 5f       	subi	r28, 0xFF	; 255
    14dc:	c4 30       	cpi	r28, 0x04	; 4
    14de:	70 f3       	brcs	.-36     	; 0x14bc <prvInitialiseTaskLists+0x6>
    14e0:	8b e5       	ldi	r24, 0x5B	; 91
    14e2:	97 e0       	ldi	r25, 0x07	; 7
    14e4:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    14e8:	82 e5       	ldi	r24, 0x52	; 82
    14ea:	97 e0       	ldi	r25, 0x07	; 7
    14ec:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    14f0:	85 e4       	ldi	r24, 0x45	; 69
    14f2:	97 e0       	ldi	r25, 0x07	; 7
    14f4:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    14f8:	8c e3       	ldi	r24, 0x3C	; 60
    14fa:	97 e0       	ldi	r25, 0x07	; 7
    14fc:	0e 94 cb 07 	call	0xf96	; 0xf96 <vListInitialise>
    1500:	8b e5       	ldi	r24, 0x5B	; 91
    1502:	97 e0       	ldi	r25, 0x07	; 7
    1504:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <pxDelayedTaskList+0x1>
    1508:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <pxDelayedTaskList>
    150c:	82 e5       	ldi	r24, 0x52	; 82
    150e:	97 e0       	ldi	r25, 0x07	; 7
    1510:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <pxOverflowDelayedTaskList+0x1>
    1514:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <pxOverflowDelayedTaskList>
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <prvAddNewTaskToReadyList>:
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ec 01       	movw	r28, r24
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	0f 92       	push	r0
    1528:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <uxCurrentNumberOfTasks>
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <uxCurrentNumberOfTasks>
    1532:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    1536:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    153a:	89 2b       	or	r24, r25
    153c:	59 f4       	brne	.+22     	; 0x1554 <prvAddNewTaskToReadyList+0x38>
    153e:	d0 93 89 07 	sts	0x0789, r29	; 0x800789 <pxCurrentTCB+0x1>
    1542:	c0 93 88 07 	sts	0x0788, r28	; 0x800788 <pxCurrentTCB>
    1546:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <uxCurrentNumberOfTasks>
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	99 f4       	brne	.+38     	; 0x1574 <prvAddNewTaskToReadyList+0x58>
    154e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <prvInitialiseTaskLists>
    1552:	10 c0       	rjmp	.+32     	; 0x1574 <prvAddNewTaskToReadyList+0x58>
    1554:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xSchedulerRunning>
    1558:	81 11       	cpse	r24, r1
    155a:	0c c0       	rjmp	.+24     	; 0x1574 <prvAddNewTaskToReadyList+0x58>
    155c:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    1560:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    1564:	96 89       	ldd	r25, Z+22	; 0x16
    1566:	8e 89       	ldd	r24, Y+22	; 0x16
    1568:	89 17       	cp	r24, r25
    156a:	20 f0       	brcs	.+8      	; 0x1574 <prvAddNewTaskToReadyList+0x58>
    156c:	d0 93 89 07 	sts	0x0789, r29	; 0x800789 <pxCurrentTCB+0x1>
    1570:	c0 93 88 07 	sts	0x0788, r28	; 0x800788 <pxCurrentTCB>
    1574:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <uxTaskNumber>
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <uxTaskNumber>
    157e:	8d a3       	std	Y+37, r24	; 0x25
    1580:	8e 89       	ldd	r24, Y+22	; 0x16
    1582:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <uxTopReadyPriority>
    1586:	98 17       	cp	r25, r24
    1588:	10 f4       	brcc	.+4      	; 0x158e <prvAddNewTaskToReadyList+0x72>
    158a:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9c 01       	movw	r18, r24
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	82 0f       	add	r24, r18
    15a0:	93 1f       	adc	r25, r19
    15a2:	be 01       	movw	r22, r28
    15a4:	6e 5f       	subi	r22, 0xFE	; 254
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8c 59       	subi	r24, 0x9C	; 156
    15aa:	98 4f       	sbci	r25, 0xF8	; 248
    15ac:	0e 94 dd 07 	call	0xfba	; 0xfba <vListInsertEnd>
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <xSchedulerRunning>
    15b8:	88 23       	and	r24, r24
    15ba:	51 f0       	breq	.+20     	; 0x15d0 <prvAddNewTaskToReadyList+0xb4>
    15bc:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    15c0:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    15c4:	96 89       	ldd	r25, Z+22	; 0x16
    15c6:	8e 89       	ldd	r24, Y+22	; 0x16
    15c8:	98 17       	cp	r25, r24
    15ca:	10 f4       	brcc	.+4      	; 0x15d0 <prvAddNewTaskToReadyList+0xb4>
    15cc:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <prvAddCurrentTaskToDelayedList>:
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	f6 2e       	mov	r15, r22
    15e4:	00 91 39 07 	lds	r16, 0x0739	; 0x800739 <xTickCount>
    15e8:	10 91 3a 07 	lds	r17, 0x073A	; 0x80073a <xTickCount+0x1>
    15ec:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxCurrentTCB>
    15f0:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    15f4:	02 96       	adiw	r24, 0x02	; 2
    15f6:	0e 94 2f 08 	call	0x105e	; 0x105e <uxListRemove>
    15fa:	cf 3f       	cpi	r28, 0xFF	; 255
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	d8 07       	cpc	r29, r24
    1600:	69 f4       	brne	.+26     	; 0x161c <prvAddCurrentTaskToDelayedList+0x46>
    1602:	ff 20       	and	r15, r15
    1604:	59 f0       	breq	.+22     	; 0x161c <prvAddCurrentTaskToDelayedList+0x46>
    1606:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    160a:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    160e:	6e 5f       	subi	r22, 0xFE	; 254
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	8c e3       	ldi	r24, 0x3C	; 60
    1614:	97 e0       	ldi	r25, 0x07	; 7
    1616:	0e 94 dd 07 	call	0xfba	; 0xfba <vListInsertEnd>
    161a:	2f c0       	rjmp	.+94     	; 0x167a <prvAddCurrentTaskToDelayedList+0xa4>
    161c:	c0 0f       	add	r28, r16
    161e:	d1 1f       	adc	r29, r17
    1620:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    1624:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    1628:	d3 83       	std	Z+3, r29	; 0x03
    162a:	c2 83       	std	Z+2, r28	; 0x02
    162c:	c0 17       	cp	r28, r16
    162e:	d1 07       	cpc	r29, r17
    1630:	68 f4       	brcc	.+26     	; 0x164c <prvAddCurrentTaskToDelayedList+0x76>
    1632:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    1636:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    163a:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <pxOverflowDelayedTaskList>
    163e:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pxOverflowDelayedTaskList+0x1>
    1642:	6e 5f       	subi	r22, 0xFE	; 254
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	0e 94 fe 07 	call	0xffc	; 0xffc <vListInsert>
    164a:	17 c0       	rjmp	.+46     	; 0x167a <prvAddCurrentTaskToDelayedList+0xa4>
    164c:	60 91 88 07 	lds	r22, 0x0788	; 0x800788 <pxCurrentTCB>
    1650:	70 91 89 07 	lds	r23, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    1654:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <pxDelayedTaskList>
    1658:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <pxDelayedTaskList+0x1>
    165c:	6e 5f       	subi	r22, 0xFE	; 254
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	0e 94 fe 07 	call	0xffc	; 0xffc <vListInsert>
    1664:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xNextTaskUnblockTime>
    1668:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <xNextTaskUnblockTime+0x1>
    166c:	c8 17       	cp	r28, r24
    166e:	d9 07       	cpc	r29, r25
    1670:	20 f4       	brcc	.+8      	; 0x167a <prvAddCurrentTaskToDelayedList+0xa4>
    1672:	d0 93 31 07 	sts	0x0731, r29	; 0x800731 <xNextTaskUnblockTime+0x1>
    1676:	c0 93 30 07 	sts	0x0730, r28	; 0x800730 <xNextTaskUnblockTime>
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	08 95       	ret

00001686 <xTaskCreate>:
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	3c 01       	movw	r6, r24
    16ac:	1b 01       	movw	r2, r22
    16ae:	5a 01       	movw	r10, r20
    16b0:	29 01       	movw	r4, r18
    16b2:	ca 01       	movw	r24, r20
    16b4:	0e 94 c9 08 	call	0x1192	; 0x1192 <pvPortMalloc>
    16b8:	6c 01       	movw	r12, r24
    16ba:	89 2b       	or	r24, r25
    16bc:	71 f0       	breq	.+28     	; 0x16da <xTaskCreate+0x54>
    16be:	8c e2       	ldi	r24, 0x2C	; 44
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 c9 08 	call	0x1192	; 0x1192 <pvPortMalloc>
    16c6:	ec 01       	movw	r28, r24
    16c8:	89 2b       	or	r24, r25
    16ca:	19 f0       	breq	.+6      	; 0x16d2 <xTaskCreate+0x4c>
    16cc:	d8 8e       	std	Y+24, r13	; 0x18
    16ce:	cf 8a       	std	Y+23, r12	; 0x17
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <xTaskCreate+0x58>
    16d2:	c6 01       	movw	r24, r12
    16d4:	0e 94 6f 09 	call	0x12de	; 0x12de <vPortFree>
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <xTaskCreate+0x58>
    16da:	c0 e0       	ldi	r28, 0x00	; 0
    16dc:	d0 e0       	ldi	r29, 0x00	; 0
    16de:	20 97       	sbiw	r28, 0x00	; 0
    16e0:	91 f0       	breq	.+36     	; 0x1706 <xTaskCreate+0x80>
    16e2:	95 01       	movw	r18, r10
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	81 2c       	mov	r8, r1
    16ea:	91 2c       	mov	r9, r1
    16ec:	5e 01       	movw	r10, r28
    16ee:	67 01       	movw	r12, r14
    16f0:	e0 2e       	mov	r14, r16
    16f2:	82 01       	movw	r16, r4
    16f4:	b1 01       	movw	r22, r2
    16f6:	c3 01       	movw	r24, r6
    16f8:	0e 94 c9 09 	call	0x1392	; 0x1392 <prvInitialiseNewTask>
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 8e 0a 	call	0x151c	; 0x151c <prvAddNewTaskToReadyList>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <xTaskCreate+0x82>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	3f 90       	pop	r3
    172a:	2f 90       	pop	r2
    172c:	08 95       	ret

0000172e <vTaskStartScheduler>:
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	0f 2e       	mov	r0, r31
    1736:	fe e2       	ldi	r31, 0x2E	; 46
    1738:	ef 2e       	mov	r14, r31
    173a:	f7 e0       	ldi	r31, 0x07	; 7
    173c:	ff 2e       	mov	r15, r31
    173e:	f0 2d       	mov	r31, r0
    1740:	00 e0       	ldi	r16, 0x00	; 0
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	45 e5       	ldi	r20, 0x55	; 85
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	6c ef       	ldi	r22, 0xFC	; 252
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	84 e5       	ldi	r24, 0x54	; 84
    1750:	9a e0       	ldi	r25, 0x0A	; 10
    1752:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	81 f4       	brne	.+32     	; 0x177a <vTaskStartScheduler+0x4c>
    175a:	f8 94       	cli
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <xNextTaskUnblockTime+0x1>
    1764:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xNextTaskUnblockTime>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <xSchedulerRunning>
    176e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <xTickCount+0x1>
    1772:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <xTickCount>
    1776:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <xPortStartScheduler>
    177a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <uxTopUsedPriority>
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	08 95       	ret

00001786 <vTaskSuspendAll>:
    1786:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxSchedulerSuspended>
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxSchedulerSuspended>
    1790:	08 95       	ret

00001792 <xTaskGetTickCount>:
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	0f 92       	push	r0
    1798:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xTickCount>
    179c:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <xTickCount+0x1>
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	08 95       	ret

000017a6 <xTaskIncrementTick>:
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxSchedulerSuspended>
    17b8:	81 11       	cpse	r24, r1
    17ba:	9d c0       	rjmp	.+314    	; 0x18f6 <xTaskIncrementTick+0x150>
    17bc:	e0 90 39 07 	lds	r14, 0x0739	; 0x800739 <xTickCount>
    17c0:	f0 90 3a 07 	lds	r15, 0x073A	; 0x80073a <xTickCount+0x1>
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	e8 1a       	sub	r14, r24
    17c8:	f8 0a       	sbc	r15, r24
    17ca:	f0 92 3a 07 	sts	0x073A, r15	; 0x80073a <xTickCount+0x1>
    17ce:	e0 92 39 07 	sts	0x0739, r14	; 0x800739 <xTickCount>
    17d2:	e1 14       	cp	r14, r1
    17d4:	f1 04       	cpc	r15, r1
    17d6:	b9 f4       	brne	.+46     	; 0x1806 <xTaskIncrementTick+0x60>
    17d8:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <pxDelayedTaskList>
    17dc:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <pxDelayedTaskList+0x1>
    17e0:	20 91 4e 07 	lds	r18, 0x074E	; 0x80074e <pxOverflowDelayedTaskList>
    17e4:	30 91 4f 07 	lds	r19, 0x074F	; 0x80074f <pxOverflowDelayedTaskList+0x1>
    17e8:	30 93 51 07 	sts	0x0751, r19	; 0x800751 <pxDelayedTaskList+0x1>
    17ec:	20 93 50 07 	sts	0x0750, r18	; 0x800750 <pxDelayedTaskList>
    17f0:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <pxOverflowDelayedTaskList+0x1>
    17f4:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <pxOverflowDelayedTaskList>
    17f8:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <xNumOfOverflows>
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <xNumOfOverflows>
    1802:	0e 94 ad 09 	call	0x135a	; 0x135a <prvResetNextTaskUnblockTime>
    1806:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xNextTaskUnblockTime>
    180a:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <xNextTaskUnblockTime+0x1>
    180e:	e8 16       	cp	r14, r24
    1810:	f9 06       	cpc	r15, r25
    1812:	28 f4       	brcc	.+10     	; 0x181e <xTaskIncrementTick+0x78>
    1814:	d1 2c       	mov	r13, r1
    1816:	53 c0       	rjmp	.+166    	; 0x18be <xTaskIncrementTick+0x118>
    1818:	dd 24       	eor	r13, r13
    181a:	d3 94       	inc	r13
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <xTaskIncrementTick+0x7a>
    181e:	d1 2c       	mov	r13, r1
    1820:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxDelayedTaskList>
    1824:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxDelayedTaskList+0x1>
    1828:	80 81       	ld	r24, Z
    182a:	81 11       	cpse	r24, r1
    182c:	07 c0       	rjmp	.+14     	; 0x183c <xTaskIncrementTick+0x96>
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	9f ef       	ldi	r25, 0xFF	; 255
    1832:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <xNextTaskUnblockTime+0x1>
    1836:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xNextTaskUnblockTime>
    183a:	41 c0       	rjmp	.+130    	; 0x18be <xTaskIncrementTick+0x118>
    183c:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <pxDelayedTaskList>
    1840:	f0 91 51 07 	lds	r31, 0x0751	; 0x800751 <pxDelayedTaskList+0x1>
    1844:	05 80       	ldd	r0, Z+5	; 0x05
    1846:	f6 81       	ldd	r31, Z+6	; 0x06
    1848:	e0 2d       	mov	r30, r0
    184a:	c6 81       	ldd	r28, Z+6	; 0x06
    184c:	d7 81       	ldd	r29, Z+7	; 0x07
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	e8 16       	cp	r14, r24
    1854:	f9 06       	cpc	r15, r25
    1856:	28 f4       	brcc	.+10     	; 0x1862 <xTaskIncrementTick+0xbc>
    1858:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <xNextTaskUnblockTime+0x1>
    185c:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <xNextTaskUnblockTime>
    1860:	2e c0       	rjmp	.+92     	; 0x18be <xTaskIncrementTick+0x118>
    1862:	8e 01       	movw	r16, r28
    1864:	0e 5f       	subi	r16, 0xFE	; 254
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	c8 01       	movw	r24, r16
    186a:	0e 94 2f 08 	call	0x105e	; 0x105e <uxListRemove>
    186e:	8c 89       	ldd	r24, Y+20	; 0x14
    1870:	9d 89       	ldd	r25, Y+21	; 0x15
    1872:	89 2b       	or	r24, r25
    1874:	21 f0       	breq	.+8      	; 0x187e <xTaskIncrementTick+0xd8>
    1876:	ce 01       	movw	r24, r28
    1878:	0c 96       	adiw	r24, 0x0c	; 12
    187a:	0e 94 2f 08 	call	0x105e	; 0x105e <uxListRemove>
    187e:	8e 89       	ldd	r24, Y+22	; 0x16
    1880:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <uxTopReadyPriority>
    1884:	98 17       	cp	r25, r24
    1886:	10 f4       	brcc	.+4      	; 0x188c <xTaskIncrementTick+0xe6>
    1888:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 01       	movw	r18, r24
    1890:	22 0f       	add	r18, r18
    1892:	33 1f       	adc	r19, r19
    1894:	22 0f       	add	r18, r18
    1896:	33 1f       	adc	r19, r19
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	b8 01       	movw	r22, r16
    18a2:	8c 59       	subi	r24, 0x9C	; 156
    18a4:	98 4f       	sbci	r25, 0xF8	; 248
    18a6:	0e 94 dd 07 	call	0xfba	; 0xfba <vListInsertEnd>
    18aa:	9e 89       	ldd	r25, Y+22	; 0x16
    18ac:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    18b0:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    18b4:	86 89       	ldd	r24, Z+22	; 0x16
    18b6:	98 17       	cp	r25, r24
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <xTaskIncrementTick+0x116>
    18ba:	ae cf       	rjmp	.-164    	; 0x1818 <xTaskIncrementTick+0x72>
    18bc:	b1 cf       	rjmp	.-158    	; 0x1820 <xTaskIncrementTick+0x7a>
    18be:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    18c2:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    18c6:	86 89       	ldd	r24, Z+22	; 0x16
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	fc 01       	movw	r30, r24
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	8e 0f       	add	r24, r30
    18da:	9f 1f       	adc	r25, r31
    18dc:	fc 01       	movw	r30, r24
    18de:	ec 59       	subi	r30, 0x9C	; 156
    18e0:	f8 4f       	sbci	r31, 0xF8	; 248
    18e2:	80 81       	ld	r24, Z
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	10 f0       	brcs	.+4      	; 0x18ec <xTaskIncrementTick+0x146>
    18e8:	dd 24       	eor	r13, r13
    18ea:	d3 94       	inc	r13
    18ec:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <xYieldPending>
    18f0:	81 11       	cpse	r24, r1
    18f2:	0c c0       	rjmp	.+24     	; 0x190c <xTaskIncrementTick+0x166>
    18f4:	0d c0       	rjmp	.+26     	; 0x1910 <xTaskIncrementTick+0x16a>
    18f6:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <xPendedTicks>
    18fa:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <xPendedTicks+0x1>
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	90 93 36 07 	sts	0x0736, r25	; 0x800736 <xPendedTicks+0x1>
    1904:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <xPendedTicks>
    1908:	d1 2c       	mov	r13, r1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <xTaskIncrementTick+0x16a>
    190c:	dd 24       	eor	r13, r13
    190e:	d3 94       	inc	r13
    1910:	8d 2d       	mov	r24, r13
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	df 90       	pop	r13
    1920:	08 95       	ret

00001922 <xTaskResumeAll>:
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	0f 92       	push	r0
    1930:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxSchedulerSuspended>
    1934:	81 50       	subi	r24, 0x01	; 1
    1936:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <uxSchedulerSuspended>
    193a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxSchedulerSuspended>
    193e:	81 11       	cpse	r24, r1
    1940:	5c c0       	rjmp	.+184    	; 0x19fa <xTaskResumeAll+0xd8>
    1942:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <uxCurrentNumberOfTasks>
    1946:	81 11       	cpse	r24, r1
    1948:	33 c0       	rjmp	.+102    	; 0x19b0 <xTaskResumeAll+0x8e>
    194a:	5a c0       	rjmp	.+180    	; 0x1a00 <xTaskResumeAll+0xde>
    194c:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <xPendingReadyList+0x5>
    1950:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <xPendingReadyList+0x6>
    1954:	c6 81       	ldd	r28, Z+6	; 0x06
    1956:	d7 81       	ldd	r29, Z+7	; 0x07
    1958:	ce 01       	movw	r24, r28
    195a:	0c 96       	adiw	r24, 0x0c	; 12
    195c:	0e 94 2f 08 	call	0x105e	; 0x105e <uxListRemove>
    1960:	8e 01       	movw	r16, r28
    1962:	0e 5f       	subi	r16, 0xFE	; 254
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	c8 01       	movw	r24, r16
    1968:	0e 94 2f 08 	call	0x105e	; 0x105e <uxListRemove>
    196c:	8e 89       	ldd	r24, Y+22	; 0x16
    196e:	90 91 38 07 	lds	r25, 0x0738	; 0x800738 <uxTopReadyPriority>
    1972:	98 17       	cp	r25, r24
    1974:	10 f4       	brcc	.+4      	; 0x197a <xTaskResumeAll+0x58>
    1976:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTopReadyPriority>
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 01       	movw	r18, r24
    197e:	22 0f       	add	r18, r18
    1980:	33 1f       	adc	r19, r19
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	22 0f       	add	r18, r18
    1988:	33 1f       	adc	r19, r19
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	b8 01       	movw	r22, r16
    1990:	8c 59       	subi	r24, 0x9C	; 156
    1992:	98 4f       	sbci	r25, 0xF8	; 248
    1994:	0e 94 dd 07 	call	0xfba	; 0xfba <vListInsertEnd>
    1998:	9e 89       	ldd	r25, Y+22	; 0x16
    199a:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <pxCurrentTCB>
    199e:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <pxCurrentTCB+0x1>
    19a2:	86 89       	ldd	r24, Z+22	; 0x16
    19a4:	98 17       	cp	r25, r24
    19a6:	30 f0       	brcs	.+12     	; 0x19b4 <xTaskResumeAll+0x92>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <xYieldPending>
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <xTaskResumeAll+0x92>
    19b0:	c0 e0       	ldi	r28, 0x00	; 0
    19b2:	d0 e0       	ldi	r29, 0x00	; 0
    19b4:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <xPendingReadyList>
    19b8:	81 11       	cpse	r24, r1
    19ba:	c8 cf       	rjmp	.-112    	; 0x194c <xTaskResumeAll+0x2a>
    19bc:	cd 2b       	or	r28, r29
    19be:	11 f0       	breq	.+4      	; 0x19c4 <xTaskResumeAll+0xa2>
    19c0:	0e 94 ad 09 	call	0x135a	; 0x135a <prvResetNextTaskUnblockTime>
    19c4:	c0 91 35 07 	lds	r28, 0x0735	; 0x800735 <xPendedTicks>
    19c8:	d0 91 36 07 	lds	r29, 0x0736	; 0x800736 <xPendedTicks+0x1>
    19cc:	20 97       	sbiw	r28, 0x00	; 0
    19ce:	69 f0       	breq	.+26     	; 0x19ea <xTaskResumeAll+0xc8>
    19d0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <xTaskIncrementTick>
    19d4:	88 23       	and	r24, r24
    19d6:	19 f0       	breq	.+6      	; 0x19de <xTaskResumeAll+0xbc>
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <xYieldPending>
    19de:	21 97       	sbiw	r28, 0x01	; 1
    19e0:	b9 f7       	brne	.-18     	; 0x19d0 <xTaskResumeAll+0xae>
    19e2:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <xPendedTicks+0x1>
    19e6:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <xPendedTicks>
    19ea:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <xYieldPending>
    19ee:	88 23       	and	r24, r24
    19f0:	31 f0       	breq	.+12     	; 0x19fe <xTaskResumeAll+0xdc>
    19f2:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <xTaskResumeAll+0xde>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <xTaskResumeAll+0xde>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <vTaskDelay>:
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	ec 01       	movw	r28, r24
    1a14:	89 2b       	or	r24, r25
    1a16:	49 f0       	breq	.+18     	; 0x1a2a <vTaskDelay+0x1c>
    1a18:	0e 94 c3 0b 	call	0x1786	; 0x1786 <vTaskSuspendAll>
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <prvAddCurrentTaskToDelayedList>
    1a24:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskResumeAll>
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <vTaskDelay+0x1e>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vTaskDelay+0x26>
    1a30:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1a3a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <uxSchedulerSuspended>
    1a3e:	88 23       	and	r24, r24
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <xYieldPending>
    1a48:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    1a4a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1a4e:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <uxTopReadyPriority>
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <vTaskSwitchContext+0x1c>
    1a54:	21 50       	subi	r18, 0x01	; 1
    1a56:	82 2f       	mov	r24, r18
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	ec 59       	subi	r30, 0x9C	; 156
    1a6e:	f8 4f       	sbci	r31, 0xF8	; 248
    1a70:	30 81       	ld	r19, Z
    1a72:	33 23       	and	r19, r19
    1a74:	79 f3       	breq	.-34     	; 0x1a54 <vTaskSwitchContext+0x1a>
    1a76:	ac 01       	movw	r20, r24
    1a78:	44 0f       	add	r20, r20
    1a7a:	55 1f       	adc	r21, r21
    1a7c:	44 0f       	add	r20, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	44 0f       	add	r20, r20
    1a82:	55 1f       	adc	r21, r21
    1a84:	48 0f       	add	r20, r24
    1a86:	59 1f       	adc	r21, r25
    1a88:	df 01       	movw	r26, r30
    1a8a:	01 80       	ldd	r0, Z+1	; 0x01
    1a8c:	f2 81       	ldd	r31, Z+2	; 0x02
    1a8e:	e0 2d       	mov	r30, r0
    1a90:	02 80       	ldd	r0, Z+2	; 0x02
    1a92:	f3 81       	ldd	r31, Z+3	; 0x03
    1a94:	e0 2d       	mov	r30, r0
    1a96:	12 96       	adiw	r26, 0x02	; 2
    1a98:	fc 93       	st	X, r31
    1a9a:	ee 93       	st	-X, r30
    1a9c:	11 97       	sbiw	r26, 0x01	; 1
    1a9e:	49 59       	subi	r20, 0x99	; 153
    1aa0:	58 4f       	sbci	r21, 0xF8	; 248
    1aa2:	e4 17       	cp	r30, r20
    1aa4:	f5 07       	cpc	r31, r21
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <vTaskSwitchContext+0x78>
    1aa8:	42 81       	ldd	r20, Z+2	; 0x02
    1aaa:	53 81       	ldd	r21, Z+3	; 0x03
    1aac:	fd 01       	movw	r30, r26
    1aae:	52 83       	std	Z+2, r21	; 0x02
    1ab0:	41 83       	std	Z+1, r20	; 0x01
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	8e 0f       	add	r24, r30
    1ac2:	9f 1f       	adc	r25, r31
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ec 59       	subi	r30, 0x9C	; 156
    1ac8:	f8 4f       	sbci	r31, 0xF8	; 248
    1aca:	01 80       	ldd	r0, Z+1	; 0x01
    1acc:	f2 81       	ldd	r31, Z+2	; 0x02
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	86 81       	ldd	r24, Z+6	; 0x06
    1ad2:	97 81       	ldd	r25, Z+7	; 0x07
    1ad4:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <pxCurrentTCB+0x1>
    1ad8:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <pxCurrentTCB>
    1adc:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <uxTopReadyPriority>
    1ae0:	08 95       	ret

00001ae2 <__subsf3>:
    1ae2:	50 58       	subi	r21, 0x80	; 128

00001ae4 <__addsf3>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	aa 27       	eor	r26, r26
    1ae8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__addsf3x>
    1aec:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__fp_round>
    1af0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_pscA>
    1af4:	38 f0       	brcs	.+14     	; 0x1b04 <__addsf3+0x20>
    1af6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fp_pscB>
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__addsf3+0x20>
    1afc:	39 f4       	brne	.+14     	; 0x1b0c <__addsf3+0x28>
    1afe:	9f 3f       	cpi	r25, 0xFF	; 255
    1b00:	19 f4       	brne	.+6      	; 0x1b08 <__addsf3+0x24>
    1b02:	26 f4       	brtc	.+8      	; 0x1b0c <__addsf3+0x28>
    1b04:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_nan>
    1b08:	0e f4       	brtc	.+2      	; 0x1b0c <__addsf3+0x28>
    1b0a:	e0 95       	com	r30
    1b0c:	e7 fb       	bst	r30, 7
    1b0e:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>

00001b12 <__addsf3x>:
    1b12:	e9 2f       	mov	r30, r25
    1b14:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fp_split3>
    1b18:	58 f3       	brcs	.-42     	; 0x1af0 <__addsf3+0xc>
    1b1a:	ba 17       	cp	r27, r26
    1b1c:	62 07       	cpc	r22, r18
    1b1e:	73 07       	cpc	r23, r19
    1b20:	84 07       	cpc	r24, r20
    1b22:	95 07       	cpc	r25, r21
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__addsf3x+0x1c>
    1b26:	79 f4       	brne	.+30     	; 0x1b46 <__addsf3x+0x34>
    1b28:	a6 f5       	brtc	.+104    	; 0x1b92 <__addsf3x+0x80>
    1b2a:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__fp_zero>
    1b2e:	0e f4       	brtc	.+2      	; 0x1b32 <__addsf3x+0x20>
    1b30:	e0 95       	com	r30
    1b32:	0b 2e       	mov	r0, r27
    1b34:	ba 2f       	mov	r27, r26
    1b36:	a0 2d       	mov	r26, r0
    1b38:	0b 01       	movw	r0, r22
    1b3a:	b9 01       	movw	r22, r18
    1b3c:	90 01       	movw	r18, r0
    1b3e:	0c 01       	movw	r0, r24
    1b40:	ca 01       	movw	r24, r20
    1b42:	a0 01       	movw	r20, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	ff 27       	eor	r31, r31
    1b48:	59 1b       	sub	r21, r25
    1b4a:	99 f0       	breq	.+38     	; 0x1b72 <__addsf3x+0x60>
    1b4c:	59 3f       	cpi	r21, 0xF9	; 249
    1b4e:	50 f4       	brcc	.+20     	; 0x1b64 <__addsf3x+0x52>
    1b50:	50 3e       	cpi	r21, 0xE0	; 224
    1b52:	68 f1       	brcs	.+90     	; 0x1bae <__addsf3x+0x9c>
    1b54:	1a 16       	cp	r1, r26
    1b56:	f0 40       	sbci	r31, 0x00	; 0
    1b58:	a2 2f       	mov	r26, r18
    1b5a:	23 2f       	mov	r18, r19
    1b5c:	34 2f       	mov	r19, r20
    1b5e:	44 27       	eor	r20, r20
    1b60:	58 5f       	subi	r21, 0xF8	; 248
    1b62:	f3 cf       	rjmp	.-26     	; 0x1b4a <__addsf3x+0x38>
    1b64:	46 95       	lsr	r20
    1b66:	37 95       	ror	r19
    1b68:	27 95       	ror	r18
    1b6a:	a7 95       	ror	r26
    1b6c:	f0 40       	sbci	r31, 0x00	; 0
    1b6e:	53 95       	inc	r21
    1b70:	c9 f7       	brne	.-14     	; 0x1b64 <__addsf3x+0x52>
    1b72:	7e f4       	brtc	.+30     	; 0x1b92 <__addsf3x+0x80>
    1b74:	1f 16       	cp	r1, r31
    1b76:	ba 0b       	sbc	r27, r26
    1b78:	62 0b       	sbc	r22, r18
    1b7a:	73 0b       	sbc	r23, r19
    1b7c:	84 0b       	sbc	r24, r20
    1b7e:	ba f0       	brmi	.+46     	; 0x1bae <__addsf3x+0x9c>
    1b80:	91 50       	subi	r25, 0x01	; 1
    1b82:	a1 f0       	breq	.+40     	; 0x1bac <__addsf3x+0x9a>
    1b84:	ff 0f       	add	r31, r31
    1b86:	bb 1f       	adc	r27, r27
    1b88:	66 1f       	adc	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	c2 f7       	brpl	.-16     	; 0x1b80 <__addsf3x+0x6e>
    1b90:	0e c0       	rjmp	.+28     	; 0x1bae <__addsf3x+0x9c>
    1b92:	ba 0f       	add	r27, r26
    1b94:	62 1f       	adc	r22, r18
    1b96:	73 1f       	adc	r23, r19
    1b98:	84 1f       	adc	r24, r20
    1b9a:	48 f4       	brcc	.+18     	; 0x1bae <__addsf3x+0x9c>
    1b9c:	87 95       	ror	r24
    1b9e:	77 95       	ror	r23
    1ba0:	67 95       	ror	r22
    1ba2:	b7 95       	ror	r27
    1ba4:	f7 95       	ror	r31
    1ba6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba8:	08 f0       	brcs	.+2      	; 0x1bac <__addsf3x+0x9a>
    1baa:	b0 cf       	rjmp	.-160    	; 0x1b0c <__addsf3+0x28>
    1bac:	93 95       	inc	r25
    1bae:	88 0f       	add	r24, r24
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <__addsf3x+0xa2>
    1bb2:	99 27       	eor	r25, r25
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	97 95       	ror	r25
    1bb8:	87 95       	ror	r24
    1bba:	08 95       	ret

00001bbc <__divsf3>:
    1bbc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__divsf3x>
    1bc0:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__fp_round>
    1bc4:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fp_pscB>
    1bc8:	58 f0       	brcs	.+22     	; 0x1be0 <__divsf3+0x24>
    1bca:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_pscA>
    1bce:	40 f0       	brcs	.+16     	; 0x1be0 <__divsf3+0x24>
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <__divsf3+0x20>
    1bd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <__divsf3+0x24>
    1bd6:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>
    1bda:	51 11       	cpse	r21, r1
    1bdc:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_szero>
    1be0:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_nan>

00001be4 <__divsf3x>:
    1be4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fp_split3>
    1be8:	68 f3       	brcs	.-38     	; 0x1bc4 <__divsf3+0x8>

00001bea <__divsf3_pse>:
    1bea:	99 23       	and	r25, r25
    1bec:	b1 f3       	breq	.-20     	; 0x1bda <__divsf3+0x1e>
    1bee:	55 23       	and	r21, r21
    1bf0:	91 f3       	breq	.-28     	; 0x1bd6 <__divsf3+0x1a>
    1bf2:	95 1b       	sub	r25, r21
    1bf4:	55 0b       	sbc	r21, r21
    1bf6:	bb 27       	eor	r27, r27
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	62 17       	cp	r22, r18
    1bfc:	73 07       	cpc	r23, r19
    1bfe:	84 07       	cpc	r24, r20
    1c00:	38 f0       	brcs	.+14     	; 0x1c10 <__divsf3_pse+0x26>
    1c02:	9f 5f       	subi	r25, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	22 0f       	add	r18, r18
    1c08:	33 1f       	adc	r19, r19
    1c0a:	44 1f       	adc	r20, r20
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	a9 f3       	breq	.-22     	; 0x1bfa <__divsf3_pse+0x10>
    1c10:	35 d0       	rcall	.+106    	; 0x1c7c <__divsf3_pse+0x92>
    1c12:	0e 2e       	mov	r0, r30
    1c14:	3a f0       	brmi	.+14     	; 0x1c24 <__divsf3_pse+0x3a>
    1c16:	e0 e8       	ldi	r30, 0x80	; 128
    1c18:	32 d0       	rcall	.+100    	; 0x1c7e <__divsf3_pse+0x94>
    1c1a:	91 50       	subi	r25, 0x01	; 1
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	e6 95       	lsr	r30
    1c20:	00 1c       	adc	r0, r0
    1c22:	ca f7       	brpl	.-14     	; 0x1c16 <__divsf3_pse+0x2c>
    1c24:	2b d0       	rcall	.+86     	; 0x1c7c <__divsf3_pse+0x92>
    1c26:	fe 2f       	mov	r31, r30
    1c28:	29 d0       	rcall	.+82     	; 0x1c7c <__divsf3_pse+0x92>
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	bb 1f       	adc	r27, r27
    1c32:	26 17       	cp	r18, r22
    1c34:	37 07       	cpc	r19, r23
    1c36:	48 07       	cpc	r20, r24
    1c38:	ab 07       	cpc	r26, r27
    1c3a:	b0 e8       	ldi	r27, 0x80	; 128
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <__divsf3_pse+0x56>
    1c3e:	bb 0b       	sbc	r27, r27
    1c40:	80 2d       	mov	r24, r0
    1c42:	bf 01       	movw	r22, r30
    1c44:	ff 27       	eor	r31, r31
    1c46:	93 58       	subi	r25, 0x83	; 131
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	3a f0       	brmi	.+14     	; 0x1c5a <__divsf3_pse+0x70>
    1c4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c4e:	51 05       	cpc	r21, r1
    1c50:	78 f0       	brcs	.+30     	; 0x1c70 <__divsf3_pse+0x86>
    1c52:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>
    1c56:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_szero>
    1c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5c:	e4 f3       	brlt	.-8      	; 0x1c56 <__divsf3_pse+0x6c>
    1c5e:	98 3e       	cpi	r25, 0xE8	; 232
    1c60:	d4 f3       	brlt	.-12     	; 0x1c56 <__divsf3_pse+0x6c>
    1c62:	86 95       	lsr	r24
    1c64:	77 95       	ror	r23
    1c66:	67 95       	ror	r22
    1c68:	b7 95       	ror	r27
    1c6a:	f7 95       	ror	r31
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	c9 f7       	brne	.-14     	; 0x1c62 <__divsf3_pse+0x78>
    1c70:	88 0f       	add	r24, r24
    1c72:	91 1d       	adc	r25, r1
    1c74:	96 95       	lsr	r25
    1c76:	87 95       	ror	r24
    1c78:	97 f9       	bld	r25, 7
    1c7a:	08 95       	ret
    1c7c:	e1 e0       	ldi	r30, 0x01	; 1
    1c7e:	66 0f       	add	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	88 1f       	adc	r24, r24
    1c84:	bb 1f       	adc	r27, r27
    1c86:	62 17       	cp	r22, r18
    1c88:	73 07       	cpc	r23, r19
    1c8a:	84 07       	cpc	r24, r20
    1c8c:	ba 07       	cpc	r27, r26
    1c8e:	20 f0       	brcs	.+8      	; 0x1c98 <__divsf3_pse+0xae>
    1c90:	62 1b       	sub	r22, r18
    1c92:	73 0b       	sbc	r23, r19
    1c94:	84 0b       	sbc	r24, r20
    1c96:	ba 0b       	sbc	r27, r26
    1c98:	ee 1f       	adc	r30, r30
    1c9a:	88 f7       	brcc	.-30     	; 0x1c7e <__divsf3_pse+0x94>
    1c9c:	e0 95       	com	r30
    1c9e:	08 95       	ret

00001ca0 <__fixunssfsi>:
    1ca0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_splitA>
    1ca4:	88 f0       	brcs	.+34     	; 0x1cc8 <__fixunssfsi+0x28>
    1ca6:	9f 57       	subi	r25, 0x7F	; 127
    1ca8:	98 f0       	brcs	.+38     	; 0x1cd0 <__fixunssfsi+0x30>
    1caa:	b9 2f       	mov	r27, r25
    1cac:	99 27       	eor	r25, r25
    1cae:	b7 51       	subi	r27, 0x17	; 23
    1cb0:	b0 f0       	brcs	.+44     	; 0x1cde <__fixunssfsi+0x3e>
    1cb2:	e1 f0       	breq	.+56     	; 0x1cec <__fixunssfsi+0x4c>
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	1a f0       	brmi	.+6      	; 0x1cc4 <__fixunssfsi+0x24>
    1cbe:	ba 95       	dec	r27
    1cc0:	c9 f7       	brne	.-14     	; 0x1cb4 <__fixunssfsi+0x14>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <__fixunssfsi+0x4c>
    1cc4:	b1 30       	cpi	r27, 0x01	; 1
    1cc6:	91 f0       	breq	.+36     	; 0x1cec <__fixunssfsi+0x4c>
    1cc8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__fp_zero>
    1ccc:	b1 e0       	ldi	r27, 0x01	; 1
    1cce:	08 95       	ret
    1cd0:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__fp_zero>
    1cd4:	67 2f       	mov	r22, r23
    1cd6:	78 2f       	mov	r23, r24
    1cd8:	88 27       	eor	r24, r24
    1cda:	b8 5f       	subi	r27, 0xF8	; 248
    1cdc:	39 f0       	breq	.+14     	; 0x1cec <__fixunssfsi+0x4c>
    1cde:	b9 3f       	cpi	r27, 0xF9	; 249
    1ce0:	cc f3       	brlt	.-14     	; 0x1cd4 <__fixunssfsi+0x34>
    1ce2:	86 95       	lsr	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b3 95       	inc	r27
    1cea:	d9 f7       	brne	.-10     	; 0x1ce2 <__fixunssfsi+0x42>
    1cec:	3e f4       	brtc	.+14     	; 0x1cfc <__fixunssfsi+0x5c>
    1cee:	90 95       	com	r25
    1cf0:	80 95       	com	r24
    1cf2:	70 95       	com	r23
    1cf4:	61 95       	neg	r22
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	08 95       	ret

00001cfe <__floatunsisf>:
    1cfe:	e8 94       	clt
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <__floatsisf+0x12>

00001d02 <__floatsisf>:
    1d02:	97 fb       	bst	r25, 7
    1d04:	3e f4       	brtc	.+14     	; 0x1d14 <__floatsisf+0x12>
    1d06:	90 95       	com	r25
    1d08:	80 95       	com	r24
    1d0a:	70 95       	com	r23
    1d0c:	61 95       	neg	r22
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	99 23       	and	r25, r25
    1d16:	a9 f0       	breq	.+42     	; 0x1d42 <__floatsisf+0x40>
    1d18:	f9 2f       	mov	r31, r25
    1d1a:	96 e9       	ldi	r25, 0x96	; 150
    1d1c:	bb 27       	eor	r27, r27
    1d1e:	93 95       	inc	r25
    1d20:	f6 95       	lsr	r31
    1d22:	87 95       	ror	r24
    1d24:	77 95       	ror	r23
    1d26:	67 95       	ror	r22
    1d28:	b7 95       	ror	r27
    1d2a:	f1 11       	cpse	r31, r1
    1d2c:	f8 cf       	rjmp	.-16     	; 0x1d1e <__floatsisf+0x1c>
    1d2e:	fa f4       	brpl	.+62     	; 0x1d6e <__floatsisf+0x6c>
    1d30:	bb 0f       	add	r27, r27
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <__floatsisf+0x36>
    1d34:	60 ff       	sbrs	r22, 0
    1d36:	1b c0       	rjmp	.+54     	; 0x1d6e <__floatsisf+0x6c>
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	16 c0       	rjmp	.+44     	; 0x1d6e <__floatsisf+0x6c>
    1d42:	88 23       	and	r24, r24
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <__floatsisf+0x48>
    1d46:	96 e9       	ldi	r25, 0x96	; 150
    1d48:	11 c0       	rjmp	.+34     	; 0x1d6c <__floatsisf+0x6a>
    1d4a:	77 23       	and	r23, r23
    1d4c:	21 f0       	breq	.+8      	; 0x1d56 <__floatsisf+0x54>
    1d4e:	9e e8       	ldi	r25, 0x8E	; 142
    1d50:	87 2f       	mov	r24, r23
    1d52:	76 2f       	mov	r23, r22
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <__floatsisf+0x5e>
    1d56:	66 23       	and	r22, r22
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <__floatsisf+0x74>
    1d5a:	96 e8       	ldi	r25, 0x86	; 134
    1d5c:	86 2f       	mov	r24, r22
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	2a f0       	brmi	.+10     	; 0x1d6e <__floatsisf+0x6c>
    1d64:	9a 95       	dec	r25
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	da f7       	brpl	.-10     	; 0x1d64 <__floatsisf+0x62>
    1d6e:	88 0f       	add	r24, r24
    1d70:	96 95       	lsr	r25
    1d72:	87 95       	ror	r24
    1d74:	97 f9       	bld	r25, 7
    1d76:	08 95       	ret

00001d78 <__fp_inf>:
    1d78:	97 f9       	bld	r25, 7
    1d7a:	9f 67       	ori	r25, 0x7F	; 127
    1d7c:	80 e8       	ldi	r24, 0x80	; 128
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	08 95       	ret

00001d84 <__fp_nan>:
    1d84:	9f ef       	ldi	r25, 0xFF	; 255
    1d86:	80 ec       	ldi	r24, 0xC0	; 192
    1d88:	08 95       	ret

00001d8a <__fp_pscA>:
    1d8a:	00 24       	eor	r0, r0
    1d8c:	0a 94       	dec	r0
    1d8e:	16 16       	cp	r1, r22
    1d90:	17 06       	cpc	r1, r23
    1d92:	18 06       	cpc	r1, r24
    1d94:	09 06       	cpc	r0, r25
    1d96:	08 95       	ret

00001d98 <__fp_pscB>:
    1d98:	00 24       	eor	r0, r0
    1d9a:	0a 94       	dec	r0
    1d9c:	12 16       	cp	r1, r18
    1d9e:	13 06       	cpc	r1, r19
    1da0:	14 06       	cpc	r1, r20
    1da2:	05 06       	cpc	r0, r21
    1da4:	08 95       	ret

00001da6 <__fp_round>:
    1da6:	09 2e       	mov	r0, r25
    1da8:	03 94       	inc	r0
    1daa:	00 0c       	add	r0, r0
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <__fp_round+0xc>
    1dae:	88 23       	and	r24, r24
    1db0:	52 f0       	brmi	.+20     	; 0x1dc6 <__fp_round+0x20>
    1db2:	bb 0f       	add	r27, r27
    1db4:	40 f4       	brcc	.+16     	; 0x1dc6 <__fp_round+0x20>
    1db6:	bf 2b       	or	r27, r31
    1db8:	11 f4       	brne	.+4      	; 0x1dbe <__fp_round+0x18>
    1dba:	60 ff       	sbrs	r22, 0
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <__fp_round+0x20>
    1dbe:	6f 5f       	subi	r22, 0xFF	; 255
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	08 95       	ret

00001dc8 <__fp_split3>:
    1dc8:	57 fd       	sbrc	r21, 7
    1dca:	90 58       	subi	r25, 0x80	; 128
    1dcc:	44 0f       	add	r20, r20
    1dce:	55 1f       	adc	r21, r21
    1dd0:	59 f0       	breq	.+22     	; 0x1de8 <__fp_splitA+0x10>
    1dd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd4:	71 f0       	breq	.+28     	; 0x1df2 <__fp_splitA+0x1a>
    1dd6:	47 95       	ror	r20

00001dd8 <__fp_splitA>:
    1dd8:	88 0f       	add	r24, r24
    1dda:	97 fb       	bst	r25, 7
    1ddc:	99 1f       	adc	r25, r25
    1dde:	61 f0       	breq	.+24     	; 0x1df8 <__fp_splitA+0x20>
    1de0:	9f 3f       	cpi	r25, 0xFF	; 255
    1de2:	79 f0       	breq	.+30     	; 0x1e02 <__fp_splitA+0x2a>
    1de4:	87 95       	ror	r24
    1de6:	08 95       	ret
    1de8:	12 16       	cp	r1, r18
    1dea:	13 06       	cpc	r1, r19
    1dec:	14 06       	cpc	r1, r20
    1dee:	55 1f       	adc	r21, r21
    1df0:	f2 cf       	rjmp	.-28     	; 0x1dd6 <__fp_split3+0xe>
    1df2:	46 95       	lsr	r20
    1df4:	f1 df       	rcall	.-30     	; 0x1dd8 <__fp_splitA>
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <__fp_splitA+0x30>
    1df8:	16 16       	cp	r1, r22
    1dfa:	17 06       	cpc	r1, r23
    1dfc:	18 06       	cpc	r1, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	f1 cf       	rjmp	.-30     	; 0x1de4 <__fp_splitA+0xc>
    1e02:	86 95       	lsr	r24
    1e04:	71 05       	cpc	r23, r1
    1e06:	61 05       	cpc	r22, r1
    1e08:	08 94       	sec
    1e0a:	08 95       	ret

00001e0c <__fp_zero>:
    1e0c:	e8 94       	clt

00001e0e <__fp_szero>:
    1e0e:	bb 27       	eor	r27, r27
    1e10:	66 27       	eor	r22, r22
    1e12:	77 27       	eor	r23, r23
    1e14:	cb 01       	movw	r24, r22
    1e16:	97 f9       	bld	r25, 7
    1e18:	08 95       	ret
    1e1a:	16 f0       	brts	.+4      	; 0x1e20 <__fp_szero+0x12>
    1e1c:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__fp_mpack>
    1e20:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_nan>
    1e24:	68 94       	set
    1e26:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>

00001e2a <log>:
    1e2a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_splitA>
    1e2e:	a8 f3       	brcs	.-22     	; 0x1e1a <__fp_szero+0xc>
    1e30:	99 23       	and	r25, r25
    1e32:	c1 f3       	breq	.-16     	; 0x1e24 <__fp_szero+0x16>
    1e34:	ae f3       	brts	.-22     	; 0x1e20 <__fp_szero+0x12>
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	1f 93       	push	r17
    1e3c:	0f 93       	push	r16
    1e3e:	ff 92       	push	r15
    1e40:	c9 2f       	mov	r28, r25
    1e42:	dd 27       	eor	r29, r29
    1e44:	88 23       	and	r24, r24
    1e46:	2a f0       	brmi	.+10     	; 0x1e52 <log+0x28>
    1e48:	21 97       	sbiw	r28, 0x01	; 1
    1e4a:	66 0f       	add	r22, r22
    1e4c:	77 1f       	adc	r23, r23
    1e4e:	88 1f       	adc	r24, r24
    1e50:	da f7       	brpl	.-10     	; 0x1e48 <log+0x1e>
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f eb       	ldi	r21, 0xBF	; 191
    1e5a:	9f e3       	ldi	r25, 0x3F	; 63
    1e5c:	88 39       	cpi	r24, 0x98	; 152
    1e5e:	20 f0       	brcs	.+8      	; 0x1e68 <log+0x3e>
    1e60:	80 3e       	cpi	r24, 0xE0	; 224
    1e62:	38 f0       	brcs	.+14     	; 0x1e72 <log+0x48>
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	8f 77       	andi	r24, 0x7F	; 127
    1e68:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__addsf3>
    1e6c:	e4 e5       	ldi	r30, 0x54	; 84
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	04 c0       	rjmp	.+8      	; 0x1e7a <log+0x50>
    1e72:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__addsf3>
    1e76:	e1 e8       	ldi	r30, 0x81	; 129
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__fp_powser>
    1e7e:	8b 01       	movw	r16, r22
    1e80:	be 01       	movw	r22, r28
    1e82:	ec 01       	movw	r28, r24
    1e84:	fb 2e       	mov	r15, r27
    1e86:	6f 57       	subi	r22, 0x7F	; 127
    1e88:	71 09       	sbc	r23, r1
    1e8a:	75 95       	asr	r23
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 0b       	sbc	r24, r24
    1e90:	99 0b       	sbc	r25, r25
    1e92:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
    1e96:	28 e1       	ldi	r18, 0x18	; 24
    1e98:	32 e7       	ldi	r19, 0x72	; 114
    1e9a:	41 e3       	ldi	r20, 0x31	; 49
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__mulsf3x>
    1ea2:	af 2d       	mov	r26, r15
    1ea4:	98 01       	movw	r18, r16
    1ea6:	ae 01       	movw	r20, r28
    1ea8:	ff 90       	pop	r15
    1eaa:	0f 91       	pop	r16
    1eac:	1f 91       	pop	r17
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__addsf3x>
    1eb6:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__fp_round>

00001eba <__mulsf3>:
    1eba:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__mulsf3x>
    1ebe:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__fp_round>
    1ec2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_pscA>
    1ec6:	38 f0       	brcs	.+14     	; 0x1ed6 <__mulsf3+0x1c>
    1ec8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__fp_pscB>
    1ecc:	20 f0       	brcs	.+8      	; 0x1ed6 <__mulsf3+0x1c>
    1ece:	95 23       	and	r25, r21
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <__mulsf3+0x1c>
    1ed2:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>
    1ed6:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_nan>
    1eda:	11 24       	eor	r1, r1
    1edc:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_szero>

00001ee0 <__mulsf3x>:
    1ee0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fp_split3>
    1ee4:	70 f3       	brcs	.-36     	; 0x1ec2 <__mulsf3+0x8>

00001ee6 <__mulsf3_pse>:
    1ee6:	95 9f       	mul	r25, r21
    1ee8:	c1 f3       	breq	.-16     	; 0x1eda <__mulsf3+0x20>
    1eea:	95 0f       	add	r25, r21
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	55 1f       	adc	r21, r21
    1ef0:	62 9f       	mul	r22, r18
    1ef2:	f0 01       	movw	r30, r0
    1ef4:	72 9f       	mul	r23, r18
    1ef6:	bb 27       	eor	r27, r27
    1ef8:	f0 0d       	add	r31, r0
    1efa:	b1 1d       	adc	r27, r1
    1efc:	63 9f       	mul	r22, r19
    1efe:	aa 27       	eor	r26, r26
    1f00:	f0 0d       	add	r31, r0
    1f02:	b1 1d       	adc	r27, r1
    1f04:	aa 1f       	adc	r26, r26
    1f06:	64 9f       	mul	r22, r20
    1f08:	66 27       	eor	r22, r22
    1f0a:	b0 0d       	add	r27, r0
    1f0c:	a1 1d       	adc	r26, r1
    1f0e:	66 1f       	adc	r22, r22
    1f10:	82 9f       	mul	r24, r18
    1f12:	22 27       	eor	r18, r18
    1f14:	b0 0d       	add	r27, r0
    1f16:	a1 1d       	adc	r26, r1
    1f18:	62 1f       	adc	r22, r18
    1f1a:	73 9f       	mul	r23, r19
    1f1c:	b0 0d       	add	r27, r0
    1f1e:	a1 1d       	adc	r26, r1
    1f20:	62 1f       	adc	r22, r18
    1f22:	83 9f       	mul	r24, r19
    1f24:	a0 0d       	add	r26, r0
    1f26:	61 1d       	adc	r22, r1
    1f28:	22 1f       	adc	r18, r18
    1f2a:	74 9f       	mul	r23, r20
    1f2c:	33 27       	eor	r19, r19
    1f2e:	a0 0d       	add	r26, r0
    1f30:	61 1d       	adc	r22, r1
    1f32:	23 1f       	adc	r18, r19
    1f34:	84 9f       	mul	r24, r20
    1f36:	60 0d       	add	r22, r0
    1f38:	21 1d       	adc	r18, r1
    1f3a:	82 2f       	mov	r24, r18
    1f3c:	76 2f       	mov	r23, r22
    1f3e:	6a 2f       	mov	r22, r26
    1f40:	11 24       	eor	r1, r1
    1f42:	9f 57       	subi	r25, 0x7F	; 127
    1f44:	50 40       	sbci	r21, 0x00	; 0
    1f46:	9a f0       	brmi	.+38     	; 0x1f6e <__mulsf3_pse+0x88>
    1f48:	f1 f0       	breq	.+60     	; 0x1f86 <__mulsf3_pse+0xa0>
    1f4a:	88 23       	and	r24, r24
    1f4c:	4a f0       	brmi	.+18     	; 0x1f60 <__mulsf3_pse+0x7a>
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	bb 1f       	adc	r27, r27
    1f54:	66 1f       	adc	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	88 1f       	adc	r24, r24
    1f5a:	91 50       	subi	r25, 0x01	; 1
    1f5c:	50 40       	sbci	r21, 0x00	; 0
    1f5e:	a9 f7       	brne	.-22     	; 0x1f4a <__mulsf3_pse+0x64>
    1f60:	9e 3f       	cpi	r25, 0xFE	; 254
    1f62:	51 05       	cpc	r21, r1
    1f64:	80 f0       	brcs	.+32     	; 0x1f86 <__mulsf3_pse+0xa0>
    1f66:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>
    1f6a:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_szero>
    1f6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f70:	e4 f3       	brlt	.-8      	; 0x1f6a <__mulsf3_pse+0x84>
    1f72:	98 3e       	cpi	r25, 0xE8	; 232
    1f74:	d4 f3       	brlt	.-12     	; 0x1f6a <__mulsf3_pse+0x84>
    1f76:	86 95       	lsr	r24
    1f78:	77 95       	ror	r23
    1f7a:	67 95       	ror	r22
    1f7c:	b7 95       	ror	r27
    1f7e:	f7 95       	ror	r31
    1f80:	e7 95       	ror	r30
    1f82:	9f 5f       	subi	r25, 0xFF	; 255
    1f84:	c1 f7       	brne	.-16     	; 0x1f76 <__mulsf3_pse+0x90>
    1f86:	fe 2b       	or	r31, r30
    1f88:	88 0f       	add	r24, r24
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	96 95       	lsr	r25
    1f8e:	87 95       	ror	r24
    1f90:	97 f9       	bld	r25, 7
    1f92:	08 95       	ret

00001f94 <pow>:
    1f94:	fa 01       	movw	r30, r20
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	30 96       	adiw	r30, 0x00	; 0
    1f9c:	21 05       	cpc	r18, r1
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	a1 f1       	breq	.+104    	; 0x200a <pow+0x76>
    1fa2:	61 15       	cp	r22, r1
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	61 f4       	brne	.+24     	; 0x1fc0 <pow+0x2c>
    1fa8:	80 38       	cpi	r24, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	9b 07       	cpc	r25, r27
    1fae:	49 f1       	breq	.+82     	; 0x2002 <pow+0x6e>
    1fb0:	68 94       	set
    1fb2:	90 38       	cpi	r25, 0x80	; 128
    1fb4:	81 05       	cpc	r24, r1
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <pow+0x3c>
    1fb8:	80 38       	cpi	r24, 0x80	; 128
    1fba:	bf ef       	ldi	r27, 0xFF	; 255
    1fbc:	9b 07       	cpc	r25, r27
    1fbe:	41 f0       	breq	.+16     	; 0x1fd0 <pow+0x3c>
    1fc0:	99 23       	and	r25, r25
    1fc2:	4a f5       	brpl	.+82     	; 0x2016 <pow+0x82>
    1fc4:	ff 3f       	cpi	r31, 0xFF	; 255
    1fc6:	e1 05       	cpc	r30, r1
    1fc8:	31 05       	cpc	r19, r1
    1fca:	21 05       	cpc	r18, r1
    1fcc:	19 f1       	breq	.+70     	; 0x2014 <pow+0x80>
    1fce:	e8 94       	clt
    1fd0:	08 94       	sec
    1fd2:	e7 95       	ror	r30
    1fd4:	d9 01       	movw	r26, r18
    1fd6:	aa 23       	and	r26, r26
    1fd8:	29 f4       	brne	.+10     	; 0x1fe4 <pow+0x50>
    1fda:	ab 2f       	mov	r26, r27
    1fdc:	be 2f       	mov	r27, r30
    1fde:	f8 5f       	subi	r31, 0xF8	; 248
    1fe0:	d0 f3       	brcs	.-12     	; 0x1fd6 <pow+0x42>
    1fe2:	10 c0       	rjmp	.+32     	; 0x2004 <pow+0x70>
    1fe4:	ff 5f       	subi	r31, 0xFF	; 255
    1fe6:	70 f4       	brcc	.+28     	; 0x2004 <pow+0x70>
    1fe8:	a6 95       	lsr	r26
    1fea:	e0 f7       	brcc	.-8      	; 0x1fe4 <pow+0x50>
    1fec:	f7 39       	cpi	r31, 0x97	; 151
    1fee:	50 f0       	brcs	.+20     	; 0x2004 <pow+0x70>
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <pow+0x64>
    1ff2:	ff 3a       	cpi	r31, 0xAF	; 175
    1ff4:	38 f4       	brcc	.+14     	; 0x2004 <pow+0x70>
    1ff6:	9f 77       	andi	r25, 0x7F	; 127
    1ff8:	9f 93       	push	r25
    1ffa:	0d d0       	rcall	.+26     	; 0x2016 <pow+0x82>
    1ffc:	0f 90       	pop	r0
    1ffe:	07 fc       	sbrc	r0, 7
    2000:	90 58       	subi	r25, 0x80	; 128
    2002:	08 95       	ret
    2004:	46 f0       	brts	.+16     	; 0x2016 <pow+0x82>
    2006:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_nan>
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	80 e8       	ldi	r24, 0x80	; 128
    2010:	9f e3       	ldi	r25, 0x3F	; 63
    2012:	08 95       	ret
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	9f 77       	andi	r25, 0x7F	; 127
    2018:	5f 93       	push	r21
    201a:	4f 93       	push	r20
    201c:	3f 93       	push	r19
    201e:	2f 93       	push	r18
    2020:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <log>
    2024:	2f 91       	pop	r18
    2026:	3f 91       	pop	r19
    2028:	4f 91       	pop	r20
    202a:	5f 91       	pop	r21
    202c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__mulsf3>
    2030:	0c 94 22 10 	jmp	0x2044	; 0x2044 <exp>
    2034:	29 f4       	brne	.+10     	; 0x2040 <pow+0xac>
    2036:	16 f0       	brts	.+4      	; 0x203c <pow+0xa8>
    2038:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>
    203c:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__fp_zero>
    2040:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__fp_nan>

00002044 <exp>:
    2044:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_splitA>
    2048:	a8 f3       	brcs	.-22     	; 0x2034 <pow+0xa0>
    204a:	96 38       	cpi	r25, 0x86	; 134
    204c:	a0 f7       	brcc	.-24     	; 0x2036 <pow+0xa2>
    204e:	07 f8       	bld	r0, 7
    2050:	0f 92       	push	r0
    2052:	e8 94       	clt
    2054:	2b e3       	ldi	r18, 0x3B	; 59
    2056:	3a ea       	ldi	r19, 0xAA	; 170
    2058:	48 eb       	ldi	r20, 0xB8	; 184
    205a:	5f e7       	ldi	r21, 0x7F	; 127
    205c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__mulsf3_pse>
    2060:	0f 92       	push	r0
    2062:	0f 92       	push	r0
    2064:	0f 92       	push	r0
    2066:	4d b7       	in	r20, 0x3d	; 61
    2068:	5e b7       	in	r21, 0x3e	; 62
    206a:	0f 92       	push	r0
    206c:	0e 94 cb 10 	call	0x2196	; 0x2196 <modf>
    2070:	ee ea       	ldi	r30, 0xAE	; 174
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__fp_powser>
    2078:	4f 91       	pop	r20
    207a:	5f 91       	pop	r21
    207c:	ef 91       	pop	r30
    207e:	ff 91       	pop	r31
    2080:	e5 95       	asr	r30
    2082:	ee 1f       	adc	r30, r30
    2084:	ff 1f       	adc	r31, r31
    2086:	49 f0       	breq	.+18     	; 0x209a <exp+0x56>
    2088:	fe 57       	subi	r31, 0x7E	; 126
    208a:	e0 68       	ori	r30, 0x80	; 128
    208c:	44 27       	eor	r20, r20
    208e:	ee 0f       	add	r30, r30
    2090:	44 1f       	adc	r20, r20
    2092:	fa 95       	dec	r31
    2094:	e1 f7       	brne	.-8      	; 0x208e <exp+0x4a>
    2096:	41 95       	neg	r20
    2098:	55 0b       	sbc	r21, r21
    209a:	0e 94 95 10 	call	0x212a	; 0x212a <ldexp>
    209e:	0f 90       	pop	r0
    20a0:	07 fe       	sbrs	r0, 7
    20a2:	0c 94 89 10 	jmp	0x2112	; 0x2112 <inverse>
    20a6:	08 95       	ret

000020a8 <__fp_mpack>:
    20a8:	9f 3f       	cpi	r25, 0xFF	; 255
    20aa:	31 f0       	breq	.+12     	; 0x20b8 <__fp_mpack_finite+0xc>

000020ac <__fp_mpack_finite>:
    20ac:	91 50       	subi	r25, 0x01	; 1
    20ae:	20 f4       	brcc	.+8      	; 0x20b8 <__fp_mpack_finite+0xc>
    20b0:	87 95       	ror	r24
    20b2:	77 95       	ror	r23
    20b4:	67 95       	ror	r22
    20b6:	b7 95       	ror	r27
    20b8:	88 0f       	add	r24, r24
    20ba:	91 1d       	adc	r25, r1
    20bc:	96 95       	lsr	r25
    20be:	87 95       	ror	r24
    20c0:	97 f9       	bld	r25, 7
    20c2:	08 95       	ret

000020c4 <__fp_powser>:
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	1f 93       	push	r17
    20ca:	0f 93       	push	r16
    20cc:	ff 92       	push	r15
    20ce:	ef 92       	push	r14
    20d0:	df 92       	push	r13
    20d2:	7b 01       	movw	r14, r22
    20d4:	8c 01       	movw	r16, r24
    20d6:	68 94       	set
    20d8:	06 c0       	rjmp	.+12     	; 0x20e6 <__fp_powser+0x22>
    20da:	da 2e       	mov	r13, r26
    20dc:	ef 01       	movw	r28, r30
    20de:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__mulsf3x>
    20e2:	fe 01       	movw	r30, r28
    20e4:	e8 94       	clt
    20e6:	a5 91       	lpm	r26, Z+
    20e8:	25 91       	lpm	r18, Z+
    20ea:	35 91       	lpm	r19, Z+
    20ec:	45 91       	lpm	r20, Z+
    20ee:	55 91       	lpm	r21, Z+
    20f0:	a6 f3       	brts	.-24     	; 0x20da <__fp_powser+0x16>
    20f2:	ef 01       	movw	r28, r30
    20f4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <__addsf3x>
    20f8:	fe 01       	movw	r30, r28
    20fa:	97 01       	movw	r18, r14
    20fc:	a8 01       	movw	r20, r16
    20fe:	da 94       	dec	r13
    2100:	69 f7       	brne	.-38     	; 0x20dc <__fp_powser+0x18>
    2102:	df 90       	pop	r13
    2104:	ef 90       	pop	r14
    2106:	ff 90       	pop	r15
    2108:	0f 91       	pop	r16
    210a:	1f 91       	pop	r17
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <inverse>:
    2112:	9b 01       	movw	r18, r22
    2114:	ac 01       	movw	r20, r24
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	70 e0       	ldi	r23, 0x00	; 0
    211a:	80 e8       	ldi	r24, 0x80	; 128
    211c:	9f e3       	ldi	r25, 0x3F	; 63
    211e:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__divsf3>
    2122:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_inf>
    2126:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__fp_mpack>

0000212a <ldexp>:
    212a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_splitA>
    212e:	d8 f3       	brcs	.-10     	; 0x2126 <inverse+0x14>
    2130:	99 23       	and	r25, r25
    2132:	c9 f3       	breq	.-14     	; 0x2126 <inverse+0x14>
    2134:	94 0f       	add	r25, r20
    2136:	51 1d       	adc	r21, r1
    2138:	a3 f3       	brvs	.-24     	; 0x2122 <inverse+0x10>
    213a:	91 50       	subi	r25, 0x01	; 1
    213c:	50 40       	sbci	r21, 0x00	; 0
    213e:	94 f0       	brlt	.+36     	; 0x2164 <ldexp+0x3a>
    2140:	59 f0       	breq	.+22     	; 0x2158 <ldexp+0x2e>
    2142:	88 23       	and	r24, r24
    2144:	32 f0       	brmi	.+12     	; 0x2152 <ldexp+0x28>
    2146:	66 0f       	add	r22, r22
    2148:	77 1f       	adc	r23, r23
    214a:	88 1f       	adc	r24, r24
    214c:	91 50       	subi	r25, 0x01	; 1
    214e:	50 40       	sbci	r21, 0x00	; 0
    2150:	c1 f7       	brne	.-16     	; 0x2142 <ldexp+0x18>
    2152:	9e 3f       	cpi	r25, 0xFE	; 254
    2154:	51 05       	cpc	r21, r1
    2156:	2c f7       	brge	.-54     	; 0x2122 <inverse+0x10>
    2158:	88 0f       	add	r24, r24
    215a:	91 1d       	adc	r25, r1
    215c:	96 95       	lsr	r25
    215e:	87 95       	ror	r24
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret
    2164:	5f 3f       	cpi	r21, 0xFF	; 255
    2166:	ac f0       	brlt	.+42     	; 0x2192 <ldexp+0x68>
    2168:	98 3e       	cpi	r25, 0xE8	; 232
    216a:	9c f0       	brlt	.+38     	; 0x2192 <ldexp+0x68>
    216c:	bb 27       	eor	r27, r27
    216e:	86 95       	lsr	r24
    2170:	77 95       	ror	r23
    2172:	67 95       	ror	r22
    2174:	b7 95       	ror	r27
    2176:	08 f4       	brcc	.+2      	; 0x217a <ldexp+0x50>
    2178:	b1 60       	ori	r27, 0x01	; 1
    217a:	93 95       	inc	r25
    217c:	c1 f7       	brne	.-16     	; 0x216e <ldexp+0x44>
    217e:	bb 0f       	add	r27, r27
    2180:	58 f7       	brcc	.-42     	; 0x2158 <ldexp+0x2e>
    2182:	11 f4       	brne	.+4      	; 0x2188 <ldexp+0x5e>
    2184:	60 ff       	sbrs	r22, 0
    2186:	e8 cf       	rjmp	.-48     	; 0x2158 <ldexp+0x2e>
    2188:	6f 5f       	subi	r22, 0xFF	; 255
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
    218c:	8f 4f       	sbci	r24, 0xFF	; 255
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	e3 cf       	rjmp	.-58     	; 0x2158 <ldexp+0x2e>
    2192:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_szero>

00002196 <modf>:
    2196:	fa 01       	movw	r30, r20
    2198:	dc 01       	movw	r26, r24
    219a:	aa 0f       	add	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	9b 01       	movw	r18, r22
    21a0:	ac 01       	movw	r20, r24
    21a2:	bf 57       	subi	r27, 0x7F	; 127
    21a4:	28 f4       	brcc	.+10     	; 0x21b0 <modf+0x1a>
    21a6:	22 27       	eor	r18, r18
    21a8:	33 27       	eor	r19, r19
    21aa:	44 27       	eor	r20, r20
    21ac:	50 78       	andi	r21, 0x80	; 128
    21ae:	20 c0       	rjmp	.+64     	; 0x21f0 <modf+0x5a>
    21b0:	b7 51       	subi	r27, 0x17	; 23
    21b2:	90 f4       	brcc	.+36     	; 0x21d8 <modf+0x42>
    21b4:	ab 2f       	mov	r26, r27
    21b6:	00 24       	eor	r0, r0
    21b8:	46 95       	lsr	r20
    21ba:	37 95       	ror	r19
    21bc:	27 95       	ror	r18
    21be:	01 1c       	adc	r0, r1
    21c0:	a3 95       	inc	r26
    21c2:	d2 f3       	brmi	.-12     	; 0x21b8 <modf+0x22>
    21c4:	00 20       	and	r0, r0
    21c6:	71 f0       	breq	.+28     	; 0x21e4 <modf+0x4e>
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	44 1f       	adc	r20, r20
    21ce:	b3 95       	inc	r27
    21d0:	da f3       	brmi	.-10     	; 0x21c8 <modf+0x32>
    21d2:	0e d0       	rcall	.+28     	; 0x21f0 <modf+0x5a>
    21d4:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__subsf3>
    21d8:	61 30       	cpi	r22, 0x01	; 1
    21da:	71 05       	cpc	r23, r1
    21dc:	a0 e8       	ldi	r26, 0x80	; 128
    21de:	8a 07       	cpc	r24, r26
    21e0:	b9 46       	sbci	r27, 0x69	; 105
    21e2:	30 f4       	brcc	.+12     	; 0x21f0 <modf+0x5a>
    21e4:	9b 01       	movw	r18, r22
    21e6:	ac 01       	movw	r20, r24
    21e8:	66 27       	eor	r22, r22
    21ea:	77 27       	eor	r23, r23
    21ec:	88 27       	eor	r24, r24
    21ee:	90 78       	andi	r25, 0x80	; 128
    21f0:	30 96       	adiw	r30, 0x00	; 0
    21f2:	21 f0       	breq	.+8      	; 0x21fc <modf+0x66>
    21f4:	20 83       	st	Z, r18
    21f6:	31 83       	std	Z+1, r19	; 0x01
    21f8:	42 83       	std	Z+2, r20	; 0x02
    21fa:	53 83       	std	Z+3, r21	; 0x03
    21fc:	08 95       	ret

000021fe <__umulhisi3>:
    21fe:	a2 9f       	mul	r26, r18
    2200:	b0 01       	movw	r22, r0
    2202:	b3 9f       	mul	r27, r19
    2204:	c0 01       	movw	r24, r0
    2206:	a3 9f       	mul	r26, r19
    2208:	70 0d       	add	r23, r0
    220a:	81 1d       	adc	r24, r1
    220c:	11 24       	eor	r1, r1
    220e:	91 1d       	adc	r25, r1
    2210:	b2 9f       	mul	r27, r18
    2212:	70 0d       	add	r23, r0
    2214:	81 1d       	adc	r24, r1
    2216:	11 24       	eor	r1, r1
    2218:	91 1d       	adc	r25, r1
    221a:	08 95       	ret

0000221c <dtostrf>:
    221c:	ef 92       	push	r14
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	e8 01       	movw	r28, r16
    2228:	47 fd       	sbrc	r20, 7
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <dtostrf+0x14>
    222c:	34 e0       	ldi	r19, 0x04	; 4
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <dtostrf+0x16>
    2230:	34 e1       	ldi	r19, 0x14	; 20
    2232:	04 2e       	mov	r0, r20
    2234:	00 0c       	add	r0, r0
    2236:	55 0b       	sbc	r21, r21
    2238:	57 ff       	sbrs	r21, 7
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <dtostrf+0x26>
    223c:	51 95       	neg	r21
    223e:	41 95       	neg	r20
    2240:	51 09       	sbc	r21, r1
    2242:	e3 2e       	mov	r14, r19
    2244:	02 2f       	mov	r16, r18
    2246:	24 2f       	mov	r18, r20
    2248:	ae 01       	movw	r20, r28
    224a:	0e 94 65 11 	call	0x22ca	; 0x22ca <dtoa_prf>
    224e:	ce 01       	movw	r24, r28
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ef 90       	pop	r14
    225a:	08 95       	ret

0000225c <memset>:
    225c:	dc 01       	movw	r26, r24
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <memset+0x6>
    2260:	6d 93       	st	X+, r22
    2262:	41 50       	subi	r20, 0x01	; 1
    2264:	50 40       	sbci	r21, 0x00	; 0
    2266:	e0 f7       	brcc	.-8      	; 0x2260 <memset+0x4>
    2268:	08 95       	ret

0000226a <itoa>:
    226a:	45 32       	cpi	r20, 0x25	; 37
    226c:	51 05       	cpc	r21, r1
    226e:	20 f4       	brcc	.+8      	; 0x2278 <itoa+0xe>
    2270:	42 30       	cpi	r20, 0x02	; 2
    2272:	10 f0       	brcs	.+4      	; 0x2278 <itoa+0xe>
    2274:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__itoa_ncheck>
    2278:	fb 01       	movw	r30, r22
    227a:	10 82       	st	Z, r1
    227c:	cb 01       	movw	r24, r22
    227e:	08 95       	ret

00002280 <__itoa_ncheck>:
    2280:	bb 27       	eor	r27, r27
    2282:	4a 30       	cpi	r20, 0x0A	; 10
    2284:	31 f4       	brne	.+12     	; 0x2292 <__itoa_ncheck+0x12>
    2286:	99 23       	and	r25, r25
    2288:	22 f4       	brpl	.+8      	; 0x2292 <__itoa_ncheck+0x12>
    228a:	bd e2       	ldi	r27, 0x2D	; 45
    228c:	90 95       	com	r25
    228e:	81 95       	neg	r24
    2290:	9f 4f       	sbci	r25, 0xFF	; 255
    2292:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__utoa_common>

00002296 <__utoa_ncheck>:
    2296:	bb 27       	eor	r27, r27

00002298 <__utoa_common>:
    2298:	fb 01       	movw	r30, r22
    229a:	55 27       	eor	r21, r21
    229c:	aa 27       	eor	r26, r26
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	aa 1f       	adc	r26, r26
    22a4:	a4 17       	cp	r26, r20
    22a6:	10 f0       	brcs	.+4      	; 0x22ac <__utoa_common+0x14>
    22a8:	a4 1b       	sub	r26, r20
    22aa:	83 95       	inc	r24
    22ac:	50 51       	subi	r21, 0x10	; 16
    22ae:	b9 f7       	brne	.-18     	; 0x229e <__utoa_common+0x6>
    22b0:	a0 5d       	subi	r26, 0xD0	; 208
    22b2:	aa 33       	cpi	r26, 0x3A	; 58
    22b4:	08 f0       	brcs	.+2      	; 0x22b8 <__utoa_common+0x20>
    22b6:	a9 5d       	subi	r26, 0xD9	; 217
    22b8:	a1 93       	st	Z+, r26
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	79 f7       	brne	.-34     	; 0x229c <__utoa_common+0x4>
    22be:	b1 11       	cpse	r27, r1
    22c0:	b1 93       	st	Z+, r27
    22c2:	11 92       	st	Z+, r1
    22c4:	cb 01       	movw	r24, r22
    22c6:	0c 94 97 13 	jmp	0x272e	; 0x272e <strrev>

000022ca <dtoa_prf>:
    22ca:	a9 e0       	ldi	r26, 0x09	; 9
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	eb e6       	ldi	r30, 0x6B	; 107
    22d0:	f1 e1       	ldi	r31, 0x11	; 17
    22d2:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0xc>
    22d6:	6a 01       	movw	r12, r20
    22d8:	12 2f       	mov	r17, r18
    22da:	b0 2e       	mov	r11, r16
    22dc:	2b e3       	ldi	r18, 0x3B	; 59
    22de:	20 17       	cp	r18, r16
    22e0:	20 f0       	brcs	.+8      	; 0x22ea <dtoa_prf+0x20>
    22e2:	ff 24       	eor	r15, r15
    22e4:	f3 94       	inc	r15
    22e6:	f0 0e       	add	r15, r16
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <dtoa_prf+0x24>
    22ea:	2c e3       	ldi	r18, 0x3C	; 60
    22ec:	f2 2e       	mov	r15, r18
    22ee:	0f 2d       	mov	r16, r15
    22f0:	27 e0       	ldi	r18, 0x07	; 7
    22f2:	ae 01       	movw	r20, r28
    22f4:	4f 5f       	subi	r20, 0xFF	; 255
    22f6:	5f 4f       	sbci	r21, 0xFF	; 255
    22f8:	0e 94 bf 12 	call	0x257e	; 0x257e <__ftoa_engine>
    22fc:	bc 01       	movw	r22, r24
    22fe:	49 81       	ldd	r20, Y+1	; 0x01
    2300:	84 2f       	mov	r24, r20
    2302:	89 70       	andi	r24, 0x09	; 9
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	31 f0       	breq	.+12     	; 0x2314 <dtoa_prf+0x4a>
    2308:	e1 fc       	sbrc	r14, 1
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <dtoa_prf+0x4e>
    230c:	e0 fe       	sbrs	r14, 0
    230e:	06 c0       	rjmp	.+12     	; 0x231c <dtoa_prf+0x52>
    2310:	90 e2       	ldi	r25, 0x20	; 32
    2312:	05 c0       	rjmp	.+10     	; 0x231e <dtoa_prf+0x54>
    2314:	9d e2       	ldi	r25, 0x2D	; 45
    2316:	03 c0       	rjmp	.+6      	; 0x231e <dtoa_prf+0x54>
    2318:	9b e2       	ldi	r25, 0x2B	; 43
    231a:	01 c0       	rjmp	.+2      	; 0x231e <dtoa_prf+0x54>
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	5e 2d       	mov	r21, r14
    2320:	50 71       	andi	r21, 0x10	; 16
    2322:	43 ff       	sbrs	r20, 3
    2324:	3c c0       	rjmp	.+120    	; 0x239e <dtoa_prf+0xd4>
    2326:	91 11       	cpse	r25, r1
    2328:	02 c0       	rjmp	.+4      	; 0x232e <dtoa_prf+0x64>
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <dtoa_prf+0x66>
    232e:	84 e0       	ldi	r24, 0x04	; 4
    2330:	81 17       	cp	r24, r17
    2332:	18 f4       	brcc	.+6      	; 0x233a <dtoa_prf+0x70>
    2334:	21 2f       	mov	r18, r17
    2336:	28 1b       	sub	r18, r24
    2338:	01 c0       	rjmp	.+2      	; 0x233c <dtoa_prf+0x72>
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	51 11       	cpse	r21, r1
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <dtoa_prf+0x8c>
    2340:	f6 01       	movw	r30, r12
    2342:	82 2f       	mov	r24, r18
    2344:	30 e2       	ldi	r19, 0x20	; 32
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <dtoa_prf+0x86>
    234a:	31 93       	st	Z+, r19
    234c:	81 50       	subi	r24, 0x01	; 1
    234e:	fb cf       	rjmp	.-10     	; 0x2346 <dtoa_prf+0x7c>
    2350:	c2 0e       	add	r12, r18
    2352:	d1 1c       	adc	r13, r1
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	99 23       	and	r25, r25
    2358:	29 f0       	breq	.+10     	; 0x2364 <dtoa_prf+0x9a>
    235a:	d6 01       	movw	r26, r12
    235c:	9c 93       	st	X, r25
    235e:	f6 01       	movw	r30, r12
    2360:	31 96       	adiw	r30, 0x01	; 1
    2362:	6f 01       	movw	r12, r30
    2364:	c6 01       	movw	r24, r12
    2366:	03 96       	adiw	r24, 0x03	; 3
    2368:	e2 fe       	sbrs	r14, 2
    236a:	0a c0       	rjmp	.+20     	; 0x2380 <dtoa_prf+0xb6>
    236c:	3e e4       	ldi	r19, 0x4E	; 78
    236e:	d6 01       	movw	r26, r12
    2370:	3c 93       	st	X, r19
    2372:	41 e4       	ldi	r20, 0x41	; 65
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	4c 93       	st	X, r20
    2378:	11 97       	sbiw	r26, 0x01	; 1
    237a:	12 96       	adiw	r26, 0x02	; 2
    237c:	3c 93       	st	X, r19
    237e:	06 c0       	rjmp	.+12     	; 0x238c <dtoa_prf+0xc2>
    2380:	3e e6       	ldi	r19, 0x6E	; 110
    2382:	f6 01       	movw	r30, r12
    2384:	30 83       	st	Z, r19
    2386:	41 e6       	ldi	r20, 0x61	; 97
    2388:	41 83       	std	Z+1, r20	; 0x01
    238a:	32 83       	std	Z+2, r19	; 0x02
    238c:	fc 01       	movw	r30, r24
    238e:	32 2f       	mov	r19, r18
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	33 23       	and	r19, r19
    2394:	09 f4       	brne	.+2      	; 0x2398 <dtoa_prf+0xce>
    2396:	42 c0       	rjmp	.+132    	; 0x241c <dtoa_prf+0x152>
    2398:	41 93       	st	Z+, r20
    239a:	31 50       	subi	r19, 0x01	; 1
    239c:	fa cf       	rjmp	.-12     	; 0x2392 <dtoa_prf+0xc8>
    239e:	42 ff       	sbrs	r20, 2
    23a0:	44 c0       	rjmp	.+136    	; 0x242a <dtoa_prf+0x160>
    23a2:	91 11       	cpse	r25, r1
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <dtoa_prf+0xe0>
    23a6:	83 e0       	ldi	r24, 0x03	; 3
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <dtoa_prf+0xe2>
    23aa:	84 e0       	ldi	r24, 0x04	; 4
    23ac:	81 17       	cp	r24, r17
    23ae:	18 f4       	brcc	.+6      	; 0x23b6 <dtoa_prf+0xec>
    23b0:	21 2f       	mov	r18, r17
    23b2:	28 1b       	sub	r18, r24
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <dtoa_prf+0xee>
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	51 11       	cpse	r21, r1
    23ba:	0b c0       	rjmp	.+22     	; 0x23d2 <dtoa_prf+0x108>
    23bc:	f6 01       	movw	r30, r12
    23be:	82 2f       	mov	r24, r18
    23c0:	30 e2       	ldi	r19, 0x20	; 32
    23c2:	88 23       	and	r24, r24
    23c4:	19 f0       	breq	.+6      	; 0x23cc <dtoa_prf+0x102>
    23c6:	31 93       	st	Z+, r19
    23c8:	81 50       	subi	r24, 0x01	; 1
    23ca:	fb cf       	rjmp	.-10     	; 0x23c2 <dtoa_prf+0xf8>
    23cc:	c2 0e       	add	r12, r18
    23ce:	d1 1c       	adc	r13, r1
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	99 23       	and	r25, r25
    23d4:	29 f0       	breq	.+10     	; 0x23e0 <dtoa_prf+0x116>
    23d6:	d6 01       	movw	r26, r12
    23d8:	9c 93       	st	X, r25
    23da:	f6 01       	movw	r30, r12
    23dc:	31 96       	adiw	r30, 0x01	; 1
    23de:	6f 01       	movw	r12, r30
    23e0:	c6 01       	movw	r24, r12
    23e2:	03 96       	adiw	r24, 0x03	; 3
    23e4:	e2 fe       	sbrs	r14, 2
    23e6:	0b c0       	rjmp	.+22     	; 0x23fe <dtoa_prf+0x134>
    23e8:	39 e4       	ldi	r19, 0x49	; 73
    23ea:	d6 01       	movw	r26, r12
    23ec:	3c 93       	st	X, r19
    23ee:	3e e4       	ldi	r19, 0x4E	; 78
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	3c 93       	st	X, r19
    23f4:	11 97       	sbiw	r26, 0x01	; 1
    23f6:	36 e4       	ldi	r19, 0x46	; 70
    23f8:	12 96       	adiw	r26, 0x02	; 2
    23fa:	3c 93       	st	X, r19
    23fc:	07 c0       	rjmp	.+14     	; 0x240c <dtoa_prf+0x142>
    23fe:	39 e6       	ldi	r19, 0x69	; 105
    2400:	f6 01       	movw	r30, r12
    2402:	30 83       	st	Z, r19
    2404:	3e e6       	ldi	r19, 0x6E	; 110
    2406:	31 83       	std	Z+1, r19	; 0x01
    2408:	36 e6       	ldi	r19, 0x66	; 102
    240a:	32 83       	std	Z+2, r19	; 0x02
    240c:	fc 01       	movw	r30, r24
    240e:	32 2f       	mov	r19, r18
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	33 23       	and	r19, r19
    2414:	19 f0       	breq	.+6      	; 0x241c <dtoa_prf+0x152>
    2416:	41 93       	st	Z+, r20
    2418:	31 50       	subi	r19, 0x01	; 1
    241a:	fb cf       	rjmp	.-10     	; 0x2412 <dtoa_prf+0x148>
    241c:	fc 01       	movw	r30, r24
    241e:	e2 0f       	add	r30, r18
    2420:	f1 1d       	adc	r31, r1
    2422:	10 82       	st	Z, r1
    2424:	8e ef       	ldi	r24, 0xFE	; 254
    2426:	9f ef       	ldi	r25, 0xFF	; 255
    2428:	a6 c0       	rjmp	.+332    	; 0x2576 <dtoa_prf+0x2ac>
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	91 11       	cpse	r25, r1
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <dtoa_prf+0x16c>
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	16 16       	cp	r1, r22
    2438:	17 06       	cpc	r1, r23
    243a:	1c f4       	brge	.+6      	; 0x2442 <dtoa_prf+0x178>
    243c:	fb 01       	movw	r30, r22
    243e:	31 96       	adiw	r30, 0x01	; 1
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <dtoa_prf+0x17c>
    2442:	e1 e0       	ldi	r30, 0x01	; 1
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	2e 0f       	add	r18, r30
    2448:	3f 1f       	adc	r19, r31
    244a:	bb 20       	and	r11, r11
    244c:	21 f0       	breq	.+8      	; 0x2456 <dtoa_prf+0x18c>
    244e:	eb 2d       	mov	r30, r11
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	31 96       	adiw	r30, 0x01	; 1
    2454:	02 c0       	rjmp	.+4      	; 0x245a <dtoa_prf+0x190>
    2456:	e0 e0       	ldi	r30, 0x00	; 0
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	2e 0f       	add	r18, r30
    245c:	3f 1f       	adc	r19, r31
    245e:	e1 2f       	mov	r30, r17
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	2e 17       	cp	r18, r30
    2464:	3f 07       	cpc	r19, r31
    2466:	1c f4       	brge	.+6      	; 0x246e <dtoa_prf+0x1a4>
    2468:	12 1b       	sub	r17, r18
    246a:	21 2f       	mov	r18, r17
    246c:	01 c0       	rjmp	.+2      	; 0x2470 <dtoa_prf+0x1a6>
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	8e 2d       	mov	r24, r14
    2472:	88 71       	andi	r24, 0x18	; 24
    2474:	59 f4       	brne	.+22     	; 0x248c <dtoa_prf+0x1c2>
    2476:	f6 01       	movw	r30, r12
    2478:	82 2f       	mov	r24, r18
    247a:	30 e2       	ldi	r19, 0x20	; 32
    247c:	88 23       	and	r24, r24
    247e:	19 f0       	breq	.+6      	; 0x2486 <dtoa_prf+0x1bc>
    2480:	31 93       	st	Z+, r19
    2482:	81 50       	subi	r24, 0x01	; 1
    2484:	fb cf       	rjmp	.-10     	; 0x247c <dtoa_prf+0x1b2>
    2486:	c2 0e       	add	r12, r18
    2488:	d1 1c       	adc	r13, r1
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	99 23       	and	r25, r25
    248e:	29 f0       	breq	.+10     	; 0x249a <dtoa_prf+0x1d0>
    2490:	d6 01       	movw	r26, r12
    2492:	9c 93       	st	X, r25
    2494:	f6 01       	movw	r30, r12
    2496:	31 96       	adiw	r30, 0x01	; 1
    2498:	6f 01       	movw	r12, r30
    249a:	51 11       	cpse	r21, r1
    249c:	0b c0       	rjmp	.+22     	; 0x24b4 <dtoa_prf+0x1ea>
    249e:	f6 01       	movw	r30, r12
    24a0:	82 2f       	mov	r24, r18
    24a2:	90 e3       	ldi	r25, 0x30	; 48
    24a4:	88 23       	and	r24, r24
    24a6:	19 f0       	breq	.+6      	; 0x24ae <dtoa_prf+0x1e4>
    24a8:	91 93       	st	Z+, r25
    24aa:	81 50       	subi	r24, 0x01	; 1
    24ac:	fb cf       	rjmp	.-10     	; 0x24a4 <dtoa_prf+0x1da>
    24ae:	c2 0e       	add	r12, r18
    24b0:	d1 1c       	adc	r13, r1
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	0f 2d       	mov	r16, r15
    24b6:	06 0f       	add	r16, r22
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	34 2f       	mov	r19, r20
    24bc:	30 71       	andi	r19, 0x10	; 16
    24be:	44 ff       	sbrs	r20, 4
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <dtoa_prf+0x1fe>
    24c2:	91 33       	cpi	r25, 0x31	; 49
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <dtoa_prf+0x1fe>
    24c6:	01 50       	subi	r16, 0x01	; 1
    24c8:	10 16       	cp	r1, r16
    24ca:	24 f4       	brge	.+8      	; 0x24d4 <dtoa_prf+0x20a>
    24cc:	09 30       	cpi	r16, 0x09	; 9
    24ce:	18 f0       	brcs	.+6      	; 0x24d6 <dtoa_prf+0x20c>
    24d0:	08 e0       	ldi	r16, 0x08	; 8
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <dtoa_prf+0x20c>
    24d4:	01 e0       	ldi	r16, 0x01	; 1
    24d6:	ab 01       	movw	r20, r22
    24d8:	77 ff       	sbrs	r23, 7
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <dtoa_prf+0x216>
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	fb 01       	movw	r30, r22
    24e2:	e4 1b       	sub	r30, r20
    24e4:	f5 0b       	sbc	r31, r21
    24e6:	a1 e0       	ldi	r26, 0x01	; 1
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	ac 0f       	add	r26, r28
    24ec:	bd 1f       	adc	r27, r29
    24ee:	ea 0f       	add	r30, r26
    24f0:	fb 1f       	adc	r31, r27
    24f2:	8e e2       	ldi	r24, 0x2E	; 46
    24f4:	a8 2e       	mov	r10, r24
    24f6:	4b 01       	movw	r8, r22
    24f8:	80 1a       	sub	r8, r16
    24fa:	91 08       	sbc	r9, r1
    24fc:	0b 2d       	mov	r16, r11
    24fe:	10 e0       	ldi	r17, 0x00	; 0
    2500:	11 95       	neg	r17
    2502:	01 95       	neg	r16
    2504:	11 09       	sbc	r17, r1
    2506:	4f 3f       	cpi	r20, 0xFF	; 255
    2508:	bf ef       	ldi	r27, 0xFF	; 255
    250a:	5b 07       	cpc	r21, r27
    250c:	21 f4       	brne	.+8      	; 0x2516 <dtoa_prf+0x24c>
    250e:	d6 01       	movw	r26, r12
    2510:	ac 92       	st	X, r10
    2512:	11 96       	adiw	r26, 0x01	; 1
    2514:	6d 01       	movw	r12, r26
    2516:	64 17       	cp	r22, r20
    2518:	75 07       	cpc	r23, r21
    251a:	2c f0       	brlt	.+10     	; 0x2526 <dtoa_prf+0x25c>
    251c:	84 16       	cp	r8, r20
    251e:	95 06       	cpc	r9, r21
    2520:	14 f4       	brge	.+4      	; 0x2526 <dtoa_prf+0x25c>
    2522:	81 81       	ldd	r24, Z+1	; 0x01
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <dtoa_prf+0x25e>
    2526:	80 e3       	ldi	r24, 0x30	; 48
    2528:	41 50       	subi	r20, 0x01	; 1
    252a:	51 09       	sbc	r21, r1
    252c:	31 96       	adiw	r30, 0x01	; 1
    252e:	d6 01       	movw	r26, r12
    2530:	11 96       	adiw	r26, 0x01	; 1
    2532:	7d 01       	movw	r14, r26
    2534:	40 17       	cp	r20, r16
    2536:	51 07       	cpc	r21, r17
    2538:	24 f0       	brlt	.+8      	; 0x2542 <dtoa_prf+0x278>
    253a:	d6 01       	movw	r26, r12
    253c:	8c 93       	st	X, r24
    253e:	67 01       	movw	r12, r14
    2540:	e2 cf       	rjmp	.-60     	; 0x2506 <dtoa_prf+0x23c>
    2542:	64 17       	cp	r22, r20
    2544:	75 07       	cpc	r23, r21
    2546:	39 f4       	brne	.+14     	; 0x2556 <dtoa_prf+0x28c>
    2548:	96 33       	cpi	r25, 0x36	; 54
    254a:	20 f4       	brcc	.+8      	; 0x2554 <dtoa_prf+0x28a>
    254c:	95 33       	cpi	r25, 0x35	; 53
    254e:	19 f4       	brne	.+6      	; 0x2556 <dtoa_prf+0x28c>
    2550:	31 11       	cpse	r19, r1
    2552:	01 c0       	rjmp	.+2      	; 0x2556 <dtoa_prf+0x28c>
    2554:	81 e3       	ldi	r24, 0x31	; 49
    2556:	f6 01       	movw	r30, r12
    2558:	80 83       	st	Z, r24
    255a:	f7 01       	movw	r30, r14
    255c:	82 2f       	mov	r24, r18
    255e:	90 e2       	ldi	r25, 0x20	; 32
    2560:	88 23       	and	r24, r24
    2562:	19 f0       	breq	.+6      	; 0x256a <dtoa_prf+0x2a0>
    2564:	91 93       	st	Z+, r25
    2566:	81 50       	subi	r24, 0x01	; 1
    2568:	fb cf       	rjmp	.-10     	; 0x2560 <dtoa_prf+0x296>
    256a:	f7 01       	movw	r30, r14
    256c:	e2 0f       	add	r30, r18
    256e:	f1 1d       	adc	r31, r1
    2570:	10 82       	st	Z, r1
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	29 96       	adiw	r28, 0x09	; 9
    2578:	ec e0       	ldi	r30, 0x0C	; 12
    257a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0xc>

0000257e <__ftoa_engine>:
    257e:	28 30       	cpi	r18, 0x08	; 8
    2580:	08 f0       	brcs	.+2      	; 0x2584 <__ftoa_engine+0x6>
    2582:	27 e0       	ldi	r18, 0x07	; 7
    2584:	33 27       	eor	r19, r19
    2586:	da 01       	movw	r26, r20
    2588:	99 0f       	add	r25, r25
    258a:	31 1d       	adc	r19, r1
    258c:	87 fd       	sbrc	r24, 7
    258e:	91 60       	ori	r25, 0x01	; 1
    2590:	00 96       	adiw	r24, 0x00	; 0
    2592:	61 05       	cpc	r22, r1
    2594:	71 05       	cpc	r23, r1
    2596:	39 f4       	brne	.+14     	; 0x25a6 <__ftoa_engine+0x28>
    2598:	32 60       	ori	r19, 0x02	; 2
    259a:	2e 5f       	subi	r18, 0xFE	; 254
    259c:	3d 93       	st	X+, r19
    259e:	30 e3       	ldi	r19, 0x30	; 48
    25a0:	2a 95       	dec	r18
    25a2:	e1 f7       	brne	.-8      	; 0x259c <__ftoa_engine+0x1e>
    25a4:	08 95       	ret
    25a6:	9f 3f       	cpi	r25, 0xFF	; 255
    25a8:	30 f0       	brcs	.+12     	; 0x25b6 <__ftoa_engine+0x38>
    25aa:	80 38       	cpi	r24, 0x80	; 128
    25ac:	71 05       	cpc	r23, r1
    25ae:	61 05       	cpc	r22, r1
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <__ftoa_engine+0x36>
    25b2:	3c 5f       	subi	r19, 0xFC	; 252
    25b4:	3c 5f       	subi	r19, 0xFC	; 252
    25b6:	3d 93       	st	X+, r19
    25b8:	91 30       	cpi	r25, 0x01	; 1
    25ba:	08 f0       	brcs	.+2      	; 0x25be <__ftoa_engine+0x40>
    25bc:	80 68       	ori	r24, 0x80	; 128
    25be:	91 1d       	adc	r25, r1
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	1f 93       	push	r17
    25c6:	0f 93       	push	r16
    25c8:	ff 92       	push	r15
    25ca:	ef 92       	push	r14
    25cc:	19 2f       	mov	r17, r25
    25ce:	98 7f       	andi	r25, 0xF8	; 248
    25d0:	96 95       	lsr	r25
    25d2:	e9 2f       	mov	r30, r25
    25d4:	96 95       	lsr	r25
    25d6:	96 95       	lsr	r25
    25d8:	e9 0f       	add	r30, r25
    25da:	ff 27       	eor	r31, r31
    25dc:	e0 5d       	subi	r30, 0xD0	; 208
    25de:	fe 4f       	sbci	r31, 0xFE	; 254
    25e0:	99 27       	eor	r25, r25
    25e2:	33 27       	eor	r19, r19
    25e4:	ee 24       	eor	r14, r14
    25e6:	ff 24       	eor	r15, r15
    25e8:	a7 01       	movw	r20, r14
    25ea:	e7 01       	movw	r28, r14
    25ec:	05 90       	lpm	r0, Z+
    25ee:	08 94       	sec
    25f0:	07 94       	ror	r0
    25f2:	28 f4       	brcc	.+10     	; 0x25fe <__ftoa_engine+0x80>
    25f4:	36 0f       	add	r19, r22
    25f6:	e7 1e       	adc	r14, r23
    25f8:	f8 1e       	adc	r15, r24
    25fa:	49 1f       	adc	r20, r25
    25fc:	51 1d       	adc	r21, r1
    25fe:	66 0f       	add	r22, r22
    2600:	77 1f       	adc	r23, r23
    2602:	88 1f       	adc	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	06 94       	lsr	r0
    2608:	a1 f7       	brne	.-24     	; 0x25f2 <__ftoa_engine+0x74>
    260a:	05 90       	lpm	r0, Z+
    260c:	07 94       	ror	r0
    260e:	28 f4       	brcc	.+10     	; 0x261a <__ftoa_engine+0x9c>
    2610:	e7 0e       	add	r14, r23
    2612:	f8 1e       	adc	r15, r24
    2614:	49 1f       	adc	r20, r25
    2616:	56 1f       	adc	r21, r22
    2618:	c1 1d       	adc	r28, r1
    261a:	77 0f       	add	r23, r23
    261c:	88 1f       	adc	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	66 1f       	adc	r22, r22
    2622:	06 94       	lsr	r0
    2624:	a1 f7       	brne	.-24     	; 0x260e <__ftoa_engine+0x90>
    2626:	05 90       	lpm	r0, Z+
    2628:	07 94       	ror	r0
    262a:	28 f4       	brcc	.+10     	; 0x2636 <__ftoa_engine+0xb8>
    262c:	f8 0e       	add	r15, r24
    262e:	49 1f       	adc	r20, r25
    2630:	56 1f       	adc	r21, r22
    2632:	c7 1f       	adc	r28, r23
    2634:	d1 1d       	adc	r29, r1
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	66 1f       	adc	r22, r22
    263c:	77 1f       	adc	r23, r23
    263e:	06 94       	lsr	r0
    2640:	a1 f7       	brne	.-24     	; 0x262a <__ftoa_engine+0xac>
    2642:	05 90       	lpm	r0, Z+
    2644:	07 94       	ror	r0
    2646:	20 f4       	brcc	.+8      	; 0x2650 <__ftoa_engine+0xd2>
    2648:	49 0f       	add	r20, r25
    264a:	56 1f       	adc	r21, r22
    264c:	c7 1f       	adc	r28, r23
    264e:	d8 1f       	adc	r29, r24
    2650:	99 0f       	add	r25, r25
    2652:	66 1f       	adc	r22, r22
    2654:	77 1f       	adc	r23, r23
    2656:	88 1f       	adc	r24, r24
    2658:	06 94       	lsr	r0
    265a:	a9 f7       	brne	.-22     	; 0x2646 <__ftoa_engine+0xc8>
    265c:	84 91       	lpm	r24, Z
    265e:	10 95       	com	r17
    2660:	17 70       	andi	r17, 0x07	; 7
    2662:	41 f0       	breq	.+16     	; 0x2674 <__ftoa_engine+0xf6>
    2664:	d6 95       	lsr	r29
    2666:	c7 95       	ror	r28
    2668:	57 95       	ror	r21
    266a:	47 95       	ror	r20
    266c:	f7 94       	ror	r15
    266e:	e7 94       	ror	r14
    2670:	1a 95       	dec	r17
    2672:	c1 f7       	brne	.-16     	; 0x2664 <__ftoa_engine+0xe6>
    2674:	e6 ed       	ldi	r30, 0xD6	; 214
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	68 94       	set
    267a:	15 90       	lpm	r1, Z+
    267c:	15 91       	lpm	r17, Z+
    267e:	35 91       	lpm	r19, Z+
    2680:	65 91       	lpm	r22, Z+
    2682:	95 91       	lpm	r25, Z+
    2684:	05 90       	lpm	r0, Z+
    2686:	7f e2       	ldi	r23, 0x2F	; 47
    2688:	73 95       	inc	r23
    268a:	e1 18       	sub	r14, r1
    268c:	f1 0a       	sbc	r15, r17
    268e:	43 0b       	sbc	r20, r19
    2690:	56 0b       	sbc	r21, r22
    2692:	c9 0b       	sbc	r28, r25
    2694:	d0 09       	sbc	r29, r0
    2696:	c0 f7       	brcc	.-16     	; 0x2688 <__ftoa_engine+0x10a>
    2698:	e1 0c       	add	r14, r1
    269a:	f1 1e       	adc	r15, r17
    269c:	43 1f       	adc	r20, r19
    269e:	56 1f       	adc	r21, r22
    26a0:	c9 1f       	adc	r28, r25
    26a2:	d0 1d       	adc	r29, r0
    26a4:	7e f4       	brtc	.+30     	; 0x26c4 <__ftoa_engine+0x146>
    26a6:	70 33       	cpi	r23, 0x30	; 48
    26a8:	11 f4       	brne	.+4      	; 0x26ae <__ftoa_engine+0x130>
    26aa:	8a 95       	dec	r24
    26ac:	e6 cf       	rjmp	.-52     	; 0x267a <__ftoa_engine+0xfc>
    26ae:	e8 94       	clt
    26b0:	01 50       	subi	r16, 0x01	; 1
    26b2:	30 f0       	brcs	.+12     	; 0x26c0 <__ftoa_engine+0x142>
    26b4:	08 0f       	add	r16, r24
    26b6:	0a f4       	brpl	.+2      	; 0x26ba <__ftoa_engine+0x13c>
    26b8:	00 27       	eor	r16, r16
    26ba:	02 17       	cp	r16, r18
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <__ftoa_engine+0x142>
    26be:	20 2f       	mov	r18, r16
    26c0:	23 95       	inc	r18
    26c2:	02 2f       	mov	r16, r18
    26c4:	7a 33       	cpi	r23, 0x3A	; 58
    26c6:	28 f0       	brcs	.+10     	; 0x26d2 <__ftoa_engine+0x154>
    26c8:	79 e3       	ldi	r23, 0x39	; 57
    26ca:	7d 93       	st	X+, r23
    26cc:	2a 95       	dec	r18
    26ce:	e9 f7       	brne	.-6      	; 0x26ca <__ftoa_engine+0x14c>
    26d0:	10 c0       	rjmp	.+32     	; 0x26f2 <__ftoa_engine+0x174>
    26d2:	7d 93       	st	X+, r23
    26d4:	2a 95       	dec	r18
    26d6:	89 f6       	brne	.-94     	; 0x267a <__ftoa_engine+0xfc>
    26d8:	06 94       	lsr	r0
    26da:	97 95       	ror	r25
    26dc:	67 95       	ror	r22
    26de:	37 95       	ror	r19
    26e0:	17 95       	ror	r17
    26e2:	17 94       	ror	r1
    26e4:	e1 18       	sub	r14, r1
    26e6:	f1 0a       	sbc	r15, r17
    26e8:	43 0b       	sbc	r20, r19
    26ea:	56 0b       	sbc	r21, r22
    26ec:	c9 0b       	sbc	r28, r25
    26ee:	d0 09       	sbc	r29, r0
    26f0:	98 f0       	brcs	.+38     	; 0x2718 <__ftoa_engine+0x19a>
    26f2:	23 95       	inc	r18
    26f4:	7e 91       	ld	r23, -X
    26f6:	73 95       	inc	r23
    26f8:	7a 33       	cpi	r23, 0x3A	; 58
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <__ftoa_engine+0x180>
    26fc:	70 e3       	ldi	r23, 0x30	; 48
    26fe:	7c 93       	st	X, r23
    2700:	20 13       	cpse	r18, r16
    2702:	b8 f7       	brcc	.-18     	; 0x26f2 <__ftoa_engine+0x174>
    2704:	7e 91       	ld	r23, -X
    2706:	70 61       	ori	r23, 0x10	; 16
    2708:	7d 93       	st	X+, r23
    270a:	30 f0       	brcs	.+12     	; 0x2718 <__ftoa_engine+0x19a>
    270c:	83 95       	inc	r24
    270e:	71 e3       	ldi	r23, 0x31	; 49
    2710:	7d 93       	st	X+, r23
    2712:	70 e3       	ldi	r23, 0x30	; 48
    2714:	2a 95       	dec	r18
    2716:	e1 f7       	brne	.-8      	; 0x2710 <__ftoa_engine+0x192>
    2718:	11 24       	eor	r1, r1
    271a:	ef 90       	pop	r14
    271c:	ff 90       	pop	r15
    271e:	0f 91       	pop	r16
    2720:	1f 91       	pop	r17
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	99 27       	eor	r25, r25
    2728:	87 fd       	sbrc	r24, 7
    272a:	90 95       	com	r25
    272c:	08 95       	ret

0000272e <strrev>:
    272e:	dc 01       	movw	r26, r24
    2730:	fc 01       	movw	r30, r24
    2732:	67 2f       	mov	r22, r23
    2734:	71 91       	ld	r23, Z+
    2736:	77 23       	and	r23, r23
    2738:	e1 f7       	brne	.-8      	; 0x2732 <strrev+0x4>
    273a:	32 97       	sbiw	r30, 0x02	; 2
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <strrev+0x18>
    273e:	7c 91       	ld	r23, X
    2740:	6d 93       	st	X+, r22
    2742:	70 83       	st	Z, r23
    2744:	62 91       	ld	r22, -Z
    2746:	ae 17       	cp	r26, r30
    2748:	bf 07       	cpc	r27, r31
    274a:	c8 f3       	brcs	.-14     	; 0x273e <strrev+0x10>
    274c:	08 95       	ret

0000274e <__prologue_saves__>:
    274e:	2f 92       	push	r2
    2750:	3f 92       	push	r3
    2752:	4f 92       	push	r4
    2754:	5f 92       	push	r5
    2756:	6f 92       	push	r6
    2758:	7f 92       	push	r7
    275a:	8f 92       	push	r8
    275c:	9f 92       	push	r9
    275e:	af 92       	push	r10
    2760:	bf 92       	push	r11
    2762:	cf 92       	push	r12
    2764:	df 92       	push	r13
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	ca 1b       	sub	r28, r26
    2778:	db 0b       	sbc	r29, r27
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	09 94       	ijmp

00002786 <__epilogue_restores__>:
    2786:	2a 88       	ldd	r2, Y+18	; 0x12
    2788:	39 88       	ldd	r3, Y+17	; 0x11
    278a:	48 88       	ldd	r4, Y+16	; 0x10
    278c:	5f 84       	ldd	r5, Y+15	; 0x0f
    278e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2790:	7d 84       	ldd	r7, Y+13	; 0x0d
    2792:	8c 84       	ldd	r8, Y+12	; 0x0c
    2794:	9b 84       	ldd	r9, Y+11	; 0x0b
    2796:	aa 84       	ldd	r10, Y+10	; 0x0a
    2798:	b9 84       	ldd	r11, Y+9	; 0x09
    279a:	c8 84       	ldd	r12, Y+8	; 0x08
    279c:	df 80       	ldd	r13, Y+7	; 0x07
    279e:	ee 80       	ldd	r14, Y+6	; 0x06
    27a0:	fd 80       	ldd	r15, Y+5	; 0x05
    27a2:	0c 81       	ldd	r16, Y+4	; 0x04
    27a4:	1b 81       	ldd	r17, Y+3	; 0x03
    27a6:	aa 81       	ldd	r26, Y+2	; 0x02
    27a8:	b9 81       	ldd	r27, Y+1	; 0x01
    27aa:	ce 0f       	add	r28, r30
    27ac:	d1 1d       	adc	r29, r1
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	ed 01       	movw	r28, r26
    27ba:	08 95       	ret

000027bc <_exit>:
    27bc:	f8 94       	cli

000027be <__stop_program>:
    27be:	ff cf       	rjmp	.-2      	; 0x27be <__stop_program>
